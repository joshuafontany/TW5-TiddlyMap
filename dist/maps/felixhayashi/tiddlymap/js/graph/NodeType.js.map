{"version":3,"sources":["felixhayashi/tiddlymap/js/graph/NodeType.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_MapElementType2","require","_MapElementType3","_interopRequireDefault","_utils","_utils2","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","NodeType","_MapElementType","id","data","this","utils","getWithoutPrefix","$tm","path","nodeTypes","_this","getPrototypeOf","fieldMeta","freeze","getInheritors","src","scope","getMatches","$tw","wiki","allTitles","MapElementType","getInstance","view","priority","parse","raw","isNaN","parseInt","stringify","num","isInteger","toString","getWithoutNewLines","fa-icon","tw-icon"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/graph/NodeType.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/NodeType\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport MapElementType from '$:/plugins/felixhayashi/tiddlymap/js/MapElementType';\nimport utils          from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\n/**\n * Used to define the type of a node.\n *\n * Note: NodeType instances are immutable (frozen).\n */\nclass NodeType extends MapElementType {\n\n  constructor(id, data) {\n\n    id = (typeof id === 'string'\n      ? utils.getWithoutPrefix(id, $tm.path.nodeTypes + '/')\n      : 'tmap:unknown');\n\n    // call the parent constructor\n    super(id, $tm.path.nodeTypes, NodeType.fieldMeta, data);\n\n    Object.freeze(this);\n\n  }\n\n  /**\n   * Get all tiddlers that inherit this type.\n   *\n   * @param {Array<TiddlerReference>} [src=$tw.wiki.allTitles()] - A list\n   *     of tiddlers that is searched for inheritors.\n   * @return {Array<TiddlerReference>} The inheritors.\n   */\n  getInheritors(src) {\n\n    return (this.scope ? utils.getMatches(this.scope, src || $tw.wiki.allTitles()) : []);\n\n  }\n\n}\n\n/**\n * @see https://github.com/babel/babel/issues/4854\n * @param {string} id - Either the edge type id (name)\n *     or a tiddler reference denoting the type or an\n *     `EdgeType` object (that is directly bounced back). If the\n *     id can be translated into a tiddler object that resides in\n *     the edge type path, then its data is retrieved automatically.\n */\nNodeType.getInstance = id => id instanceof NodeType ? id : new NodeType(id);\n\nNodeType.fieldMeta = {\n  ...MapElementType.fieldMeta,\n  'view': {},\n  'priority': {\n    parse: raw => isNaN(raw) ? 1 : parseInt(raw),\n    stringify: num => utils.isInteger(num) ? num.toString() : '1',\n  },\n  'scope': {\n    stringify: utils.getWithoutNewLines\n  },\n  'fa-icon': {},\n  'tw-icon': {},\n};\n\n/*** Exports *******************************************************/\n\nexport default NodeType;\n"],"sourceRoot":"../../../../../../src/plugins"}