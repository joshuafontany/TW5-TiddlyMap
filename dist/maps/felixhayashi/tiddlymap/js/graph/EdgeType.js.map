{"version":3,"sources":["felixhayashi/tiddlymap/js/graph/EdgeType.js"],"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","_extends","assign","target","i","arguments","length","source","key","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_MapElementType2","require","_MapElementType3","_interopRequireDefault","_utils","_utils2","_environment","env","_interopRequireWildcard","__esModule","newObj","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","setPrototypeOf","__proto__","EdgeType","_MapElementType","id","data","this","_EdgeType$getIdParts","getIdParts","marker","namespace","name","getId","_this","getPrototypeOf","path","edgeTypes","fieldMeta","arrows","style","invertedArrow","isArrowEnabled","toArrow","biArrow","freeze","getLabel","label","undefined","utils","getWithoutPrefix","match","edgeTypeRegex","MapElementType","getInstance","show-label","direction","arrow","enabled","RegExp"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/graph/EdgeType.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/EdgeType\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport MapElementType from '$:/plugins/felixhayashi/tiddlymap/js/MapElementType';\nimport utils          from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport * as env       from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\n\n/*** Code **********************************************************/\n\n/**\n * This class is used to abstract edge types. It facilitates the parsing\n * of style information, the translation of type names into actual type data\n * or the persistance of edge type data.\n *\n * Note: EdgeType instances are immutable (frozen).\n */\nclass EdgeType extends MapElementType {\n\n  /**\n   * @param {EdgeTypeId} id\n   * @param {Object} [data] @see http://visjs.org/docs/network/edges.html\n   */\n  constructor(id, data) {\n\n    // we do not simply use the provided id but disassemble and\n    // reassemble it again to ensure the id is well formatted.\n    const { marker, namespace, name } = EdgeType.getIdParts(id);\n    id = EdgeType.getId(marker, namespace, name);\n\n    // call the parent constructor\n    super(id, env.path.edgeTypes, EdgeType.fieldMeta, data);\n\n    this.id = id;\n    this.marker = marker;\n    this.name = name;\n    this.namespace = namespace;\n\n    const arrows = (this.style || {}).arrows;\n\n    if (arrows) {\n\n      this.invertedArrow = isArrowEnabled(arrows, 'from');\n      this.toArrow = isArrowEnabled(arrows, 'to') || isArrowEnabled(arrows, 'middle');\n      // determine if bi arrows (either from+to or no arrows)\n      this.biArrow = (this.invertedArrow === this.toArrow);\n\n      if (this.biArrow) {\n        this.toArrow = true;\n        this.invertedArrow = true;\n      }\n\n    } else {\n\n      this.toArrow = true;\n    }\n\n    Object.freeze(this);\n\n  }\n\n  /**\n   * Returns an object holding the parts that make up the edge type id.\n   *\n   * @param {EdgeTypeId} id\n   * @return {{marker: (*|string), namespace: (*|string), name: (*|string)}}\n   */\n  static getIdParts(id = '') {\n\n    id = utils.getWithoutPrefix(id, `${env.path.edgeTypes}/`);\n    const match = id.match(edgeTypeRegex) || [];\n\n    return {\n      marker: match[1] || '',\n      namespace: (match[3] && match[2]) || '',\n      name: (match[3] || match[2]) || ''\n    };\n\n  };\n\n  /**\n   * Creates an {@link EdgeTypeId} from a set of parts that make up the id.\n   * If it is not possible to create the id from the parts, the default\n   * edge type 'tmap:unknown' is returned.\n   *\n   * @param {string} marker\n   * @param {string} namespace\n   * @param {string} name\n   * @return {EdgeTypeId}\n   */\n  static getId(marker = '', namespace = '', name) {\n\n    return name\n      ? marker + (namespace && `${namespace}:`) + name\n      : 'tmap:unknown';\n\n  }\n\n  getLabel() {\n\n    return this.label || this.name;\n\n  }\n}\n\n/**\n  * @see https://github.com/babel/babel/issues/4854\n  * @param {string} id - Either the edge type id (name)\n  *     or a tiddler reference denoting the type or an\n  *     `EdgeType` object (that is directly bounced back). If the\n  *     id can be translated into a tiddler object that resides in\n  *     the edge type path, then its data is retrieved automatically.\n */\nEdgeType.getInstance = id => id instanceof EdgeType ? id : new EdgeType(id);\n\nEdgeType.fieldMeta = {\n  ...MapElementType.fieldMeta,\n  'label': {},\n  'show-label': {},\n};\n\n/**\n *\n * @param {Object} arrows\n * @param {('from'|'to'|'middle')} direction\n * @return {boolean}\n */\nconst isArrowEnabled = (arrows, direction) => {\n\n  const arrow = arrows[direction];\n\n  if (arrow == null && direction === 'to') {\n    // if the arrow is not further specified and its direction is to\n    // we regard it as enabled.\n    return true;\n  }\n\n  return typeof arrow === 'object' ? arrow.enabled !== false : arrow === true;\n\n};\n\n/**\n * An edge-type id consists of the following parts of which the\n * first two are optional: `[marker][namespace:]name`\n *\n * The colon is not considered to be part of the namespace.\n */\nconst edgeTypeRegex = new RegExp('^(_?)([^:_][^:]*):?([^:]*)');\n\n/*** Exports *******************************************************/\n\nexport default EdgeType;\n"],"sourceRoot":"../../../../../../src/plugins"}