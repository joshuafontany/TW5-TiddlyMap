{"version":3,"sources":["felixhayashi/tiddlymap/js/lib/utils/wiki.js"],"names":["Object","defineProperty","exports","value","touch","addTiddler","getTiddlersByPrefix","getTiddlerWithField","getTiddlersWithField","deleteByPrefix","cp","mv","addTWlisteners","getChildWidgetByProperty","getMergedTiddlers","isSystemOrDraft","isDraft","setText","getText","isLeftVersionGreater","getEntry","setEntry","clone","writeFieldData","parseFieldData","isPreviewed","notify","registerTransclude","getElementNode","getTiddlerNode","getTranscludeNode","isMatch","getMatches","moveFieldValues","deleteTiddlers","setField","setSidebarTab","tiddlerExists","getField","getTiddler","getTiddlerRef","undefined","_typeof","Symbol","iterator","obj","constructor","prototype","_exception","require","_basic","basicUtils","_interopRequireWildcard","__esModule","newObj","key","hasOwnProperty","call","default","_defineProperty","enumerable","configurable","writable","tiddler","$tw","Tiddler","fields","title","InvalidArgumentException","wiki","field","defValue","arguments","length","tObj","tRef","Boolean","isShadowTiddler","text","tiddlers","keys","storyList","getTiddlerList","i","index","indexOf","splice","deleteTiddler","oldName","newName","isRemoveOldField","isIncludeSystemTiddlers","allTiddlers","allTitles","isSystemTiddler","filter","widget","source","compileFilter","Array","isArray","callback","isBlock","type","attributes","children","className","tag","class","name","removeArrayElement","makeChildWidget","push","message","notifyTiddlerRef","notifier","display","domNode","isTiddlyWikiFakeDom","getVariable","cls","getAncestorWithClass","parentDomNode","data","parseJSON","indent","parseInt","JSON","stringify","src","dest","prop","getTiddlerData","v1","v2","utils","checkVersions","getModificationFields","getCreationFields","unshift","Function","bind","apply","val","child","listeners","context","id","addEventListener","oldPrefix","newPrefix","isForce","isDelete","targets","fromToMapper","makeHashMap","oldTRef","newTRef","replace","prefix","deletedTiddlers","startsWith","fieldName","options","isIncludeDrafts","result","hasOwnProp","hop","limit","removePrefix","getWithoutPrefix"],"mappings":"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","file":"../../../../../../felixhayashi/tiddlymap/js/lib/utils/wiki.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/lib/utils/wiki\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport {\n  EnvironmentError,\n  InvalidArgumentException,\n}                           from '$:/plugins/felixhayashi/tiddlymap/js/exception';\nimport * as basicUtils      from '$:/plugins/felixhayashi/tiddlymap/js/lib/utils/basic';\n\n/**\n * Gets a tiddler reference from a tRef or tObj\n *\n * @param {Tiddler|string} tiddler - A tiddler reference or object.\n * @return {TiddlerReference|null} A tiddler reference (title)\n */\nexport const getTiddlerRef = tiddler => {\n\n  if (tiddler instanceof $tw.Tiddler) {\n\n    return tiddler.fields.title;\n\n  } else if (typeof tiddler === 'string') {\n\n    return tiddler;\n\n  } else {\n\n    throw new InvalidArgumentException(tiddler);\n\n  }\n\n};\n\n/**\n * Similar to {@code wiki.getTiddler()} but also accepts a tObj as\n * argument, thus, making it unnecessary to always differentiate or remember\n * if we are dealing with an object or a reference.\n *\n * @see https://github.com/Jermolene/TiddlyWiki5/blob/master/boot/boot.js#L866\n * @param {Tiddler} tiddler - A tiddler reference or object.\n * @return {Tiddler} A tiddler object.\n */\nexport const getTiddler = tiddler =>\n  $tw.wiki.getTiddler(tiddler instanceof $tw.Tiddler ? tiddler.fields.title : tiddler);\n\n/**\n * Get a tiddler's field value. If the field does not exist or\n * its value is an empty string, return the default or an empty\n * string.\n */\nexport const getField = (tiddler, field, defValue = '') => {\n\n  const tObj = getTiddler(tiddler);\n  return (!tObj ? defValue : tObj.fields[field] || defValue);\n\n};\n\n/**\n * Checks if tiddlers (including shadow tiddlers) exist.\n *\n * @param {Tiddler} tiddler\n * @return {boolean} True if the tiddler exists, false otherwise\n */\nexport const tiddlerExists = tiddler => {\n\n  if (!tiddler) {\n    return false;\n  }\n\n  const tRef = getTiddlerRef(tiddler);\n\n  return Boolean(tRef && ($tw.wiki.tiddlerExists(tRef) || $tw.wiki.isShadowTiddler(tRef)));\n\n};\n\nexport const setSidebarTab = tRef => {\n\n  setText(getTiddlersByPrefix('$:/state/tab/sidebar-')[0], tRef);\n\n};\n\n/**\n * Set a tiddler field to a given value.\n *\n * Setting the title field to another value will clone the tiddler.\n * In this case, better use @link{clone} as this is\n * semantically stronger.\n *\n * This method is guarded against\n * https://github.com/Jermolene/TiddlyWiki5/issues/2025\n *\n * @return {$tw.Tiddler|undefined} The tiddler object containing\n *     the field with the assigned value.\n */\nexport const setField = (tiddler, field, value) => {\n\n  if (!tiddler || !field) {\n    return;\n  }\n\n  const tRef = getTiddlerRef(tiddler);\n  const fields = {\n    title: tRef,\n    [field]: value\n  };\n\n  // do not use any tObj provided, it may result in a lost update!\n  let tObj = $tw.wiki.getTiddler(tRef, true);\n\n  if (field !== 'text' && tObj && !tObj.fields.text) {\n    fields.text = '';\n  }\n\n  tObj = new $tw.Tiddler(tObj, fields);\n  $tw.wiki.addTiddler(tObj);\n\n  return tObj;\n\n};\n\n/**\n * Pendant to tw native {@code addTiddlers()}.\n *\n * Also removes tiddlers from the river.\n *\n * @param {TiddlerCollection} tiddlers - A collection of tiddlers\n * to be removed.\n */\nexport const deleteTiddlers = tiddlers => {\n\n  const keys = Object.keys(tiddlers);\n  const storyList = $tw.wiki.getTiddlerList('$:/StoryList');\n\n  for (let i = keys.length; i--;) {\n    let tRef = getTiddlerRef(tiddlers[keys[i]]);\n    if (!$tw.wiki.tiddlerExists(tiddlers[keys[i]])) {\n      // this check is important!\n      // see https://github.com/Jermolene/TiddlyWiki5/issues/1919\n      continue;\n    }\n\n    const index = storyList.indexOf(tRef);\n    if (index !== -1) { // tiddler is displayed in river\n      storyList.splice(index, 1);\n      setField('$:/StoryList', 'list', storyList);\n    }\n\n    // finally delete the tiddler;\n\n\n    $tw.wiki.deleteTiddler(tRef);\n\n  }\n\n};\n\nexport const moveFieldValues = (oldName, newName, isRemoveOldField, isIncludeSystemTiddlers, tiddlers) => {\n\n  if (oldName === newName) return;\n\n  const allTiddlers = tiddlers || $tw.wiki.allTitles();\n\n  for (let i = allTiddlers.length; i--;) {\n\n    const tObj = getTiddler(allTiddlers[i]);\n\n    if (tObj.isDraft() || !tObj.fields[oldName]) {\n      continue;\n    }\n\n    if (!isIncludeSystemTiddlers && $tw.wiki.isSystemTiddler(allTiddlers[i])) {\n      continue;\n    }\n\n    const fields = {\n      [newName]: tObj.fields[oldName]\n    };\n\n    if (isRemoveOldField) {\n      fields[oldName] = undefined;\n    }\n    $tw.wiki.addTiddler(new $tw.Tiddler(tObj, fields));\n\n  }\n\n};\n\n/**\n * This function returns all tiddlers that match the filter.\n *\n * @Todo: skip drafts! Or not?\n *\n * @param {TiddlyWikiFilter} filter - The filter to use.\n * @param {TiddlerCollection} [tiddlers] - A set of tiddlers used as\n *     source. If not defined, all tiddlers and system tiddlers are\n *     selected. Shadows are *not* included.\n * @return {Array.<TiddlerReference>}\n */\nexport const getMatches = (filter, tiddlers, widget) => {\n\n  // use wiki as default source\n  let source = undefined;\n\n  // shortcuts for performance\n  const wiki = $tw.wiki;\n\n  if (typeof filter === 'string') {\n    filter = wiki.compileFilter(filter);\n  }\n\n  // if a source is provided, create an iterator callback\n  if (tiddlers != null && typeof tiddlers === 'object') {\n\n    if (!Array.isArray(tiddlers)) {\n      tiddlers = Object.keys(tiddlers);\n    }\n\n    source = callback => {\n      for (let i = tiddlers.length; i--;) {\n        const tObj = wiki.getTiddler(tiddlers[i]);\n        callback(tObj, tiddlers[i]);\n      }\n    };\n\n  }\n\n  return filter.call(wiki, source, widget);\n\n};\n\n/**\n * Tries to match a single tiddler object against a filter.\n * Returns a boolean value.\n *\n * @param {Tiddler} tiddler - The object to apply the filter to.\n * @param {TiddlyWikiFilter} filter - The filter to use.\n * @return {boolean} True if the tiddler matches the filter, false otherwise.\n */\nexport const isMatch = (tiddler, filter) =>\n  getTiddlerRef(tiddler) === getMatches(filter, [ getTiddlerRef(tiddler) ])[0];\n\n\n/**\n *\n * @param {Tiddler} tiddler\n * @param {boolean} isBlock\n */\nexport const getTranscludeNode = (tiddler, isBlock) =>\n  ({\n    type: 'transclude',\n    attributes: {\n      tiddler: {\n        type: 'string',\n        value: getTiddlerRef(tiddler) }},\n    children: [],\n    isBlock: !!isBlock\n  });\n\n/**\n *\n * @param {Tiddler} tiddler\n */\nexport const getTiddlerNode = tiddler =>\n  ({\n    type: 'tiddler',\n    attributes: {\n      tiddler: {\n        type: 'string', value: getTiddlerRef(tiddler) }},\n    children: []\n  });\n\n/**\n *\n * @param type\n * @param className\n * @param text\n */\nexport const getElementNode = (type, className, text) =>\n  ({\n    type: 'element',\n    tag: type,\n    attributes: {\n      class: {\n        type: 'string',\n        value: className }},\n    children: text ? [ {type: 'text', text: text } ] : []\n  });\n\n/**\n *\n * @param {Widget} widget\n * @param {string} name\n * @param {Tiddler} tiddler\n * @return {*}\n */\nexport const registerTransclude = (widget, name, tiddler) => {\n\n  // if an instance exists, remove it\n  basicUtils.removeArrayElement(widget.children, widget[name]);\n\n  widget[name] = widget.makeChildWidget(getTranscludeNode(tiddler, true));\n  widget.children.push(widget[name]);\n\n  return widget[name];\n\n};\n\n/**\n * This function uses the tw-notification mechanism to display a\n * temporary message.\n *\n * @see https://github.com/Jermolene/TiddlyWiki5/blob/master/core/modules/utils/dom/notifier.js\n * @param {string} message - A short message to display.\n */\nexport const notify = message => {\n\n  // @todo add to environment\n  const notifyTiddlerRef = '$:/temp/tiddlymap/notify';\n\n  $tw.wiki.addTiddler(new $tw.Tiddler({\n    title : notifyTiddlerRef,\n    text : message\n  }));\n\n  $tw.notifier.display(notifyTiddlerRef);\n\n};\n\n/**\n * The function allows to detect whether a widget is displayed\n * in preview or not.\n */\nexport const isPreviewed = widget => {\n  if (!widget) {\n    return false;\n  }\n\n  // TODO: in the wiki utils we should not know about TiddlyMap domNode property!\n  if (widget.domNode.isTiddlyWikiFakeDom) {\n    return true;\n  }\n\n  if (widget.getVariable('tv-tiddler-preview')) {\n    return true;\n  } else { // fallback for < v5.1.9\n    const cls = 'tc-tiddler-preview-preview';\n    // TODO: in the wiki utils we should not know about TiddlyMap domNode property!\n    return !!basicUtils.getAncestorWithClass(widget.parentDomNode, cls);\n  }\n\n};\n\n/**\n * Parse json from field or return default value on error.\n *\n * @param {Tiddler} tiddler - The tiddler containing the json.\n * @param {string} field - The field with the json data.\n * @param {Object} [data] - An optional default value.\n * @return {*} Either the parsed data or the default data.\n */\nexport const parseFieldData = (tiddler, field = 'text', data) => {\n\n  const tObj = getTiddler(tiddler);\n\n  if (!tObj) {\n    return data;\n  }\n\n  return basicUtils.parseJSON(tObj.fields[field], data);\n\n};\n\n/**\n * Serialize json data and store it in a tiddler's field.\n *\n * @param {Tiddler} tiddler - The tiddler to store the json in.\n * @param {string} field - The field that will store the json.\n * @param {Object} data - The json data.\n * @param {int} [indent = 0] - the indentation\n */\nexport const writeFieldData = (tiddler, field, data, indent) => {\n\n  if (typeof data !== 'object') {\n    return;\n  }\n\n  indent = parseInt(indent);\n  indent = (indent > 0 && field === 'text' ? indent : 0);\n\n  setField(tiddler, field, JSON.stringify(data, null, indent));\n\n};\n\n/**\n * Clone a tiddler and give it another title.\n * This means the tiddlers are equal except from their titles.\n */\nexport const clone = (src, dest) => {\n\n  setField(src, 'title', dest);\n\n};\n\n/**\n * Set the value of a data tiddler entry (index) to a given value\n */\nexport const setEntry = (tiddler, prop, value) => {\n\n  $tw.wiki.setText(getTiddlerRef(tiddler), null, prop, value);\n\n};\n\n/**\n * Get the value of a data tiddler entry (index)\n */\nexport const getEntry = (tiddler, prop, defValue) => {\n\n  const data = $tw.wiki.getTiddlerData(getTiddlerRef(tiddler), {});\n  return (data[prop] == null ? defValue : data[prop]);\n\n};\n\n//~ utils.getNestedProperty = function(obj, propPath) {\n//~\n  //~ propPath = propPath.split(\".\");\n  //~ for (var i = propPath.length; i--;) {\n    //~ if (obj !== null && typeof obj === \"object\") {\n      //~ obj = obj[propPath[i]];\n  //~ }\n  //~\n//~ };\n\n/**\n * Compare versions.\n * @return {boolean} Unlike `$tw.utils.checkVersions`, this function\n * only returns true if the left argument is greater than the right\n * argument.\n */\nexport const isLeftVersionGreater = (v1, v2) => v1 !== v2 && $tw.utils.checkVersions(v1, v2);\n\n/**\n *\n * @param tiddler\n * @param defValue\n */\nexport const getText = (tiddler, defValue) => getField(tiddler, 'text', defValue);\n\n/**\n *\n * @param tiddler\n * @param value\n */\nexport const setText = (tiddler, value) => {\n\n  setField(tiddler, 'text', value);\n\n};\n\n/**\n * Checks whether a tiddler is a draft or not.\n *\n * @param {Tiddler} tiddler - The tiddler to check on.\n */\nexport const isDraft = tiddler => {\n\n  const tObj = getTiddler(tiddler);\n  return (tObj && tObj.isDraft());\n\n};\n\n\n/**\n * Get a tiddler's text or otherwise return a default text.\n */\nexport const isSystemOrDraft = tiddler =>\n  $tw.wiki.isSystemTiddler(getTiddlerRef(tiddler)) || isDraft(tiddler);\n\n/**\n * Function to merge an array of tiddlers into a single tiddler.\n *\n * @param {Array<TiddlerReference|Tiddler>} tiddlers - The\n *     tiddlers to merge.\n * @param {string} [title=null] - The title where the result is\n *     written to. If not specified, the first array item is used\n *     as output title.\n */\nexport const getMergedTiddlers = (tiddlers, title) => {\n\n  if (!Array.isArray(tiddlers)) {\n    return;\n  }\n\n  // turn all array elements into tiddler objects\n  for (let i = tiddlers.length; i--;) {\n    tiddlers[i] = getTiddler(tiddlers[i]);\n  }\n\n  if (!tiddlers.length) {\n    return;\n  }\n\n  tiddlers.push(\n    { title: (title || tiddlers[0].fields.title) },\n    $tw.wiki.getModificationFields(),\n    $tw.wiki.getCreationFields()\n  );\n\n  // add context for `apply()` function\n  tiddlers.unshift(null);\n\n  return new (Function.prototype.bind.apply($tw.Tiddler, tiddlers));\n\n};\n\n/**\n * Depth first search\n */\nexport const getChildWidgetByProperty = (widget, prop, val) => {\n\n  const children = widget.children;\n  for (let i = children.length; i--;) {\n    let child = children[i];\n    if (child[prop] === val) {\n      return child;\n    } else {\n      child = getChildWidgetByProperty(child, prop, val);\n      if (child) {\n        return child;\n      }\n    }\n  }\n\n};\n\n/**\n * Register listeners to widget using a hashmap.\n *\n * @param {Hashmap<Key, Function>} listeners - The listeners to attach.\n * @param {Widget} widget - the widget to attach the listeners to.\n * @param {Object} context - The context to bind the listeners to.\n */\nexport const addTWlisteners = (listeners, widget, context) => {\n\n  for (let id in listeners) {\n    widget.addEventListener(id, listeners[id].bind(context));\n  }\n\n};\n\n/**\n * Renames all tiddler titles that are prefixed with `oldPrefix`\n * into titles that are prefixed with `newPrefix` by replacing\n * `oldPrefix` with `newPrefix`.\n *\n * The force option somewhat ensures atomicity.\n *\n * @param {string} oldPrefix - Moves all tiddlers with this prefix.\n * @param {string} newPrefix - All tiddlers moved tiddlers will\n *     receive this new prefix.\n * @param {boolean} [isForce=false] - If a new title would override\n *     an existing title, and `force` is not set, then nothing will\n *     happen and undefined is returned by the function.\n * @param {boolean} [isDelete=true] - True, if the tiddlers with the\n *     old prefix should be deleted or false, if they should be kept.\n * @returns {Object<string, string>} - A hashmap that maps the old\n *     and the new path.\n */\nexport const mv = (oldPrefix, newPrefix, isForce, isDelete) => {\n\n  if (oldPrefix === newPrefix || !oldPrefix || !newPrefix) {\n    return;\n  }\n\n  isForce = (typeof isForce === 'boolean' ? isForce : false);\n  isDelete = (typeof isDelete === 'boolean' ? isDelete : true);\n\n  // prepare\n  const targets = getTiddlersByPrefix(oldPrefix);\n  const fromToMapper = basicUtils.makeHashMap();\n\n  for (let i = targets.length; i--;) {\n\n    const oldTRef = targets[i];\n    const newTRef = oldTRef.replace(oldPrefix, newPrefix);\n    if ($tw.wiki.tiddlerExists(newTRef) && !isForce) {\n      return; // undefined\n    }\n    fromToMapper[oldTRef] = newTRef;\n\n  }\n\n  for (let oldTRef in fromToMapper) {\n\n    setField(oldTRef, 'title', fromToMapper[oldTRef]);\n    if (isDelete) {\n      $tw.wiki.deleteTiddler(oldTRef);\n    }\n  }\n\n  return fromToMapper;\n\n};\n\n/**\n * Clones all tiddler titles that are prefixed with `oldPrefix`\n * into titles that are instead prefixed with `newPrefix`.\n *\n * The force option somewhat ensures atomicity.\n *\n * @param {string} oldPrefix - Moves all tiddlers with this prefix.\n * @param {string} newPrefix - All tiddlers moved tiddlers will\n *     receive this new prefix.\n * @param {boolean} [isForce=false] - If a new title would override\n *     an existing title, and `force` is not set, then nothing will\n *     happen and undefined is returned by the function.\n * @returns {Object<string, string>} - A hashmap that maps the old\n *     and the new path.\n */\nexport const cp = (oldPrefix, newPrefix, isForce) =>\n  mv(oldPrefix, newPrefix, isForce, false);\n\n/**\n * Delete all tiddlers with a given prefix.\n *\n * @param {string} prefix - The prefix\n */\nexport const deleteByPrefix = (prefix, tiddlers) => {\n\n  if (!prefix) {\n    return;\n  }\n\n  tiddlers = tiddlers || $tw.wiki.allTitles();\n\n  const deletedTiddlers = [];\n  for (let i = tiddlers.length; i--;) {\n    if (basicUtils.startsWith(tiddlers[i], prefix)) {\n      $tw.wiki.deleteTiddler(tiddlers[i]);\n      deletedTiddlers.push(deletedTiddlers[i]);\n    }\n  }\n\n  return deletedTiddlers;\n\n};\n\n\n/**\n * Returns all tiddlers that possess a property with a certain value.\n *\n * @param {string} fieldName - The property name to look for.\n * @param {string} [value] - If provided, the field's value must\n *     equal this value in order to match.\n * @param {Hashmap} [options] - Further options.\n * @param {TiddlerCollection} [options.tiddlers=$tw.wiki.allTitles()] - A collection\n *     of tiddlers to perform the search on.\n * @param {boolean} [options.isIncludeDrafts=false] - True if drafts of the found\n *     tiddlers are also included in the result set.\n * @param {number} [options.limit] - A positive number delimiting the maximum\n *     number of results.\n *     tiddlers are also included in the result set.\n * @return {Hashmap.<TiddlerReference, Tiddler>} Result\n */\nexport const getTiddlersWithField = (fieldName, value, options = {}) => {\n\n  const tiddlers = options.tiddlers || $tw.wiki.allTitles();\n  const isIncludeDrafts = (options.isIncludeDrafts === true);\n  const result = basicUtils.makeHashMap();\n  const keys = Object.keys(tiddlers);\n  const hasOwnProp = $tw.utils.hop;\n  let limit = options.limit || 0;\n\n  for (let i = keys.length; i--;) {\n\n    const tObj = getTiddler(tiddlers[keys[i]]);\n    const fields = tObj.fields;\n    if (hasOwnProp(fields, fieldName) && (!hasOwnProp(fields, 'draft.of') || isIncludeDrafts)) {\n      if (!value || fields[fieldName] === value ) {\n        result[fields.title] = tObj;\n        if (--limit === 0) {\n          break;\n        }\n      }\n    }\n\n  }\n\n  return result;\n\n};\n\n/**\n *\n * @param name\n * @param value\n */\nexport const getTiddlerWithField = (name, value) =>\n  Object.keys(getTiddlersWithField(name, value, { limit: 1 }))[0];\n\n/**\n * Iterates over all tiddlers in a given way and returns tiddlers\n * whose title matches the prefix string.\n *\n * @param {string} prefix - The prefix to match\n * @param {Hashmap} [options] - An options object.\n * @param {string} [options.iterator=\"each\"] - A tw store iterator\n *    function, e.g. \"eachShadow\" or \"ShadowPlusTiddlers\".\n * @param {boolean} [options.removePrefix= false] - Whether to remove\n *     the prefix or to leave it.\n * @return {Array<string>} The matches with or without the prefix.\n */\nexport const getTiddlersByPrefix = (prefix, options = {}) => {\n\n  const removePrefix = (options.removePrefix === true);\n  const result = [];\n  const iterator = $tw.wiki[options.iterator || 'each'];\n\n  iterator((tObj, tRef) => {\n    if (basicUtils.startsWith(tRef, prefix)) {\n      result.push(removePrefix ? basicUtils.getWithoutPrefix(tRef, prefix) : tRef);\n    }\n  });\n\n  return result;\n\n};\n\n/**\n * Advanced addTiddler method.\n *\n * It adds timestamps and only adds the tiddler if it doesn't exist\n * yet or the force option is used.\n *\n * This method is guarded against\n * https://github.com/Jermolene/TiddlyWiki5/issues/2025\n */\nexport const addTiddler = (tiddler, isForce) => {\n\n  let tObj = getTiddler(tiddler);\n\n  if (!isForce && tObj) {\n    return tObj;\n  }\n\n  tObj = new $tw.Tiddler(\n    {\n      title: tiddler,\n      text: ''\n    },\n    $tw.wiki.getModificationFields(),\n    $tw.wiki.getCreationFields()\n  );\n\n  $tw.wiki.addTiddler(tObj);\n\n  return tObj;\n\n};\n\nexport const touch = tiddler => {\n  if (!tiddler) {\n    return;\n  }\n\n  const tObj = new $tw.Tiddler(\n    getTiddler(tiddler),\n    $tw.wiki.getModificationFields()\n  );\n\n  $tw.wiki.addTiddler(tObj);\n};\n"],"sourceRoot":"../../../../../../../src/plugins"}