{"version":3,"sources":["felixhayashi/tiddlymap/js/lib/TypeDefs.js"],"names":[],"mappings":"AA+IA","file":"../../../../../felixhayashi/tiddlymap/js/lib/TypeDefs.js","sourcesContent":["/**\n * @typedef {string} TiddlerReference\n *\n * A reference (title) that identifies a tiddler.\n */\n\n/**\n * @typedef {$tw.Tiddler|TiddlerReference} Tiddler\n *\n * Either a reference (title) that identifies the tiddler or an object\n * representation.\n */\n\n/**\n * @typedef {string|number} Id\n *\n * An id used to identify a node or tiddler. Ids may only contain characters\n * that are valid when used as tiddlywiki field values.\n */\n\n/**\n * @typedef {Object} Edge\n *\n * @property {Id} id - The id of the edge.\n * @property {Id} from - An id that refers to a {@link Node} and denotes the\n *     from part of an edge.\n * @property {Id} to - An id that refers to a {@link Node} and denotes the\n *     to part of an edge.\n * @property {string} label - The label of the edge that will be displayed\n *     in the rendered graph.\n * @property {string} [view] - An optional viewname to which the edge is\n *     bound to.\n *\n * An edge connects nodes in a vis.Network.\n */\n\n/**\n * @typedef {Object} EdgeTypeSubscriberInfo\n *\n * @property {(\"_\"|undefined)} [marker] - The marker of the edge type.\n * @property {string} [namespace] - The namespace of the edge type.\n * @property {string} [name] - The name of the edge type.\n * @property {boolean} [include=true] - Whether or not this subscriber should be registered.\n */\n\n/**\n * @typedef {Object} Node\n *\n * This object is used by the vis.Network.\n *\n * @property {Id} id - The id of the node.\n * @property {string} label - The label of the node that will be displayed\n *     in the rendered graph.\n */\n\n/**\n * @typedef {Object} Hashmap\n *\n * Sometimes it makes semantically more sense to call an object a hashmap.\n * Then it becomes clear that we are talking about a simple key-value store.\n */\n\n/**\n * @typedef {Array.<*>|Hashmap.<Id, *>|vis.DataSet} Collection\n *\n * A collection contains a group of elements, usually nodes\n * (see {@link NodeCollection}) or edges (see {@link EdgeCollection}).\n *\n * A collection object corresponds to a {@link CollectionTypeString}.\n */\n\n/**\n * @typedef {Array.<Edge>|Hashmap.<Id, Edge>|vis.DataSet} EdgeCollection\n *\n * A collection of edges.\n */\n\n/**\n * @typedef {Array.<Node>|Hashmap.<Id, Node>|vis.DataSet} NodeCollection\n *\n * A collection of nodes.\n */\n\n/**\n * @typedef {Array.<Tiddler>|Hashmap.<Id, Tiddler>} TiddlerCollection\n *\n * A collection of tiddlers.\n */\n\n/**\n * @typedef {string|function} TiddlyWikiFilter\n *\n * A tiddlywiki filter expression or a compiled filter.\n */\n\n/**\n * @typedef {Tiddler|string|ViewAbstraction} View\n *\n * A view is identified either by a tiddler reference (title),\n * a Tiddler instance or a label. Moreover, a ViewAbstraction\n * may be used as view representation.\n */\n\n/**\n * @typedef {array|hashmap|dataset} CollectionTypeString\n *\n * Most of tiddlymap's select statements allow the user to choose one\n * of the specified output types, depending on what is most suitable.\n *\n * The output types relate to the different types of\n * {@link EdgeCollection} and {@link NodeCollection}.\n */\n\n/**\n * @typedef {Object} Position\n *\n * An object containing x, y properties.\n *\n * @property {number} x - The x coordinate.\n * @property {number} y - The y coordinate.\n */\n\n/**\n * @typedef {Object} Updates\n *\n * An object that carries information about wiki changes after a refresh cycle occurred.\n * This is a more advanced form of the changedTiddlers object.\n *\n * @property {Object<TiddlerReference, string>} changedTiddlers\n *    a TiddlyWiki changedTiddlers list that has all draft tiddler changes removed\n * @property {Object<string, boolean>} paths\n *    a list of root paths in which tiddler changes occured.\n */\n\n/**\n * @typedef {string} EdgeTypeId\n *\n * An edge-type id string consists of the following parts of which the\n * first two are optional: `[marker][namespace:]name`\n *\n * Note: The colon is not considered to be part of the namespace but is required\n * if a namespace exists.\n */\n"],"sourceRoot":"../../../../../../src/plugins"}