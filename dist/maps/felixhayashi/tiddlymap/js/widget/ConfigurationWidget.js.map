{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/ConfigurationWidget.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","_utils","require","_utils2","_interopRequireDefault","_vis","_vis2","_widget","__esModule","default","MapConfigWidget","parseTreeNode","options","Widget","call","this","initialise","computeAttributes","Object","create","render","parent","nextSibling","parentDomNode","domNode","document","createElement","$tw","utils","addClass","insertBefore","network","destroy","networkContainer","appendChild","refreshTrigger","getAttribute","pipeTRef","getVariable","inheritedFields","parseStringArray","extensionTField","mode","i","length","fieldName","style","parseFieldData","edges","nodes","inherited","merge","extension","isSaveOnlyChanges","isTrue","changes","data","extend","configure","enabled","showButton","filter","getOptionFilter","vis","Network","on","handleConfigChange","bind","height","getBoundingClientRect","reset","handleResetEvent","addEventListener","$tm","registry","push","enhanceConfigurator","ev","change","detail","trigger","path","flatChanges","flatten","flatChange","confPath","keys","isReset","undefined","unflatten","writeFieldData","config","sys","jsonIndentation","cls","div","getElementsByClassName","window","setTimeout","refresh","elements","children","list","classList","contains","conf","VisConfElement","level","setActive","el","pos","getByCls","labelEl","labelText","innerText","textContent","label","match","parseInt","className","prev","isEnable","button","innerHTML","self","currentTarget","dispatchEvent","CustomEvent","bubbles","cancelable","whitelist","borderWidth","borderWidthSelected","widthConstraint","heightConstraint","color","background","border","font","size","icon","labelHighlightBold","shadow","shape","shapeProperties","borderDashes","arrows","dashes","selfReferenceSize","smooth","width","interaction","hideEdgesOnDrag","hideNodesOnDrag","tooltipDelay","layout","hierarchical","manipulation","initiallyActive","physics","forceAtlas2Based","gravitationalConstant","springLength","springConstant","damping","centralGravity","option","concat","wlObj","l","isZombieWidget","body","destruct","changedTiddlers","refreshSelf","setNull","p","exports"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/widget/ConfigurationWidget.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapConfigWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport vis from '$:/plugins/felixhayashi/vis/vis.js';\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\n\n/**\n * Wrapper for the Visjs configurator.\n *\n * ```\n * <$tmap-config\n *     inherited=\"FIELDNAME FIELDNAME â€¦\"\n *     extension=\"FIELDNAME\"\n *     changes=\"FIELDNAME\" (default: same field as extension)\n *     override=\"true|false\" (default: false)\n *     mode=\"manage-*\"\n *     refresh-trigger=\"tRef\" />\n * ```\n *\n * @constructor\n */\nfunction MapConfigWidget(parseTreeNode, options) {\n\n  // call the parent constructor\n  Widget.call(this);\n\n  // call initialise on prototype\n  this.initialise(parseTreeNode, options);\n\n  // make the html attributes available to this widget\n  this.computeAttributes();\n\n}\n\n// !! EXTENSION !!\nMapConfigWidget.prototype = Object.create(Widget.prototype);\n// !! EXTENSION !!\n\n/**\n * Method to render this widget into the DOM.\n *\n * @override\n */\nMapConfigWidget.prototype.render = function(parent, nextSibling) {\n\n  // remember our place in the dom\n  this.parentDomNode = parent;\n\n  if (!this.domNode) {\n    this.domNode = this.document.createElement('div');\n    $tw.utils.addClass(this.domNode, 'tmap-config-widget');\n    parent.insertBefore(this.domNode, nextSibling);\n  }\n\n  if (this.network) {\n\n    // destroy any previous instance\n    this.network.destroy();\n\n  }\n\n  // create container for vis configurator; destroyed when vis is destroyed\n  this.networkContainer = document.createElement('div');\n  this.domNode.appendChild(this.networkContainer);\n\n  // get environment\n  this.refreshTrigger = this.getAttribute('refresh-trigger');\n  this.pipeTRef = this.getVariable('currentTiddler');\n  this.inheritedFields = $tw.utils.parseStringArray(this.getAttribute('inherited'));\n  this.extensionTField = this.getAttribute('extension');\n  this.mode = this.getAttribute('mode');\n\n  // load inherited options\n  for (var i = 0; i < this.inheritedFields.length; i++) {\n    var fieldName = this.inheritedFields[i];\n    var style = utils.parseFieldData(this.pipeTRef, fieldName, {});\n\n    // inherited options for nodes/edges come without a top level property\n    // so we need to wrap these options\n    if (this.mode === 'manage-edge-types') {\n      style = { edges: style };\n    } else if (this.mode === 'manage-node-types') {\n      style = { nodes: style };\n    }\n\n    this.inherited = utils.merge(this.inherited, style);\n\n  }\n\n  // load extension to the inherited options; since we store vis config\n  // for nodes and edges without the top level property, we may need to\n  // append it again, if not done so already.\n  this.extension = utils.parseFieldData(this.pipeTRef, this.extensionTField, {});\n  // TODO looks clumsy; do it in a more generic wayâ€¦\n  if (this.mode === 'manage-edge-types') {\n    if (!this.extension.edges) {\n      this.extension = { edges: this.extension };\n    }\n  } else if (this.mode === 'manage-node-types') {\n    if (!this.extension.nodes) {\n      this.extension = { nodes: this.extension };\n    }\n  }\n\n  // we record all changes in a separate variable\n  var isSaveOnlyChanges = utils.isTrue(this.getAttribute('save-only-changes'));\n  this.changes = (isSaveOnlyChanges ? {} : this.extension);\n\n  var data = { nodes: [], edges: [] };\n  var options = utils.merge({}, this.inherited, this.extension);\n  $tw.utils.extend(options, {\n    configure: {\n      enabled: true,\n      showButton: false,\n      filter: this.getOptionFilter(this.mode)\n    }\n  });\n\n  this.network = new vis.Network(this.networkContainer, data, options);\n  this.network.on('configChange', this.handleConfigChange.bind(this));\n\n  // giving the parent a css height will prevent it from jumping\n  // back when the network is destroyed and the network\n  // container is removed.\n  // fixes https://github.com/almende/vis/issues/1568\n  var height = this.parentDomNode.getBoundingClientRect().height;\n  this.parentDomNode.style['height'] = height + 'px';\n\n  var reset = this.handleResetEvent.bind(this);\n  this.networkContainer.addEventListener('reset', reset, false);\n\n  // register this graph at the caretaker's graph registry\n  $tm.registry.push(this);\n\n\n  this.enhanceConfigurator();\n\n};\n\n/**\n * I only receive the option that has actually changed\n */\nMapConfigWidget.prototype.handleResetEvent = function(ev) {\n  var change = {};\n  change[ev.detail.trigger.path] = null;\n  this.handleConfigChange(change);\n};\n\n/**\n * I only receive the option that has actually changed\n */\nMapConfigWidget.prototype.handleConfigChange = function(change) {\n\n  var flatChanges = utils.flatten(this.changes);\n  var flatChange = utils.flatten(change);\n  var confPath = Object.keys(utils.flatten(change))[0];\n  var isReset = (flatChange[confPath] === null);\n\n  if (isReset) { // we interpret this as delete\n\n    flatChanges[confPath] = undefined;\n    this.changes = utils.unflatten(flatChanges);\n\n  } else {\n\n    this.changes = utils.merge(this.changes, change);\n  }\n\n  // when storing edge- or node-styles we strip the root property\n  var options = utils.merge({}, this.changes);\n  if (this.mode === 'manage-node-types') { options = options['nodes']; }\n  if (this.mode === 'manage-edge-types') { options = options['edges']; }\n\n  // save changes\n  utils.writeFieldData(this.pipeTRef, this.extensionTField, options, $tm.config.sys.jsonIndentation);\n\n  // hack to ensure vis doesn't scroll\n  var cls = 'vis-configuration-wrapper';\n  var div = this.networkContainer.getElementsByClassName(cls)[0];\n  div.style.height = div.getBoundingClientRect().height + 'px';\n\n  if (isReset) {\n\n    // we need to use a timeout here, otherwise we cause a vis bug\n    // since it is in the middle of storing the value!\n    window.setTimeout(this.refresh.bind(this), 0);\n\n  } else {\n\n    // add active-config indicators\n    window.setTimeout(this.enhanceConfigurator.bind(this), 50);\n\n  }\n\n};\n\n/**\n * enhanceConfigurator over all config items and add an indicator.\n */\nMapConfigWidget.prototype.enhanceConfigurator = function() {\n\n  var cls = 'vis-configuration-wrapper';\n  var elements = this.networkContainer\n                     .getElementsByClassName(cls)[0].children;\n  var list = [];\n  var changes = utils.flatten(this.changes);\n  for (var i = 0; i < elements.length; i++) {\n    if (!elements[i].classList.contains('vis-config-item')) continue;\n\n    var conf = new VisConfElement(elements[i], list, i);\n    list.push(conf);\n\n    if (conf.level === 0) continue;\n\n    conf.setActive(!!changes[conf.path]);\n\n  }\n};\n\n/**\n *\n * @param {DOMElement} The config item element.\n * @param {Array<VisConfElement>} a list of VisConfElements of which\n *     this element is also part of.\n * @param {number} the position in the list\n */\nfunction VisConfElement(el, list, pos) {\n\n  var getByCls = 'getElementsByClassName';\n\n  this.el = el;\n  this.labelEl = el[getByCls]('vis-config-label')[0]\n                 || el[getByCls]('vis-config-header')[0]\n                 || el;\n  var labelText = (this.labelEl.innerText || this.labelEl.textContent);\n  this.label = labelText && labelText.match(/([a-zA-Z0-9]+)/)[1];\n  this.level = parseInt(el.className.match(/.*vis-config-s(.).*/)[1]) || 0;\n\n  this.path = this.label;\n\n  if (this.level > 0) {\n    for (var i = pos; i--;) {\n      var prev = list[i];\n      if (prev.level < this.level) {\n        this.path = prev.path + '.' + this.path;\n        break;\n      }\n    }\n  }\n}\n\nVisConfElement.prototype.setActive = function(isEnable) {\n\n  if (!isEnable) return;\n\n  // cannot use utils.hasKeyWithPrefix because some keys start with\n  // same value as others\n  var cls = 'tmap-vis-config-item-' + (isEnable ? 'active' : 'inactive');\n  $tw.utils.addClass(this.el, cls);\n\n  if (isEnable) {\n\n    var button = document.createElement('button');\n    button.innerHTML = 'reset';\n    button.className = 'tmap-config-item-reset';\n\n    var self = this;\n\n    button.addEventListener('click', function(ev) {\n      ev.currentTarget.dispatchEvent(new CustomEvent('reset', {\n        detail: { trigger: self },\n        bubbles: true,\n        cancelable: true\n      }));\n    }, false);\n\n    this.el.appendChild(button);\n  }\n\n};\n\n/**\n *\n *\n */\nMapConfigWidget.prototype.getOptionFilter = function(mode) {\n\n  var whitelist = {\n    nodes: {\n      borderWidth: true,\n      borderWidthSelected: true,\n      widthConstraint: true,\n      heightConstraint: true,\n      color: {\n        background: true,\n        border: true\n      },\n      font: {\n        color: true,\n        size: true,\n      },\n      icon: true,\n      labelHighlightBold: false,\n      shadow: true,\n      shape: true,\n      shapeProperties: {\n        borderDashes: true,\n\n      },\n      size: true\n    },\n    edges: {\n      arrows: true,\n      color: true,\n      dashes: true,\n      font: true,\n      labelHighlightBold: false,\n      length: true,\n      selfReferenceSize: false,\n      shadow: true,\n      smooth: true,\n      width: true\n    },\n    interaction: {\n      hideEdgesOnDrag: true,\n      hideNodesOnDrag: true,\n      tooltipDelay: true\n    },\n    layout: {\n      hierarchical: true\n    },\n    manipulation: {\n      initiallyActive: true\n    },\n    physics: {\n      forceAtlas2Based: {\n        gravitationalConstant: true,\n        springLength: true,\n        springConstant: true,\n        damping: true,\n        centralGravity: true\n      }\n    }\n  };\n\n  if (mode === 'manage-edge-types') {\n    whitelist = { edges: whitelist.edges };\n  } else if (mode === 'manage-node-types') {\n    whitelist = { nodes: whitelist.nodes };\n  } else {\n    whitelist.edges.arrows = false;\n  }\n\n  return function(option, path) {\n\n    // operate on a clone; add option as element\n    path = path.concat([ option ]);\n\n    var wlObj = whitelist;\n    for (var i = 0, l = path.length; i < l; i++) {\n      if (wlObj[path[i]] === true) {\n        return true;\n      } else if (wlObj[path[i]] == null) {\n        return false;\n      } // else assume object\n      wlObj = wlObj[path[i]];\n    }\n\n    return false;\n\n  };\n\n};\n\n/**\n * A zombie widget is a widget that is removed from the dom tree\n * but still referenced or still partly executed -- I mean\n * otherwise you couldn't call this function, right?\n *\n * @TODO Outsource this as interface or common super class\n */\nMapConfigWidget.prototype.isZombieWidget = function() {\n\n  return !document.body.contains(this.parentDomNode);\n\n};\n\n/**\n * called from outside.\n *\n * @TODO Outsource this as interface or common super class\n */\nMapConfigWidget.prototype.destruct = function() {\n\n  if (this.network) {\n    this.network.destroy();\n  }\n\n};\n\n/**\n * This function is called by the system to notify the widget about\n * tiddler changes.\n *\n * @override\n */\nMapConfigWidget.prototype.refresh = function(changedTiddlers) {\n\n  if (this.isZombieWidget() || !this.network) return;\n\n  if (!changedTiddlers || changedTiddlers[this.refreshTrigger]) {\n    this.refreshSelf();\n    return true;\n  }\n\n};\n\nMapConfigWidget.prototype.setNull = function(obj) {\n\n  for (var p in obj) {\n\n    if (typeof obj[p] == 'object') {\n\n      this.setNull(obj[p]);\n    } else {\n\n      obj[p] = undefined;\n    }\n  }\n\n};\n\n\n/*** Exports *******************************************************/\n\nexports['tmap-config'] = MapConfigWidget;\n"],"sourceRoot":"../../../../../../src/plugins"}