{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/MapWidget.js"],"names":["Object","defineProperty","exports","value","tiddlymap","tmap","undefined","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_CallbackManager","require","_CallbackManager2","_interopRequireDefault","_ViewAbstraction","_ViewAbstraction2","_EdgeType","_EdgeType2","_Popup","_Popup2","_vis","_vis2","_widget","_utils","_utils2","_SelectionRectangle","_SelectionRectangle2","_environment","env","_interopRequireWildcard","obj","__esModule","newObj","default","_defineProperty","_toConsumableArray","arr","Array","isArray","arr2","from","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","MapWidget","_Widget","parseTreeNode","options","this","_this","getPrototypeOf","getAttr","getAttribute","isDebug","utils","isTrue","$tm","config","sys","debug","bindTo","callbackManager","CallbackManager","computeAttributes","editorMode","clickToUse","id","getStateQualifier","widgetPopupsPath","path","tempPopups","addTWlisteners","tmap:tm-create-view","handleCreateView","tmap:tm-rename-view","handleRenameView","tmap:tm-delete-view","handleDeleteView","tmap:tm-delete-element","handleDeleteElement","tmap:tm-edit-view","handleEditView","tmap:tm-generate-widget","handleGenerateWidget","tmap:tm-toggle-central-topic","handleSetCentralTopic","tmap:tm-save-canvas","handleSaveCanvas","tmap:tm-focus-node","handleFocusNode","tmap:tm-reset-focus","repaintGraph","visListeners","click","handleVisSingleClickEvent","doubleClick","handleVisDoubleClickEvent","stabilized","handleVisStabilizedEvent","selectNode","handleVisSelectNode","deselectNode","handleVisDeselectNode","dragStart","handleVisDragStart","dragEnd","handleVisDragEnd","hoverNode","handleVisHoverElement","hoverEdge","blurNode","handleVisBlurElement","blurEdge","beforeDrawing","handleVisBeforeDrawing","afterDrawing","handleVisAfterDrawing","stabilizationProgress","handleVisLoading","stabilizationIterationsDone","handleVisLoadingDone","windowDomListeners","resize","handleResizeEvent","handleClickEvent","mousemove","handleCanvasMouseMove","canvasDomListeners","keyup","handleCanvasKeyup","keydown","handleCanvasKeydown","mousewheel","handleCanvasScroll","DOMMouseScroll","contextmenu","handleContextMenu","MozMousePixelScroll","handleExtraCanvasScroll","widgetDomListeners","handleWidgetKeyup","handleWidgetKeydown","conVector","to","handleConnectionEvent","edge","callback","_this2","eTyFilter","view","getEdgeTypeFilter","param","fromLabel","adapter","selectNodeById","label","toLabel","getLabel","raw","dialogManager","open","isConfirmed","outTObj","str","getText","type","EdgeType","getInstance","namespace","_EdgeType$getIdParts","getIdParts","marker","name","getConfig","getId","exists","save","insertEdge","isPreventZoomOnNextUpdate","isEdgeTypeVisible","pretty","checkForFreshInstall","getEntry","ref","sysMeta","setEntry","args","dialog","preselects","config.storyview","config.navigation","config.sidebar","config.demo","getPropertiesByPrefix","fields","tiddlerExists","setText","misc","defaultViewLabel","n1","insertNode","x","y","n2","keys","touch","openStandardConfirmDialog","message","logger","slice","unshift","apply","render","parent","nextSibling","parentDomNode","domNode","document","createElement","insertBefore","registerClassNames","viewHolderRef","getViewHolderRef","getView","graphBarDomNode","$tw","addClass","appendChild","graphDomNode","isPreviewed","renderPreview","renderFullWidget","header","body","snapshotTRef","getRoot","snapshotTObj","getTiddler","innerHTML","className","placeholder","makeChildWidget","getTranscludeNode","renderChildren","widget","setDomListeners","window","addLoadingBar","tooltip","Popup","showDelay","popups","delay","contextMenu","hideOnClick","leavingDelay","sidebar","getFirstElementByClassName","isInSidebar","isTiddlyWikiFakeDom","contains","rebuildEditorBar","initAndRenderGraph","registry","push","reloadRefreshTriggers","mainEditorId","url","query","toggleEnlargedMode","graphLoadingBarDomNode","removeChildDomNodes","unicodeBtnClass","activeUnicodeBtnClass","variables","widgetQualifier","widgetTempPath","isViewBound","String","viewRoot","viewLabel","viewHolder","edgeTypeFilter","edgeTypeFilterTRef","allEdgesFilter","selector","allEdgeTypes","neighScopeBtnClass","isEnabled","rasterMenuBtnClass","setVariable","getTiddlerNode","children","graphBar","el","getElementNode","focusButton","makeChildWidgets","firstChild","refresh","changedTiddlers","update","updates","network","isZombieWidget","isViewSwitched","hasChangedAttributes","reloadBackgroundImage","isViewUpdated","rebuildGraph","resetFocus","duration","nodeTypes","hasChangedElements","refreshChildren","hidePopups","isForce","hide","remove","refreshTriggers","parseStringArray","add","handleTriggeredRefresh","_ref","hasNetworkStabilized","changes","rebuildGraphData","changedNodes","withoutPosition","physics","visOptions","solver","centralGravity","setOptions","hasElements","graphData","nodesById","stabilize","getContainer","start","graph","getGraph","refreshDataSet","nodes","changedEdges","edges","edgesById","setField","getTiddlersByIds","stop","startsWith","localHolders","ViewAbstraction","maybeMatches","inGraph","isShowNeighbourhood","tRef","isSystemOrDraft","modified","nodeFilter","getNodeFilter","matches","getMatches","_this3","_destructVis","getVisOptions","vis","DataSet","makeHashMap","setEnabled","enabled","Network","canvas","getElementsByTagName","networkDomNode","tabIndex","event","on","bind","addGraphButtons","fullscreen-button","fullscreenButton","halfscreen-button","halfscreenButton","focus","ev","_this4","nodeIds","getSelectedNodes","ctrlKey","preventDefault","keyCode","handleAddNodesToClipboard","notify","handlePasteNodesFromClipboard","allNodes","selectNodes","role","ucFirst","openTiddlerWithId","altKey","metaKey","scopeStr","fromCharCode","setConfig","handleRemoveElements","getSelection","paramObject","elements","buttons","selectRect","selectedNodes","redraw","stopPropagation","mouse","DOMtoCanvas","offsetX","offsetY","SelectionRectangle","span","nodePositions","getPositions","isPointWithin","inArray","assignActiveStyle","isZoomAllowed","enlargedMode","classList","interaction","isVisSettingInSync","zoomView","_this5","nodeId","getNodeAt","show","div","mode","registerTransclude","contextMenuWidget","focusButtonStateTRef","deleteByPrefix","clipBoard","ids","addNode","get","returnType","removeNode","_this6","globalOptions","localOptions","parseJSON","merge","manipulation","deleteNode","data","resetVisManipulationBar","deleteEdge","addEdge","handleInsertNode","editNode","handleEditNode","editEdge","stabilization","iterations","visCallback","disableEditMode","enableEditMode","isVisInEditMode","getElementsByClassName","_this7","getField","isClone","isLiveView","newView","isCreate","protoView","setView","_this8","isLocked","references","getOccurrences","count","toString","refFilter","joinAndWrap","rename","_this9","visInherited","JSON","stringify","viewConfig","filter.prettyNodeFltr","filter.prettyEdgeFltr","vis-inherited","createdOn","getCreationDate","numberOfNodes","numberOfEdges","extend","prvBg","saveNodePositions","curBg","nf","eTf","setNodeFilter","setEdgeTypeFilter","_this10","tempImagePath","createAndSaveSnapshot","defaultName","getSnapshotTitle","snapshot","width","height","action","handleDownloadSnapshot","cp","dispatchEvent","navigateTo","addPlaceholder","wiki","deleteTiddler","title","a","download","href","getSnapshot","MouseEvent","addTiddler","Tiddler","text","getCreationFields","getModificationFields","stripPreamble","toDataURL","getWithoutPrefix","_this11","viewname","destroy","msg","trigger","curTiddler","liveTab","fallbackView","_ref2","handleRemoveNodes","handleRemoveEdges","edgeIds","deleteEdges","_this12","tiddlers","params","stringifyList","delete-from","deletionCount","success","deleteNodes","findAndRemoveClassNames","scrollTop","pContainer","rootWidget","_ref3","setCentralTopic","properties","idsOfNodesWithoutPosition","setNodesMoveable","fitGraph","_ref4","scale","animation","_this13","clearTimeout","activeFitTimeout","fit","easingFunction","setTimeout","node","_this14","isMatch","makeNode","tObj","draft.title","_this15","tracker","getTiddlerById","globalDefaults","localDefaults","nodeStylesByTRef","getInheritedNodeStyles","groupStyles","globalNodeStyle","color","nodeData","getNodeData","tiddler","tidColor","tidIcon","field","nodeIcon","tidLabelField","nodeLabel","tidIconField","inherited-global-default-style","inherited-local-default-style","inherited-group-styles","global.tmap.style","local-node-style","addToPreselects","scope","store","global","p","local","saveNodeStyle","isActivated","singleClickMode","handleOpenMapElementEvent","pointer","_ref5","typeId","handleEditEdgeType","behaviour","edgeClickBehaviour","rect","getBoundingClientRect","distRight","clientWidth","left","distBottom","parseInt","calculatedHeight","innerHeight","top","style","evt","selected","button","_ref6","isDraggingAllowed","_ref7","defaultColor","colorObj","highlight","hover","_ref8","pos","getNearestRasterPosition","draggedNode","context2d","backgroundImage","drawImage","drawRaster","getScale","getViewPosition","getRect","beginPath","globalAlpha","fillStyle","fillRect","strokeStyle","strokeRect","rPos","moveTo","lineTo","stroke","arc","Math","PI","fill","constructTooltip","signature","outType","inType","descr","nodeInfo","renderText","tooltipWidget","indeces","allETy","description","isShown","populator","_ref9","total","display","setAttribute","_ref10","destruct","_this16","draftTRef","findDraft","wasInDraftAlready","tiddlerTitle","originalTRef","deleteTiddlers","bounds","navigateFromTitle","getVariable","navigateFromNode","navigateFromClientRect","right","bottom","viewName","holderRef","viewRef","views","genUUID","defaultViewHolder","noCache","_this17","bgFieldValue","imgTObj","img","Image","ajaxCallback","b64","src","onload","urlField","getImgFromWeb","makeDataUri","isInFS","hasClass","setGraphButtonEnabled","enable","b","toggleClass","isMoveable","isFixed","fixed","buttonEvents","addEventListener","Widget"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/widget/MapWidget.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport CallbackManager      from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction      from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType             from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport Popup                from '$:/plugins/felixhayashi/tiddlymap/js/Popup';\nimport vis                  from '$:/plugins/felixhayashi/vis/vis.js';\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils                from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport SelectionRectangle   from '$:/plugins/felixhayashi/tiddlymap/js/lib/SelectionRectangle';\nimport * as env             from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\n\n/*** Code **********************************************************/\n\n/**\n * The map widget is responsible for drawing the actual network\n * diagrams.\n *\n * @constructor\n */\nclass MapWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n    super(parseTreeNode, options);\n\n    // create shortcuts for services and frequently used vars\n    this.getAttr = this.getAttribute;\n    this.isDebug = utils.isTrue($tm.config.sys.debug, false);\n\n    // force early binding of functions to this context\n    utils.bindTo(this, [\n      'constructTooltip',\n      'handleResizeEvent',\n      'handleClickEvent',\n      'handleCanvasKeyup',\n      'handleCanvasKeydown',\n      'handleCanvasScroll',\n      'handleCanvasMouseMove',\n      'handleWidgetKeyup',\n      'handleWidgetKeydown',\n      'handleTriggeredRefresh',\n      'handleContextMenu'\n    ]);\n\n    // instanciate managers\n    this.callbackManager = new CallbackManager();\n\n    // make the html attributes available to this widget\n    this.computeAttributes();\n    this.editorMode = this.getAttr('editor');\n    this.clickToUse = utils.isTrue(this.getAttr('click-to-use'), false);\n\n    // who am I? the id is used for debugging and special cases\n    this.id = this.getAttr('object-id') || this.getStateQualifier();\n\n    this.widgetPopupsPath = $tm.path.tempPopups + '/' + this.id;\n\n    // register listeners that are available in editor mode\n    if (this.editorMode) {\n      utils.addTWlisteners({\n        'tmap:tm-create-view': this.handleCreateView,\n        'tmap:tm-rename-view': this.handleRenameView,\n        'tmap:tm-delete-view': this.handleDeleteView,\n        'tmap:tm-delete-element': this.handleDeleteElement,\n        'tmap:tm-edit-view': this.handleEditView,\n        'tmap:tm-generate-widget': this.handleGenerateWidget,\n        'tmap:tm-toggle-central-topic': this.handleSetCentralTopic,\n        'tmap:tm-save-canvas': this.handleSaveCanvas\n      }, this, this);\n    }\n\n    // register listeners that are available in any case\n    utils.addTWlisteners({\n      'tmap:tm-focus-node': this.handleFocusNode,\n      'tmap:tm-reset-focus': this.repaintGraph\n    }, this, this);\n\n    // Visjs handlers\n    this.visListeners = {\n      'click': this.handleVisSingleClickEvent,\n      'doubleClick': this.handleVisDoubleClickEvent,\n      'stabilized': this.handleVisStabilizedEvent,\n      'selectNode': this.handleVisSelectNode,\n      'deselectNode': this.handleVisDeselectNode,\n      'dragStart': this.handleVisDragStart,\n      'dragEnd': this.handleVisDragEnd,\n      'hoverNode': this.handleVisHoverElement,\n      'hoverEdge': this.handleVisHoverElement,\n      'blurNode': this.handleVisBlurElement,\n      'blurEdge': this.handleVisBlurElement,\n      'beforeDrawing': this.handleVisBeforeDrawing,\n      'afterDrawing': this.handleVisAfterDrawing,\n      'stabilizationProgress': this.handleVisLoading,\n      'stabilizationIterationsDone': this.handleVisLoadingDone\n    };\n\n    this.windowDomListeners = {\n      'resize': [ this.handleResizeEvent, false ],\n      'click': [ this.handleClickEvent, false ],\n      'mousemove': [ this.handleCanvasMouseMove, true ],\n    };\n\n    this.canvasDomListeners = {\n      'keyup': [ this.handleCanvasKeyup, true ],\n      'keydown': [ this.handleCanvasKeydown, true ],\n      'mousewheel': [ this.handleCanvasScroll, true ],\n      'DOMMouseScroll': [ this.handleCanvasScroll, true ],\n      'contextmenu': [ this.handleContextMenu, true ],\n      // Solves: https://github.com/felixhayashi/TW5-TiddlyMap/issues/306\n      'MozMousePixelScroll': [ this.handleExtraCanvasScroll, true ],\n    };\n\n    this.widgetDomListeners = {\n      'keyup': [ this.handleWidgetKeyup, true ],\n      'keydown': [ this.handleWidgetKeydown, true ],\n    };\n\n    this.conVector = { from: null, to: null };\n  }\n\n  /**\n   * This handler will open a dialog that allows the user to create a\n   * new relation between two edges. This includes, that the user\n   * gets a chance to specify the edgetype of the connection.\n   *\n   * If an edge-type namespace has been declared for the entire view,\n   * then add it to the `id` of the specified type…\n   *   - …if the type doesn't exist yet.\n   *   - …if the type doesn't contain a namespace already, regardless\n   *     whether it exists or not.\n   *\n   * Once the user confirmed the dialog, the edge is persisted.\n   *\n   * Note: this should not trigger a zoom.\n   *\n   * @param {Edge} edge - A javascript object that contains at least\n   *    the properties 'from' and 'to'\n   * @param {function} [callback] - A function with the signature\n   *    function(isConfirmed);\n   */\n  handleConnectionEvent(edge, callback) {\n\n    const eTyFilter = this.view.getEdgeTypeFilter();\n\n    const param = {\n      fromLabel: $tm.adapter.selectNodeById(edge.from).label,\n      toLabel: $tm.adapter.selectNodeById(edge.to).label,\n      view: this.view.getLabel(),\n      eTyFilter: eTyFilter.raw\n    };\n\n    $tm.dialogManager.open('getEdgeType', param, (isConfirmed, outTObj) => {\n\n      if (isConfirmed) {\n\n        const str = utils.getText(outTObj);\n        let type = EdgeType.getInstance(str);\n\n        if (!type.namespace) {\n\n          const { marker, name } = EdgeType.getIdParts(type.id);\n          const namespace = this.view.getConfig('edge_type_namespace');\n          type = EdgeType.getInstance(EdgeType.getId(marker, namespace, name));\n\n        }\n\n        // persist the type if it doesn't exist\n        if (!type.exists()) {\n          type.save();\n        }\n\n        // add type to edge\n        edge.type = type.id;\n        $tm.adapter.insertEdge(edge);\n\n        // prevent zoom\n        this.isPreventZoomOnNextUpdate = true;\n\n        if (!this.view.isEdgeTypeVisible(type)) {\n\n          $tm.dialogManager.open('edgeNotVisible', {\n            type: type.id,\n            view: this.view.getLabel(),\n            eTyFilter: eTyFilter.pretty\n          });\n\n        }\n\n      }\n\n      if (typeof callback === 'function') {\n        callback(isConfirmed);\n      }\n\n    });\n\n  }\n\n  /**\n   * The first time a map is opened, we want to display a welcome message.\n   * Once shown, a flag is set and the message is not displayed again.\n   */\n  checkForFreshInstall() {\n\n    if (!utils.getEntry($tm.ref.sysMeta, 'showWelcomeMessage', true)) {\n      return;\n    }\n\n    utils.setEntry($tm.ref.sysMeta, 'showWelcomeMessage', false);\n\n    const args = {\n      dialog: {\n        preselects: {\n          \"config.storyview\": \"true\",\n          \"config.navigation\": \"true\",\n          \"config.sidebar\": \"true\",\n          \"config.demo\": \"true\",\n        }\n      }\n    };\n\n    $tm.dialogManager.open('welcome', args, (isConfirmed, outTObj) => {\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      if (config['storyview'] && utils.tiddlerExists('$:/plugins/felixhayashi/topstoryview')) {\n        utils.setText('$:/view', 'top');\n      }\n\n      if (config['navigation']) {\n        utils.setText('$:/config/Navigation/openLinkFromInsideRiver', 'above');\n        utils.setText('$:/config/Navigation/openLinkFromOutsideRiver', 'top');\n      }\n\n      if (config['sidebar']) {\n        utils.setText('$:/themes/tiddlywiki/vanilla/options/sidebarlayout', 'fixed-fluid');\n      }\n\n      if (config['demo']) {\n        const view = $tm.misc.defaultViewLabel;\n\n        const n1 = $tm.adapter.insertNode({ label: 'Have fun with', x: 0, y: 0 }, view);\n        const n2 = $tm.adapter.insertNode({ label: 'TiddlyMap!!', x: 100, y: 100 }, view);\n\n        $tm.adapter.insertEdge({ from: n1.id, to: n2.id });\n      }\n\n      if (Object.keys(config).length) {\n        // trigger a save and reload message\n        utils.touch('$:/plugins/felixhayashi/tiddlymap');\n      }\n\n    });\n\n  }\n\n  /**\n   * A very basic dialog that will tell the user he/she has to make\n   * a choice.\n   *\n   * @param {function} [callback] - A function with the signature\n   *     function(isConfirmed).\n   * @param {string} [message] - An small optional message to display.\n   */\n  openStandardConfirmDialog(callback, message) {\n\n    const param = { message : message };\n    $tm.dialogManager.open('getConfirmation', param, callback);\n\n  }\n\n  /**\n   * An extention of the default logger mechanism. It works like\n   * `this.logger` but will include the object id of the widget\n   * instance.\n   *\n   * @param {string} type - The type of the message (debug, info, warning…)\n   *     which is exactly the same as in `console[type]`.\n   * @param {...*} message - An infinite number of arguments to be printed\n   *     (just like console).\n   */\n  logger(type, message /*, more stuff*/) {\n\n    if (this.isDebug) {\n\n      const args = Array.prototype.slice.call(arguments, 1);\n      args.unshift('@' + this.id);\n      args.unshift(type);\n      $tm.logger.apply(this, args);\n\n    }\n\n  }\n\n  /**\n   * Method to render this widget into the DOM.\n   *\n   * Note that we do not add this.domNode to the list of domNodes\n   * since this widget does never remove itself during a refresh.\n   *\n   * @override\n   */\n  render(parent, nextSibling) {\n\n    this.parentDomNode = parent;\n\n    this.domNode = this.document.createElement('div');\n    parent.insertBefore(this.domNode, nextSibling);\n\n    // add widget classes\n    this.registerClassNames(this.domNode);\n\n    // get view and view holder\n    this.viewHolderRef = this.getViewHolderRef();\n    this.view = this.getView();\n\n    // create the header div\n    this.graphBarDomNode = this.document.createElement('div');\n    $tw.utils.addClass(this.graphBarDomNode, 'tmap-topbar');\n    this.domNode.appendChild(this.graphBarDomNode);\n\n    // create body div\n    this.graphDomNode = this.document.createElement('div');\n    this.domNode.appendChild(this.graphDomNode);\n\n    $tw.utils.addClass(this.graphDomNode, 'tmap-vis-graph');\n\n    if (utils.isPreviewed(this)) {\n\n      $tw.utils.addClass(this.domNode, 'tmap-static-mode');\n      this.renderPreview(this.graphBarDomNode, this.graphDomNode);\n\n    } else {\n\n      // render the full widget\n      this.renderFullWidget(this.domNode, this.graphBarDomNode, this.graphDomNode);\n\n    }\n\n  }\n\n  /**\n   * When the widget is only previewed we do some alternative rendering.\n   */\n  renderPreview(header, body) {\n\n    const snapshotTRef = this.view.getRoot() + '/snapshot';\n    const snapshotTObj = utils.getTiddler(snapshotTRef);\n\n    const label = this.document.createElement('span');\n    label.innerHTML = this.view.getLabel();\n    label.className = 'tmap-view-label';\n    header.appendChild(label);\n\n    if (snapshotTObj) {\n\n      // Construct child widget tree\n      const placeholder = this.makeChildWidget(utils.getTranscludeNode(snapshotTRef), true);\n      placeholder.renderChildren(body, null);\n\n    } else {\n\n      $tw.utils.addClass(body, 'tmap-graph-placeholder');\n\n    }\n\n  }\n\n  /**\n   * The standard way of rendering.\n   * Attention: BE CAREFUL WITH THE ORDER OF FUNCTION CALLS IN THIS FUNCTION.\n   */\n  renderFullWidget(widget, header, body) {\n\n    // add window and widget dom node listeners\n    utils.setDomListeners('add', window, this.windowDomListeners);\n    utils.setDomListeners('add', widget, this.widgetDomListeners);\n\n    // add a loading bar\n    this.addLoadingBar(this.domNode);\n\n    // prepare the tooltip for graph elements\n    this.tooltip = new Popup(this.domNode, {\n      className: 'tmap-tooltip',\n      showDelay: $tm.config.sys.popups.delay\n    });\n\n    // prepare the context menu\n    this.contextMenu = new Popup(this.domNode, {\n      className: 'tmap-context-menu',\n      showDelay: 0,\n      hideOnClick: true,\n      leavingDelay: 999999\n    });\n\n    // register\n    this.sidebar = utils.getFirstElementByClassName('tc-sidebar-scrollable');\n    this.isInSidebar = (this.sidebar\n                                 && !this.domNode.isTiddlyWikiFakeDom\n                                 && this.sidebar.contains(this.domNode));\n\n    // *first* inject the bar\n    this.rebuildEditorBar(header);\n\n    // *second* initialise graph variables and render the graph\n    this.initAndRenderGraph(body);\n\n    // register this graph at the caretaker's graph registry\n    $tm.registry.push(this);\n\n    // if any refresh-triggers exist, register them\n    this.reloadRefreshTriggers();\n\n    // maybe display a welcome message\n    this.checkForFreshInstall();\n\n    if (this.id === $tm.misc.mainEditorId) {\n\n      const url = $tm.url;\n      if (url && url.query['tmap-enlarged']) {\n\n        this.toggleEnlargedMode(url.query['tmap-enlarged']);\n        //~ this.setView(url.query['tmap-view']);\n\n      }\n\n    }\n\n  }\n\n  /**\n   * Add some classes to give the user a chance to apply some css\n   * to different graph modes.\n   */\n  registerClassNames(parent) {\n\n    const addClass = $tw.utils.addClass;\n\n    // add main class\n    addClass(parent, 'tmap-widget');\n\n    if (this.clickToUse) {\n      addClass(parent, 'tmap-click-to-use');\n    }\n\n    if (this.getAttr('editor') === 'advanced') {\n      addClass(parent, 'tmap-advanced-editor');\n    }\n\n    if (this.getAttr('design') === 'plain') {\n      addClass(parent, 'tmap-plain-design');\n    }\n\n    if (!utils.isTrue(this.getAttr('show-buttons'), true)) {\n      addClass(parent, 'tmap-no-buttons');\n    }\n\n    if (this.getAttr('class')) {\n      addClass(parent, this.getAttr('class'));\n    }\n\n  }\n\n  /**\n   * Adds a loading bar div below the parent.\n   */\n  addLoadingBar(parent) {\n\n    this.graphLoadingBarDomNode = this.document.createElement('progress');\n    $tw.utils.addClass(this.graphLoadingBarDomNode, 'tmap-loading-bar');\n    parent.appendChild(this.graphLoadingBarDomNode);\n\n  }\n\n  /**\n   * The editor bar contains a bunch of widgets that allow the user\n   * to manipulate the current view.\n   *\n   * Attention: The Editor bar needs to render *after* the graph\n   * because some elements depend on the graph's nodes which are\n   * calculated when the network is created.\n   *\n   * @see https://groups.google.com/forum/#!topic/tiddlywikidev/sJrblP4A0o4\n   * @see blob/master/editions/test/tiddlers/tests/test-wikitext-parser.js\n   */\n  rebuildEditorBar() {\n\n    this.removeChildDomNodes();\n\n    // register dialog variables\n\n    const { view } = this;\n    const unicodeBtnClass = 'tmap-unicode-button';\n    const activeUnicodeBtnClass = `${unicodeBtnClass} tmap-active-button`;\n    const variables = {\n      widgetQualifier: this.getStateQualifier(),\n      widgetTempPath: this.widgetTempPath,\n      widgetPopupsPath: this.widgetPopupsPath,\n      isViewBound: String(this.isViewBound()),\n      viewRoot: view.getRoot(),\n      viewLabel: view.getLabel(),\n      viewHolder: this.getViewHolderRef(),\n      edgeTypeFilter: view.edgeTypeFilterTRef,\n      allEdgesFilter: $tm.selector.allEdgeTypes,\n      neighScopeBtnClass: view.isEnabled('neighbourhood_scope') ? activeUnicodeBtnClass : unicodeBtnClass,\n      rasterMenuBtnClass: view.isEnabled('raster') ? activeUnicodeBtnClass : unicodeBtnClass,\n    };\n\n    for (let name in variables) {\n      this.setVariable(name, variables[name]);\n    }\n\n    // Construct the child widget tree\n    const body = utils.getTiddlerNode(view.getRoot());\n\n    if (this.editorMode === 'advanced') {\n\n      body.children.push(utils.getTranscludeNode($tm.ref.graphBar));\n\n    } else {\n\n      const el = utils.getElementNode('span', 'tmap-view-label', view.getLabel());\n      body.children.push(el);\n\n    }\n\n    body.children.push(utils.getTranscludeNode($tm.ref.focusButton));\n\n    this.makeChildWidgets([ body ]);\n    this.renderChildren(this.graphBarDomNode, this.graphBarDomNode.firstChild);\n\n  }\n\n  /**\n   * This function is called by the system to notify the widget about\n   * tiddler changes. It is ignored by TiddlyMap.\n   *\n   * ATTENTION: TiddlyMap doesn't use the refresh mechanism here.\n   * The caretaker module dispatches an `updates` object that provides\n   * more advanced information, tailored to the needs of TiddlyMap.\n   * These updates are picked up by {@link MapWidget#update}.\n   *\n   * @override\n   */\n  refresh(changedTiddlers) {\n\n    // TiddlyMap never needs a full refresh so we return false\n    return false;\n\n  }\n\n  /**\n   * This function is called by the caretaker module to notify the\n   * widget about tiddler changes.\n   *\n   * TiddlyMap is interested in the following changes:\n   *\n   * - Callbacks have been triggered (e.g. dialog results)\n   * - A view has been switched\n   * - A view has been modified (= configured)\n   * - Global options have changed\n   * - Node- or edge-types have changed\n   * - Graph elements have changed\n   * - Changes to the graph's topbar\n   *\n   * @override\n   * @see https://groups.google.com/d/msg/tiddlywikidev/hwtX59tKsIk/EWSG9glqCnsJ\n   */\n  update(updates) {\n\n    if (!this.network || this.isZombieWidget() || utils.isPreviewed(this)) {\n      return;\n    }\n\n    const { changedTiddlers } = updates;\n\n    // check for callback changes\n    this.callbackManager.refresh(changedTiddlers);\n\n    if (\n       this.isViewSwitched(changedTiddlers)\n       || this.hasChangedAttributes() // widget html code changed\n       || updates[env.path.options] // global options changed\n       || changedTiddlers[this.view.getRoot()] // view's main config changed\n    ) {\n\n      this.logger('warn', 'View switched config changed');\n\n      this.isPreventZoomOnNextUpdate = false;\n      this.view = this.getView(true);\n      this.reloadRefreshTriggers();\n      this.rebuildEditorBar();\n      this.reloadBackgroundImage();\n      this.initAndRenderGraph(this.graphDomNode);\n\n    } else { // view has not been switched\n\n      // give the view a chance to refresh itself\n      const isViewUpdated = this.view.update(updates);\n\n      if (isViewUpdated) {\n\n        this.logger('warn', 'View components modified');\n        this.rebuildGraph({ resetFocus: { delay: 1000, duration: 1000 }});\n\n      } else { // neither view switch or view modification\n\n        if (updates[env.path.nodeTypes] || this.hasChangedElements(changedTiddlers)) {\n          this.rebuildGraph();\n        }\n\n        // give children a chance to update themselves\n        this.refreshChildren(changedTiddlers);\n\n      }\n    }\n\n  }\n\n  hidePopups(delay, isForce) {\n\n    this.tooltip.hide(delay, isForce);\n    this.contextMenu.hide(0, true);\n\n  }\n\n  /**\n   * Refresh-triggers are tiddlers whose mere occurrence in the\n   * changedTiddlers list forces tiddlymap to reassert\n   * whether a filter expression returns the same set of matches as it\n   * is currently displayed in the graph.\n   *\n   * The raison d'etre for refresh-triggers is that a filter may contain\n   * implicit text-references or variables that may require a filter to be\n   * reasserted even though, the filter expression itself did not change.\n   *\n   * For example a filter `[field:title{$:/HistoryList!!current-tiddler}]`\n   * requires a `$:/HistoryList` refresh trigger to be added to the view so\n   * everytime the `$:/HistoryList` tiddler changes, the filter gets\n   * reasserted.\n   */\n  reloadRefreshTriggers() {\n\n    // remove old triggers (if there are any)\n    this.callbackManager.remove(this.refreshTriggers);\n\n    // load new trigger list either from attribute or view config\n    const str = this.getAttr('refresh-triggers') || this.view.getConfig('refresh-triggers');\n    this.refreshTriggers = $tw.utils.parseStringArray(str) || [];\n\n    this.logger('debug', 'Registering refresh trigger', this.refreshTriggers);\n\n    // TODO: not nice, if more than one trigger changed it\n    // will cause multiple reassertments\n    for (let i = this.refreshTriggers.length; i--;) {\n      this.callbackManager.add(this.refreshTriggers[i],\n                               this.handleTriggeredRefresh,\n                               false);\n    }\n\n  }\n\n  /**\n   * Calling this method will cause the graph to be rebuild, which means\n   * the graph data is refreshed. A rebuild of the graph will always\n   * cause the network to stabilize again.\n   *\n   * @param {Hashmap} [resetFocus=null] - If not false or null,\n   *     this object requires two properties to be set: `delay` (the\n   *     time to wait before starting the fit), `duration` (the length\n   *     of the fit animation).\n   */\n  rebuildGraph({ resetFocus } = {}) {\n\n    if (utils.isPreviewed(this)) {\n\n      return;\n    }\n\n    this.logger('debug', 'Rebuilding graph');\n\n    this.hidePopups(0, true);\n\n    // always reset to allow handling of stabilized-event!\n    this.hasNetworkStabilized = false;\n\n    const changes = this.rebuildGraphData();\n\n    if (changes.changedNodes.withoutPosition.length) {\n\n      // force resetFocus\n      resetFocus = resetFocus || { delay: 1000, duration: 1000 };\n\n      if (!this.view.isEnabled('physics_mode')) {\n\n        // in static mode we need to ensure that objects spawn\n        // near center so we need to set physics from\n        // zero to something. Yes, we override the users\n        // central gravity value… who cares about central\n        // gravity in static mode anyways.\n        const physics = this.visOptions.physics;\n        physics[physics.solver].centralGravity = 0.25;\n        this.network.setOptions(this.visOptions);\n\n      }\n    }\n\n    if (!utils.hasElements(this.graphData.nodesById)) {\n      return;\n    }\n\n    if (resetFocus) {\n\n      if (!this.isPreventZoomOnNextUpdate) {\n\n        // see https://github.com/almende/vis/issues/987#issuecomment-113226216\n        // see https://github.com/almende/vis/issues/939\n        this.network.stabilize();\n        this.resetFocus = resetFocus;\n      }\n\n      this.isPreventZoomOnNextUpdate = false;\n\n    }\n\n  }\n\n  /**\n   * WARNING: Do not change this functionname as it is used by the\n   * caretaker's routinely checkups.\n   */\n  getContainer() {\n\n    return this.domNode;\n\n  }\n\n  /**\n   *\n   */\n  rebuildGraphData() {\n\n    $tm.start('Reloading Network');\n\n    const graph = $tm.adapter.getGraph({ view: this.view });\n\n    const changedNodes = utils.refreshDataSet(\n      this.graphData.nodes, // dataset\n      graph.nodes // new nodes\n    );\n\n    const changedEdges = utils.refreshDataSet(\n      this.graphData.edges, // dataset\n      graph.edges // new edges\n    );\n\n    // create lookup tables\n\n    this.graphData.nodesById = graph.nodes;\n    this.graphData.edgesById = graph.edges;\n\n    // TODO: that's a performance killer. this should be loaded when\n    // the search is actually used!\n    // update: Careful when refactoring, some modules are using this…\n    utils.setField(`$:/temp/tmap/nodes/${this.view.getLabel()}`, 'list', $tm.adapter.getTiddlersByIds(graph.nodes));\n\n    $tm.stop('Reloading Network');\n\n    return { changedEdges, changedNodes };\n\n  }\n\n  isViewBound() {\n\n    return utils.startsWith(this.getViewHolderRef(), $tm.path.localHolders);\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   * Also if a view suddenly doesn't exist anymore we consider this\n   * a trigger for a view change.\n   */\n  isViewSwitched(changedTiddlers) {\n\n    return (\n      !ViewAbstraction.exists(this.view)\n      || changedTiddlers[this.getViewHolderRef()]\n    );\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  hasChangedAttributes() {\n\n    return Object.keys(this.computeAttributes()).length;\n\n  }\n\n  /**\n   * Rebuild or update the graph if one of the following is true:\n   *\n   * 1. A tiddler currently contained as node in the graph has been\n   *    deleted or modified. This also includes tiddlers that are\n   *    represented as neighbours in the graph.\n   * 2. The neighbourhood is shown and a non-system tiddler has changed.\n   * 3. A tiddler that matches the node filter has been modified\n   *    (not deleted).\n   *\n   * Since edges are stored in tiddlers themselves, any edge modification\n   * is always accounted for as in this case the tiddler holding the\n   * edge would be included as changed tiddler.\n   *\n   * @param {Hashmap<TiddlerReference, *>} changedTiddlers - A list of\n   *     tiddler changes.\n   *\n   * @return {boolean} true if the graph needs a refresh.\n   */\n  hasChangedElements(changedTiddlers) {\n\n    const maybeMatches = [];\n    const inGraph = this.graphData.nodesById;\n    const isShowNeighbourhood = this.view.isEnabled('neighbourhood_scope');\n\n    for (let tRef in changedTiddlers) {\n\n      if (utils.isSystemOrDraft(tRef)) {\n\n        continue;\n      }\n\n      if (inGraph[$tm.adapter.getId(tRef)] || isShowNeighbourhood) {\n\n        return true;\n      }\n\n      if (changedTiddlers[tRef].modified) {\n        // may be a match so we store this and process it later\n        maybeMatches.push(tRef);\n      }\n    }\n\n    if (maybeMatches.length) {\n\n      const nodeFilter = this.view.getNodeFilter('compiled');\n      const matches = utils.getMatches(nodeFilter, maybeMatches);\n\n      return !!matches.length;\n    }\n\n  }\n\n  /**\n   * Rebuild the graph\n   *\n   * @see http://visjs.org/docs/network.html\n   * @see http://visjs.org/docs/dataset.html\n   */\n  initAndRenderGraph(parent) {\n\n    // make sure to destroy any previous instance\n    if (this.network) {\n      this._destructVis();\n    }\n\n    this.logger('info', 'Initializing and rendering the graph');\n\n    if (!this.isInSidebar) {\n      this.callbackManager.add('$:/state/sidebar', this.handleResizeEvent);\n    }\n\n    this.visOptions = this.getVisOptions();\n\n    this.graphData = {\n      nodes: new vis.DataSet(),\n      edges: new vis.DataSet(),\n      nodesById: utils.makeHashMap(),\n      edgesById: utils.makeHashMap()\n    };\n\n    this.tooltip.setEnabled(utils.isTrue($tm.config.sys.popups.enabled, true));\n\n    this.network = new vis.Network(parent, this.graphData, this.visOptions);\n    // after vis.Network has been instantiated, we fetch a reference to\n    // the canvas element\n    this.canvas = parent.getElementsByTagName('canvas')[0];\n    this.networkDomNode = utils.getFirstElementByClassName('vis-network', parent, true);\n    // just to be sure\n    this.canvas.tabIndex = 0;\n\n    for (let event in this.visListeners) {\n      this.network.on(event, this.visListeners[event].bind(this));\n    }\n\n    this.addGraphButtons({\n      'fullscreen-button': () => { this.toggleEnlargedMode('fullscreen'); },\n      'halfscreen-button': () => { this.toggleEnlargedMode('halfscreen'); }\n    });\n\n    utils.setDomListeners('add', this.canvas, this.canvasDomListeners);\n\n    this.reloadBackgroundImage();\n    this.rebuildGraph({\n      resetFocus: { delay: 0, duration: 0 },\n    });\n    this.handleResizeEvent();\n    this.canvas.focus();\n\n  }\n\n  handleCanvasKeyup(ev) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    // this.isCtrlKeyDown = ev.ctrlKey;\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 88) { // x\n        if (this.editorMode) {\n          this.handleAddNodesToClipboard('move');\n        } else {\n          $tm.notify('Map is read only!');\n        }\n\n      } else if (ev.keyCode === 67) { // c\n        this.handleAddNodesToClipboard('copy');\n\n      } else if (ev.keyCode === 86) { // v\n        this.handlePasteNodesFromClipboard();\n\n      } else if (ev.keyCode === 65) { // a\n        const allNodes = Object.keys(this.graphData.nodesById);\n        this.network.selectNodes(allNodes);\n\n      } else if (ev.keyCode === 49 || ev.keyCode === 50) { // 1 || 2\n        if (nodeIds.length !== 1) return;\n\n        const role = ev.keyCode === 49 ? 'from' : 'to';\n        $tm.notify(utils.ucFirst(role) + '-part selected');\n\n        this.conVector[role] = nodeIds[0];\n        if (this.conVector.from && this.conVector.to) {\n          // create the edge\n          this.handleConnectionEvent(this.conVector, () => {\n            // reset both properties, regardless whether confirmed\n            this.conVector = { from: null, to: null };\n          });\n        }\n\n      }\n\n    } else { // ctrl is not pressed\n\n      if (ev.keyCode === 13) { // ENTER\n\n        if (nodeIds.length !== 1) return;\n\n        this.openTiddlerWithId(nodeIds[0]);\n\n      }\n    }\n  }\n\n  handleCanvasKeydown(ev) {\n\n    if (ev.altKey || ev.metaKey) {\n      ev.preventDefault();\n\n      if (ev.keyCode >= 48 && ev.keyCode <= 57) { // 0 through 9\n        const scopeStr = String.fromCharCode(ev.keyCode);\n        this.view.setConfig('neighbourhood_scope', scopeStr);\n      }\n    } else {\n      if (ev.keyCode === 46) { // delete\n        ev.preventDefault();\n        this.handleRemoveElements(this.network.getSelection());\n      }\n    }\n\n  }\n\n  handleDeleteElement(ev) {\n\n    const id = ev.paramObject.id;\n    const elements = (id ? [ id ] : this.network.getSelectedNodes());\n\n    this.handleRemoveElements({ nodes: elements });\n\n  }\n\n  /**\n   *\n   * @param ev\n   */\n  handleCanvasMouseMove(ev) {\n\n    const { network } = this;\n\n    if (!(ev.ctrlKey && ev.buttons)) {\n\n      if (this.selectRect) {\n        this.selectRect = null;\n        const selectedNodes = network.getSelectedNodes();\n        $tm.notify(`${selectedNodes.length} nodes selected`);\n        network.redraw();\n      }\n\n      return;\n\n    }\n\n    // prevent vis' network drag if ctrl key and mouse button is pressed\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (!this.domNode.contains(ev.target)) {\n      // since we are using a global mouse listener, we need to check whether\n      // we are actually inside our widget, so we stop updating the selectRect\n      return;\n    }\n\n    const mouse = network.DOMtoCanvas({ x: ev.offsetX, y: ev.offsetY });\n\n    if (!this.selectRect) {\n      this.selectRect = new SelectionRectangle(mouse.x, mouse.y);\n    }\n\n    // register new coordinates\n    this.selectRect.span(mouse.x, mouse.y);\n    // retrieve current mouse positions\n    const nodePositions = network.getPositions();\n    // we include previously selected nodes in the new set\n    const selectedNodes = network.getSelectedNodes();\n\n    for (let id in nodePositions) {\n\n      if (this.selectRect.isPointWithin(nodePositions[id]) && !utils.inArray(id, selectedNodes)) {\n        selectedNodes.push(id);\n      }\n    }\n\n    network.selectNodes(selectedNodes);\n    this.assignActiveStyle(selectedNodes);\n\n    network.redraw();\n\n  }\n\n  //https://github.com/almende/vis/blob/111c9984bc4c1870d42ca96b45d90c13cb92fe0a/lib/network/modules/InteractionHandler.js\n  handleCanvasScroll(ev) {\n\n    const isZoomAllowed = !!(\n      this.isInSidebar || // e.g. the map editor in the sidebar\n      ev.ctrlKey ||\n      this.enlargedMode ||\n      (this.clickToUse && this.networkDomNode.classList.contains('vis-active'))\n    );\n\n    const { interaction } = this.visOptions;\n    const isVisSettingInSync = isZoomAllowed === interaction.zoomView;\n\n    if (isZoomAllowed || !isVisSettingInSync) {\n      ev.preventDefault();\n    }\n\n    if (!isVisSettingInSync) {\n      // prevent visjs from reacting to this event as we first need to sync states\n      ev.stopPropagation();\n\n      interaction.zoomView = isZoomAllowed;\n      this.network.setOptions({ interaction: { zoomView: isZoomAllowed }});\n\n      return false;\n    }\n\n  }\n\n  /**\n   * This handles the extraneous event fired by Firefox whenever a\n   * DOMMouseScroll event occurs. We just want to swallow it.\n   * Solves: https://github.com/felixhayashi/TW5-TiddlyMap/issues/306\n   */\n  handleExtraCanvasScroll(ev) {\n    ev.preventDefault();\n  }\n\n  /**\n   * Called when the user click on the canvas with the right\n   * mouse button. A context menu is opened.\n   */\n  handleContextMenu(ev) {\n\n    ev.preventDefault();\n\n    const { network } = this;\n\n    this.hidePopups(0, true);\n\n    const nodeId = network.getNodeAt({ x: ev.offsetX, y: ev.offsetY });\n    if (!nodeId) return;\n\n    // ids of selected nodes\n    let selectedNodes = network.getSelectedNodes();\n\n    if (!utils.inArray(nodeId, selectedNodes)) {\n      // unselect other nodes and select this one instead…\n      selectedNodes = [ nodeId ];\n      network.selectNodes(selectedNodes);\n    }\n\n    this.contextMenu.show(selectedNodes, (selectedNodes, div) => {\n\n      const mode = (selectedNodes.length > 1 ? 'multi' : 'single');\n      const tRef = '$:/plugins/felixhayashi/tiddlymap/editor/contextMenu/node';\n\n      utils.registerTransclude(this, 'contextMenuWidget', tRef);\n      this.contextMenuWidget.setVariable('mode', mode);\n      this.contextMenuWidget.render(div);\n\n    });\n\n  }\n\n  handleWidgetKeyup(ev) {\n\n  }\n\n  handleWidgetKeydown(ev) {\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 70) { // f\n        ev.preventDefault();\n\n        const focusButtonStateTRef = `${this.widgetPopupsPath}/focus`;\n        utils.setText(focusButtonStateTRef, utils.getText(focusButtonStateTRef) ? '' : '1');\n\n        // note: it is ok to focus the graph right after this,\n        // if the focus button is activated it will steal the focus anyway\n\n      } else {\n\n        return;\n\n      }\n\n    } else if (ev.keyCode === 120) { // F9\n      ev.preventDefault();\n      this.toggleEnlargedMode('halfscreen');\n\n    } else if (ev.keyCode === 121) { // F10\n      ev.preventDefault();\n      this.toggleEnlargedMode('fullscreen');\n\n    } else if (ev.keyCode === 27) { // ESC\n      ev.preventDefault();\n\n      utils.deleteByPrefix(this.widgetPopupsPath);\n\n    } else {\n      return;\n    }\n\n    this.canvas.focus();\n\n  }\n\n  handlePasteNodesFromClipboard() {\n\n    if (!this.editorMode) {\n      $tm.notify('Map is read only!');\n      return;\n    }\n\n    if (!$tm.clipBoard || $tm.clipBoard.type !== 'nodes') {\n      $tm.notify('TiddlyMap clipboad is empty!');\n    }\n\n    const nodes = $tm.clipBoard.nodes;\n    const ids = Object.keys(nodes);\n\n    for (let i = ids.length; i--;) {\n\n      const id = ids[i];\n\n      if (this.graphData.nodesById[id]) {\n        // node already present in this view\n        continue;\n      }\n\n      this.view.addNode(nodes[id]);\n\n      // paste nodes so we can select them!\n      this.graphData.nodes.update({ id });\n    }\n\n    this.network.selectNodes(ids);\n\n    this.rebuildGraph({ resetFocus: { delay: 0, duration: 0 }});\n\n    $tm.notify(`pasted ${ids.length} nodes into map.`);\n\n  }\n\n  handleAddNodesToClipboard(mode) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    if (!nodeIds.length) {\n      return;\n    }\n\n    $tm.clipBoard = {\n      type: 'nodes',\n      nodes: this.graphData.nodes.get(nodeIds, { returnType: 'Object' })\n    };\n\n    $tm.notify(`Copied ${nodeIds.length} nodes to clipboard`);\n\n    if (mode === 'move') {\n      for (let i = nodeIds.length; i--;) {\n        this.view.removeNode(nodeIds[i]);\n      }\n    }\n\n    // prevent zoom\n    this.isPreventZoomOnNextUpdate = true;\n\n  }\n\n  /**\n   * @todo Instead of redrawing the whole graph when an edge or node is\n   * added it may be worth considering only getting the element from the\n   * adapter and directly inserting it into the graph and *avoid* a\n   * reload of the graph via `rebuildGraph`!\n   *\n   * @todo: too much recomputation -> outsource\n   */\n  getVisOptions() {\n\n    // merge options\n    const globalOptions = $tm.config.vis;\n    const localOptions = utils.parseJSON(this.view.getConfig('vis'));\n    const options = utils.merge({}, globalOptions, localOptions);\n\n    options.clickToUse = this.clickToUse;\n    options.manipulation.enabled = !!this.editorMode;\n\n    options.manipulation.deleteNode = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.deleteEdge = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addEdge = (data, callback) => {\n      this.handleConnectionEvent(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addNode = (data, callback) => {\n      this.handleInsertNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.editNode = (data, callback) => {\n      this.handleEditNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.interaction.zoomView = !!(this.isInSidebar || this.enlargedMode);\n\n    // not allowed\n    options.manipulation.editEdge = false;\n\n    // make sure the actual solver is an object\n    const physics = options.physics;\n    physics[physics.solver] = physics[physics.solver] || {};\n\n    physics.stabilization.iterations = 1000;\n\n    this.logger('debug', 'Loaded graph options', options);\n\n    return options;\n\n  }\n\n  resetVisManipulationBar(visCallback) {\n\n    if (visCallback) {\n      visCallback(null);\n    }\n\n    this.network.disableEditMode();\n    this.network.enableEditMode();\n\n  }\n\n  isVisInEditMode() {\n\n    return this.graphDomNode.getElementsByClassName('vis-button vis-back').length > 0;\n\n  }\n\n  /**\n   * Create an empty view. A dialog is opened that asks the user how to\n   * name the view. The view is then registered as current view.\n   */\n  handleCreateView() {\n\n    const args = {\n      view: this.view.getLabel()\n    };\n\n    $tm.dialogManager.open('createView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const label = utils.getField(outTObj, 'name');\n      const isClone = utils.getField(outTObj, 'clone', false);\n\n      if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n        return;\n      }\n\n      if (isClone && this.view.isLiveView()) {\n        $tm.notify('Forbidden to clone the live view!');\n        return;\n      }\n\n      const newView = new ViewAbstraction(label, {\n        isCreate: true,\n        protoView: (isClone ? this.view : null)\n      });\n\n      this.setView(newView);\n\n    });\n\n  }\n\n  handleRenameView() {\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    const references = this.view.getOccurrences();\n\n    const args = {\n      count: references.length.toString(),\n      refFilter: utils.joinAndWrap(references, '[[', ']]')\n    };\n\n    $tm.dialogManager.open('renameView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const label = utils.getText(outTObj);\n\n      if (!label) {\n\n        $tm.notify('Invalid name!');\n\n      } else if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n      } else {\n\n        this.view.rename(label);\n        this.setView(this.view);\n\n      }\n    });\n  }\n\n  handleEditView() {\n\n    const visInherited = JSON.stringify($tm.config.vis);\n    const data = this.graphData;\n\n    const viewConfig = this.view.getConfig();\n\n    const preselects = {\n      'filter.prettyNodeFltr': this.view.getNodeFilter('pretty'),\n      'filter.prettyEdgeFltr': this.view.getEdgeTypeFilter('pretty'),\n      'vis-inherited': visInherited\n    };\n\n    const args = {\n      view: this.view.getLabel(),\n      createdOn: this.view.getCreationDate(true),\n      numberOfNodes: Object.keys(data.nodesById).length.toString(),\n      numberOfEdges: Object.keys(data.edgesById).length.toString(),\n      dialog: {\n        preselects: $tw.utils.extend({}, viewConfig, preselects)\n      }\n    };\n\n    $tm.dialogManager.open('configureView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      // ATTENTION: needs to be tested before applying new config!\n      const prvBg = this.view.getConfig('background_image');\n\n      this.view.setConfig(config);\n      if (config['physics_mode'] && !this.view.isEnabled('physics_mode')) {\n        // when not in physics mode, store positions\n        // to prevent floating afterwards\n        this.view.saveNodePositions(this.network.getPositions());\n      }\n\n      const curBg = this.view.getConfig('background_image');\n      if (curBg && curBg !== prvBg) {\n        $tm.notify('Background changed! You may need to zoom out a bit.');\n      }\n\n      const nf = utils.getField(outTObj, 'filter.prettyNodeFltr', '');\n      const eTf = utils.getField(outTObj, 'filter.prettyEdgeFltr', '');\n\n      this.view.setNodeFilter(nf);\n      this.view.setEdgeTypeFilter(eTf);\n\n    });\n  }\n\n  /**\n   * Triggers a download dialog where the user can store the canvas\n   * as png on his/her harddrive.\n   */\n  handleSaveCanvas() {\n\n    const tempImagePath = '$:/temp/tmap/snapshot';\n    this.createAndSaveSnapshot(tempImagePath);\n    let defaultName = utils.getSnapshotTitle(this.view.getLabel(), 'png');\n\n    const args = {\n      dialog: {\n        snapshot: tempImagePath,\n        width: this.canvas.width.toString(),\n        height: this.canvas.height.toString(),\n        preselects: {\n          name: defaultName,\n          action: 'download'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('saveCanvas', args, (isConfirmed, outTObj) => {\n      if (!isConfirmed) return;\n\n      // allow the user to override the default name or if name is\n      // empty use the original default name\n      defaultName = outTObj.fields.name || defaultName;\n\n      const action = outTObj.fields.action;\n\n      if (action === 'download') {\n        this.handleDownloadSnapshot(defaultName);\n\n      } else if (action === 'wiki') {\n        utils.cp(tempImagePath, defaultName, true);\n        this.dispatchEvent({\n          type: 'tm-navigate', navigateTo: defaultName\n        });\n\n      } else if (action === 'placeholder') {\n        this.view.addPlaceholder(tempImagePath);\n\n      }\n\n      // in any case\n      $tw.wiki.deleteTiddler('$:/temp/tmap/snapshot');\n\n    });\n\n  }\n\n  handleDownloadSnapshot(title) {\n\n    const a = this.document.createElement('a');\n    const label = this.view.getLabel();\n    a.download = title || utils.getSnapshotTitle(label, 'png');\n    a.href = this.getSnapshot();\n\n    // we cannot simply call click() on <a>; chrome is cool with it but\n    // firefox requires us to create a mouse event…\n    const event = new MouseEvent('click');\n    a.dispatchEvent(event);\n\n  }\n\n  createAndSaveSnapshot(title) {\n\n    const tRef = title || this.view.getRoot() + '/snapshot';\n    $tw.wiki.addTiddler(\n      new $tw.Tiddler(\n        {\n          title: tRef,\n          type: 'image/png',\n          text: this.getSnapshot(true)\n        },\n        $tw.wiki.getCreationFields(),\n        $tw.wiki.getModificationFields()\n      )\n    );\n\n    return tRef;\n\n  }\n\n  getSnapshot(stripPreamble) {\n\n    const data = this.canvas.toDataURL('image/png');\n\n    return (stripPreamble\n            ? utils.getWithoutPrefix(data, 'data:image/png;base64,')\n            : data);\n\n  }\n\n  handleDeleteView() {\n\n    const viewname = this.view.getLabel();\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    // regex is non-greedy\n\n    const references = this.view.getOccurrences();\n    if (references.length) {\n\n      const fields = {\n        count: references.length.toString(),\n        refFilter: utils.joinAndWrap(references, '[[', ']]')\n      };\n\n      $tm.dialogManager.open('cannotDeleteViewDialog', fields);\n\n      return;\n\n    }\n\n    const message = `\n        You are about to delete the view ''${viewname}''\n        (no tiddler currently references this view).\n     `;\n\n    this.openStandardConfirmDialog((isConfirmed) => { // TODO: this dialog needs an update\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      this.view.destroy();\n      this.setView($tm.misc.defaultViewLabel);\n      const msg = `view \"${viewname}' deleted`;\n      this.logger('debug', msg);\n      $tm.notify(msg);\n\n\n    }, message);\n\n  }\n\n  /**\n   * This will rebuild the graph after a trigger has been activated.\n   *\n   * Prior to TiddlyMap v0.9, an additional check was performed\n   * to verify, if the graph had actually changed before rebuilding\n   * the graph. This check, however, was an overkill and as such removed.\n   */\n  handleTriggeredRefresh(trigger) {\n\n    this.logger('log', trigger, 'Triggered a refresh');\n\n    // special case for the live tab\n    if (this.id === 'live_tab') {\n      const curTiddler = utils.getTiddler(utils.getText(trigger));\n      if (curTiddler) {\n        const view = (curTiddler.fields['tmap.open-view'] || $tm.config.sys.liveTab.fallbackView);\n        if (view && view !== this.view.getLabel()) {\n          this.setView(view);\n          return;\n        }\n      }\n    }\n\n    this.rebuildGraph({\n      resetFocus: {\n        delay: 1000,\n        duration: 1000\n      },\n    });\n\n  }\n\n  /**\n   * Called by vis when the user tries to delete nodes or edges.\n   * The action is delegated to subhandlers.\n   *\n   * @param {Array<Id>} nodes - Removed edges.\n   * @param {Array<Id>} edges - Removed nodes.\n   */\n  handleRemoveElements({ nodes, edges }) {\n\n    if (nodes.length) {\n      // the adapter also removes edges when nodes are removed.\n      this.handleRemoveNodes(nodes);\n\n    } else if (edges.length) {\n      this.handleRemoveEdges(edges);\n\n    }\n\n    this.resetVisManipulationBar();\n\n\n  }\n\n  handleRemoveEdges(edgeIds) {\n\n    $tm.adapter.deleteEdges(this.graphData.edges.get(edgeIds));\n    $tm.notify('edge' + (edgeIds.length > 1 ? 's' : '') + ' removed');\n\n  }\n\n\n  /**\n   * Handler that guides the user through the process of deleting a node\n   * from the graph. The nodes may be removed from the filter (if possible)\n   * or from the system.\n   *\n   * Note: this should not trigger a zoom.\n   */\n  handleRemoveNodes(nodeIds) {\n\n    const tiddlers = $tm.adapter.getTiddlersByIds(nodeIds);\n    const params = {\n      'count': nodeIds.length.toString(),\n      'tiddlers': $tw.utils.stringifyList(tiddlers),\n      dialog: {\n        preselects: {\n          'delete-from': 'filter'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('deleteNodeDialog', params, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      let deletionCount = 0;\n\n      for (let i = nodeIds.length; i--;) {\n        const success = this.view.removeNode(nodeIds[i]);\n        if (success) {\n          deletionCount++;\n        }\n      }\n\n      if (outTObj.fields['delete-from'] === 'system') {\n\n        // will also delete edges\n        $tm.adapter.deleteNodes(nodeIds);\n        deletionCount = nodeIds.length; // we just say so ;)\n\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n      $tm.notify(`\n        Removed ${deletionCount}\n        of ${nodeIds.length}\n        from ${outTObj.fields['delete-from']}\n      `);\n\n    });\n\n  }\n\n  /**\n   * Calling this function will toggle the enlargement of the map\n   * instance. Markers need to be added at various places to ensure the\n   * map stretches properly. This includes marking ancestor dom nodes\n   * to be able to shift the stacking context.\n   *\n   * @param {string} type - either 'halfscreen' or 'fullscreen'.\n   */\n\n  toggleEnlargedMode(type) {\n\n    if (!this.isInSidebar && type === 'halfscreen') {\n      return;\n    }\n\n    this.logger('log', 'Toggled graph enlargement');\n\n    const enlargedMode = this.enlargedMode;\n\n    // in any case, exit enlarged mode if active\n    if (enlargedMode) {\n\n      // reset click to use\n      this.network.setOptions({ clickToUse: this.clickToUse });\n\n      // remove markers\n      utils.findAndRemoveClassNames([\n        `tmap-has-${enlargedMode}-widget`,\n        `tmap-${enlargedMode}`\n      ]);\n\n      // reset flag\n      this.enlargedMode = null;\n      document.body.scrollTop = this.scrollTop;\n    }\n\n    if (!enlargedMode\n       || (enlargedMode !== type\n           && (type === 'fullscreen'\n               || (type === 'halfscreen' && !this.isInSidebar)))) {\n\n      this.scrollTop = document.body.scrollTop;\n\n      this.enlargedMode = type;\n\n      const pContainer = (this.isInSidebar\n                        ? this.sidebar\n                        : utils.getFirstElementByClassName('tc-story-river'));\n\n      $tw.utils.addClass(this.document.body, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(pContainer, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(this.domNode, `tmap-${type}`);\n\n      // disable click to use by force\n      this.network.setOptions({ clickToUse: false });\n\n      $tm.notify(`Toggled ${type} mode`);\n\n    }\n\n    // always do resize\n    this.handleResizeEvent();\n\n  }\n\n  handleGenerateWidget(event) {\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-generate-widget',\n      paramObject: { view: this.view.getLabel() }\n    });\n\n  }\n\n  handleSetCentralTopic({ paramObject }) {\n\n    let nodeId = paramObject.id || this.network.getSelectedNodes()[0];\n\n    if (nodeId === this.view.getConfig('central-topic')) {\n      nodeId = '';\n    }\n\n    this.view.setCentralTopic(nodeId);\n\n  }\n\n  /**\n   * Called by vis when the graph has stabilized itself.\n   *\n   * ATTENTION: never store positions in a view's map during stabilize\n   * as this will affect other graphs positions and will cause recursion!\n   * Storing positions inside vis' nodes is fine though\n   */\n  handleVisStabilizedEvent(properties) {\n\n    if (this.hasNetworkStabilized) {\n      return;\n    }\n\n    this.hasNetworkStabilized = true;\n    this.logger('log', 'Network stabilized after', properties.iterations, 'iterations');\n\n    if (!this.view.isEnabled('physics_mode')) { // static mode\n\n      // store positions if new nodes without position were added\n      const nodes = this.graphData.nodesById;\n      const idsOfNodesWithoutPosition = [];\n\n      for (let id in nodes) {\n        if (nodes[id].x === undefined) {\n          idsOfNodesWithoutPosition.push(id);\n        }\n      }\n\n      if (idsOfNodesWithoutPosition.length) {\n        this.setNodesMoveable(idsOfNodesWithoutPosition, false);\n        $tm.notify(`${idsOfNodesWithoutPosition.length} nodes were added to the graph`);\n      }\n\n      // after storing positions, set gravity to zero again\n      const physics = this.visOptions.physics;\n      physics[physics.solver].centralGravity = 0;\n      this.network.setOptions(this.visOptions);\n\n    }\n\n    if (this.resetFocus) {\n      this.fitGraph(this.resetFocus.delay, this.resetFocus.duration);\n      this.resetFocus = null;\n    }\n\n  }\n\n  /**\n   * Zooms on a specific node in the graph\n   */\n  handleFocusNode({ param: tRef }) {\n\n    this.network.focus($tm.adapter.getId(tRef), {\n      scale: 1.5,\n      animation: true\n    });\n\n  }\n\n  /**\n   * A zombie widget is a widget that is removed from the dom tree\n   * but still referenced or still partly executed -- I mean\n   * otherwise you couldn't call this function, right?\n   *\n   * If TiddlyMap is executed in a fake environment, the function\n   * always returns true.\n   */\n  isZombieWidget() {\n\n    return this.domNode.isTiddlyWikiFakeDom === true\n           || !this.document.body.contains(this.getContainer());\n\n  }\n\n  /**\n   * This method allows us to specify after what time and for how long\n   * the zoom-to-fit process should be executed for a graph.\n   *\n   * @param {number} [delay=0] - How long to wait before starting to zoom.\n   * @param {number} [duration=0] - After the delay, how long should it\n   *     take for the graph to be zoomed.\n   */\n  fitGraph(delay = 0, duration = 0) {\n\n    // clear any existing fitting attempt\n    clearTimeout(this.activeFitTimeout);\n\n    const fit = () => {\n\n      // happens when widget is removed after stabilize but before fit\n      if (this.isZombieWidget()) {\n        return;\n      }\n\n      // fixes #97\n      this.network.redraw();\n\n      this.network.fit({ // v4: formerly zoomExtent\n        animation: {\n          duration: duration,\n          easingFunction: 'easeOutQuart'\n        }\n      });\n\n    };\n\n    this.activeFitTimeout = setTimeout(fit, delay);\n\n  }\n\n  /**\n   * Spawns a dialog in which the user can specify node attributes.\n   * Once the dialog is closed, the node is inserted into the current\n   * view, unless the operation was cancelled.\n   */\n  handleInsertNode(node) {\n\n    $tm.dialogManager.open('addNodeToMap', {}, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const tRef = utils.getField(outTObj, 'draft.title');\n\n      if (utils.tiddlerExists(tRef)) {\n\n        // Todo: use graphData and test if node is match (!=neighbour)\n        if (utils.isMatch(tRef, this.view.getNodeFilter('compiled'))) {\n\n          $tm.notify('Node already exists');\n\n          return;\n\n        } else {\n\n          node = $tm.adapter.makeNode(tRef, node);\n          this.view.addNode(node);\n\n        }\n\n      } else {\n\n        const tObj = new $tw.Tiddler(outTObj, { 'draft.title': null });\n\n        node.label = tRef;\n        $tm.adapter.insertNode(node, this.view, tObj);\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * Open the node editor to style the node.\n   */\n  handleEditNode(node) {\n\n    const tRef = $tm.tracker.getTiddlerById(node.id);\n    const tObj = utils.getTiddler(tRef);\n    const globalDefaults = JSON.stringify($tm.config.vis);\n    const localDefaults = this.view.getConfig('vis');\n    const nodes = {};\n    nodes[node.id] = node;\n    const nodeStylesByTRef = $tm.adapter.getInheritedNodeStyles(nodes);\n    const groupStyles = JSON.stringify(nodeStylesByTRef[tRef]);\n    const globalNodeStyle = JSON.stringify(utils.merge(\n                            {},\n                            { color: tObj.fields['color'] },\n                            utils.parseJSON(tObj.fields['tmap.style'])));\n\n    const viewLabel = this.view.getLabel();\n\n    // we copy the object since we intend to modify it.\n    // NOTE: A deep copy would be needed if a nested property were modified\n    //       In that case, use $tw.utils.deepCopy.\n    const nodeData = { ...this.view.getNodeData(node.id) };\n    // we need to delete the positions so they are not reset when a user\n    // resets the style…\n    delete nodeData.x;\n    delete nodeData.y;\n\n    const args = {\n      'view': viewLabel,\n      'tiddler': tObj.fields.title,\n      'tidColor': tObj.fields['color'],\n      'tidIcon': tObj.fields[$tm.field.nodeIcon] || tObj.fields['tmap.fa-icon'],\n      'tidLabelField': `global.${$tm.field.nodeLabel}`,\n      'tidIconField': `global.${$tm.field.nodeIcon}`,\n      dialog: {\n        preselects: {\n          'inherited-global-default-style': globalDefaults,\n          'inherited-local-default-style': localDefaults,\n          'inherited-group-styles': groupStyles,\n          'global.tmap.style': globalNodeStyle,\n          'local-node-style': JSON.stringify(nodeData)\n        }\n      }\n    };\n\n    // function to iterate over attributes that shall be available\n    // in the dialog.\n    const addToPreselects = (scope, store, keys) => {\n      for (let i = keys.length; i--;) {\n        args.dialog.preselects[scope + '.' + keys[i]] = store[keys[i]] || '';\n      }\n    };\n\n    // local values are retrieved from the view's node data store\n    addToPreselects('local', nodeData, [\n      'label', 'tw-icon', 'fa-icon', 'open-view'\n    ]);\n\n    // global values are taken from the tiddler's field object\n    addToPreselects('global', tObj.fields, [\n      $tm.field.nodeLabel,\n      $tm.field.nodeIcon,\n      'tmap.fa-icon',\n      'tmap.open-view'\n    ]);\n\n    $tm.dialogManager.open('editNode', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const fields = outTObj.fields;\n\n      // save or remove global individual style\n      const global = utils.getPropertiesByPrefix(fields, 'global.', true);\n      for (let p in global) {\n\n        utils.setField(tRef, p, global[p] || undefined);\n      }\n\n      // save local individual data (style + config)\n      const local = utils.getPropertiesByPrefix(fields, 'local.', true);\n\n      // CAREFUL: Never change 'local-node-style' to 'local.node-style'\n      // (with a dot) because it will get included in the loop!\n      const data = utils.parseJSON(fields['local-node-style'], {});\n\n      for (let p in local) {\n        data[p] = local[p] || undefined;\n      }\n\n      this.view.saveNodeStyle(node.id, data);\n\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   */\n  handleVisSingleClickEvent(properties) {\n\n    const isActivated = utils.isTrue($tm.config.sys.singleClickMode);\n    if (isActivated && !this.editorMode) {\n      this.handleOpenMapElementEvent(properties);\n    }\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   *\n   * @see Coordinates not passed on click/tap events within the properties object\n   * @see https://github.com/almende/vis/issues/440\n   *\n   * @properties a list of nodes and/or edges that correspond to the\n   * click event.\n   */\n  handleVisDoubleClickEvent(properties) {\n\n    if (properties.nodes.length || properties.edges.length) {\n\n      if (this.editorMode || !utils.isTrue($tm.config.sys.singleClickMode)) {\n\n        this.handleOpenMapElementEvent(properties);\n\n      }\n\n\n    } else { // = clicked on an empty spot\n\n      if (this.editorMode) {\n        this.handleInsertNode(properties.pointer.canvas);\n      }\n\n    }\n\n  }\n\n  handleOpenMapElementEvent({ nodes, edges }) {\n\n    if (nodes.length) { // clicked on a node\n\n      const node = this.graphData.nodesById[nodes[0]];\n      if (node['open-view']) {\n        $tm.notify('Switching view');\n        this.setView(node['open-view']);\n      } else {\n        this.openTiddlerWithId(nodes[0]);\n      }\n\n    } else if (edges.length) { // clicked on an edge\n\n      this.logger('debug', 'Clicked on an Edge');\n      const typeId = this.graphData.edgesById[edges[0]].type;\n      this.handleEditEdgeType(typeId);\n\n    } else {\n\n      return;\n\n    }\n\n    this.hidePopups(0, true);\n\n  }\n\n  handleEditEdgeType(type) {\n\n    if (!this.editorMode) return;\n\n    const behaviour = $tm.config.sys.edgeClickBehaviour;\n    if (behaviour !== 'manager') return;\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-manage-edge-types',\n      paramObject: {\n        type: type\n      }\n    });\n\n  };\n\n  /**\n   * Listener will be removed if the parent is not part of the dom anymore\n   *\n   * @see https://groups.google.com/d/topic/tiddlywikidev/yuQB1KwlKx8/discussion [TW5] Is there a destructor for widgets?\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\n   */\n  handleResizeEvent(event) {\n\n    if (this.isZombieWidget()) return;\n\n    let height = this.getAttr('height');\n    let width = this.getAttr('width');\n\n    if (this.isInSidebar) {\n\n      const rect = this.domNode.getBoundingClientRect();\n      const distRight = 15;\n      width = (document.body.clientWidth - rect.left - distRight) + 'px';\n\n      const distBottom = parseInt(this.getAttr('bottom-spacing')) || 15;\n      const calculatedHeight = window.innerHeight - rect.top;\n      height = (calculatedHeight - distBottom) + 'px';\n\n    }\n\n    this.domNode.style.height = height || '300px';\n    this.domNode.style.width = width;\n\n    this.repaintGraph(); // redraw graph\n\n  }\n\n  /**\n   * used to prevent nasty deletion as edges are not unselected when leaving vis\n   */\n  handleClickEvent(evt) {\n\n    if (this.isZombieWidget() || !this.network) return;\n\n    if (!this.graphDomNode.contains(evt.target)) { // clicked outside\n\n      const selected = this.network.getSelection();\n      if (selected.nodes.length || selected.edges.length) {\n        this.logger('debug', 'Clicked outside; deselecting nodes/edges');\n        // upstream bug: this.network.unselectAll() doesn't work\n        this.network.selectNodes([]); // deselect nodes and edges\n        this.resetVisManipulationBar();\n      }\n\n    } else {\n\n      this.canvas.focus();\n\n    }\n\n    if (evt.button !== 2) { // not the right button\n      this.contextMenu.hide(0, true);\n    }\n\n  }\n\n  handleVisSelectNode({ nodes }) {\n\n    if (!this.isDraggingAllowed(nodes)) {\n      return;\n    }\n\n    // assign selected style\n    this.assignActiveStyle(nodes);\n\n  }\n\n  isDraggingAllowed({ nodes }) {\n    return (\n      this.editorMode || this.view.isEnabled('physics_mode')\n    );\n  }\n\n  /**\n   * Assign some styles when the graph element becomes active, i.e.\n   * it is selected or hovered over.\n   *\n   * @param {Id|Array<Id>} nodeIds - A single id or an Array of ids.\n   */\n  assignActiveStyle(nodeIds) {\n\n    if (!Array.isArray(nodeIds)) nodeIds = [ nodeIds ];\n\n    const defaultColor = this.visOptions.nodes.color;\n\n    // iterate over selected nodes\n    for (let i = nodeIds.length; i--;) {\n      const id = nodeIds[i];\n      const node = this.graphData.nodesById[id];\n      const colorObj = utils.merge({}, defaultColor, node.color);\n      this.graphData.nodes.update({\n        id: id,\n        color: {\n          highlight: colorObj,\n          hover: colorObj\n        }\n      });\n    }\n\n  }\n\n  handleVisDeselectNode(properties) {\n\n    //~ var prevSelectedNodes = properties.previousSelection.nodes;\n    //~ for (var i = prevSelectedNodes.length; i--;) {\n    //~ };\n\n  }\n\n  /**\n   * Called by vis when the dragging of a node(s) has ended.\n   * Vis passes an object containing event-related information.\n   *\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragEnd({ nodes }) {\n\n    if (!nodes.length) {\n      return;\n    }\n\n    if (nodes.length === 1 && this.view.isEnabled('raster')) {\n      const pos = this.network.getPositions()[nodes[0]];\n      this.graphData.nodes.update({\n        id: nodes[0],\n        ...utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster'))),\n      });\n    }\n\n    // reset store\n    this.draggedNode = null;\n\n    // fix node again and store positions\n    // if in static mode, fixing will be ignored\n    this.setNodesMoveable(nodes, false);\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisBeforeDrawing(context2d) {\n\n    const { view, network, backgroundImage } = this;\n\n    if (backgroundImage) {\n      context2d.drawImage(backgroundImage, 0, 0);\n    }\n\n    if (view.isEnabled('raster')) {\n      utils.drawRaster(\n        context2d,\n        network.getScale(),\n        network.getViewPosition(),\n        parseInt(view.getConfig('raster'))\n      );\n    }\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisAfterDrawing(context2d) {\n\n    if (this.selectRect) {\n\n      const rect = this.selectRect.getRect();\n\n      context2d.beginPath();\n      context2d.globalAlpha = 0.5;\n      context2d.fillStyle = '#EAFFEF';\n      context2d.fillRect(...rect);\n\n      context2d.beginPath();\n      context2d.globalAlpha = 1;\n      context2d.strokeStyle = '#B4D9BD';\n      context2d.strokeRect(...rect);\n\n    }\n\n    if (this.draggedNode && this.view.isEnabled('raster')) {\n\n      const pos = this.network.getPositions()[this.draggedNode];\n      const rPos = utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster')));\n\n      context2d.strokeStyle = 'green';\n      context2d.fillStyle = 'green';\n\n      context2d.beginPath();\n      context2d.moveTo(pos.x, pos.y);\n      context2d.lineTo(rPos.x, rPos.y);\n      context2d.stroke();\n      context2d.beginPath();\n      context2d.arc(rPos.x, rPos.y, 5, 0, Math.PI * 2);\n      context2d.fill();\n\n    }\n\n  }\n\n  /**\n   * called by tooltip class when tooltip is displayed;\n   */\n  constructTooltip(signature, div) {\n\n    const ev = utils.parseJSON(signature);\n    const id = ev.node || ev.edge;\n\n    let text = null;\n    const outType = 'text/html';\n    const inType = 'text/vnd-tiddlywiki';\n\n    if (ev.node) { // node\n\n      const tRef = $tm.tracker.getTiddlerById(id);\n      const tObj = utils.getTiddler(tRef);\n\n      const descr = tObj.fields[$tm.field.nodeInfo];\n\n      if (descr) {\n\n        div.innerHTML = $tw.wiki.renderText(outType, inType, descr);\n\n      } else if (tObj.fields.text) {\n\n        // simply rendering the text is not sufficient as this prevents\n        // us from updating the tooltip content on refresh. So we need\n        // to create a temporary widget that is registered to the dom\n        // node passed by the tooltip.\n\n        utils.registerTransclude(this, 'tooltipWidget', tRef);\n        this.tooltipWidget.setVariable('tv-tiddler-preview', 'yes');\n        this.tooltipWidget.render(div);\n\n      } else {\n\n        div.innerHTML = tRef;\n\n      }\n\n    } else { // edge\n\n      const edge = this.graphData.edgesById[id];\n      const type = $tm.indeces.allETy[edge.type];\n\n      if (type.description) {\n        text = $tw.wiki.renderText(outType, inType, type.description);\n      }\n\n      div.innerHTML = (text || type.label || type.id);\n\n    }\n\n  }\n\n  handleVisHoverElement(ev) {\n\n    if ($tm.mouse.buttons) return;\n\n    //~ this.graphDomNode.style.cursor = 'pointer';\n\n    const id = ev.node || ev.edge;\n    const signature = JSON.stringify(ev);\n\n    if (ev.node) {\n\n      // override the hover color\n      this.assignActiveStyle(id);\n\n    }\n\n    // show tooltip if not in edit mode\n    if (!this.isVisInEditMode() && !this.contextMenu.isShown()) {\n      const populator = this.constructTooltip;\n      this.tooltip.show(signature, populator);\n    }\n\n  }\n\n  handleVisBlurElement(ev) {\n\n    this.tooltip.hide();\n\n  }\n\n  handleVisLoading({ total, iterations }) {\n\n    // we only start to show the progress bar after a while\n    //~ if (params.iterations / params.total < 0.05) return;\n\n    this.graphLoadingBarDomNode.style.display = 'block';\n    this.graphLoadingBarDomNode.setAttribute('max', total);\n    this.graphLoadingBarDomNode.setAttribute('value', iterations);\n\n    //~ var text = 'Loading ' + Math.round((iterations / total) * 100) + '%';\n    //~ this.graphLoadingBarDomNode.innerHTML = text;\n\n  }\n\n  handleVisLoadingDone(params) {\n\n    this.graphLoadingBarDomNode.style.display = 'none';\n\n  }\n\n   /**\n   * Called by vis when a node is being dragged.\n   * Vis passes an object containing event-related information.\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragStart({ nodes }) {\n\n    if (\n      !nodes.length ||\n      // we do not allow nodes to be dragged if not in editor mode\n      // except cases physics is enabled\n      !this.isDraggingAllowed(nodes)\n    ) {\n      return;\n    }\n\n    this.hidePopups(0, true);\n    this.assignActiveStyle(nodes);\n    this.setNodesMoveable(nodes, true);\n\n    if (nodes.length === 1) {\n      this.draggedNode = nodes[0];\n    }\n  }\n\n  /**\n   * called from outside.\n   */\n  destruct() {\n\n    // while the container should be destroyed and the listeners\n    // garbage collected, we remove them manually just to be save\n\n    utils.setDomListeners('remove', window, this.windowDomListeners);\n    utils.setDomListeners('remove', this.domNode, this.widgetDomListeners);\n\n    this._destructVis();\n\n  }\n\n  /**\n   * Only destructs stuff related to vis.\n   */\n  _destructVis() {\n\n    if (!this.network) return;\n\n    utils.setDomListeners('remove', this.canvas, this.canvasDomListeners);\n\n    this.network.destroy();\n    this.network = null;\n\n  }\n\n  /**\n   * Opens the tiddler that corresponds to the given id either as\n   * modal (when in fullscreen mode) or in the story river.\n   */\n  openTiddlerWithId(id) {\n\n    const tRef = $tm.tracker.getTiddlerById(id);\n\n    this.logger('debug', 'Opening tiddler', tRef, 'with id', id);\n\n    if (this.enlargedMode === 'fullscreen') {\n\n      let draftTRef = $tw.wiki.findDraft(tRef);\n      const wasInDraftAlready = !!draftTRef;\n\n      if (!wasInDraftAlready) {\n\n        const type = 'tm-edit-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n        draftTRef = $tw.wiki.findDraft(tRef);\n\n      }\n\n      const args = { draftTRef, originalTRef: tRef };\n\n      $tm.dialogManager.open('fullscreenTiddlerEditor', args, (isConfirmed, outTObj) => {\n\n        if (isConfirmed) {\n\n          const type = 'tm-save-tiddler';\n          this.dispatchEvent({ type: type, tiddlerTitle: draftTRef });\n\n        } else if (!wasInDraftAlready) {\n\n          // also removes the draft from the river before deletion!\n          utils.deleteTiddlers([ draftTRef ]);\n\n        }\n\n        // in any case, remove the original tiddler from the river\n        const type = 'tm-close-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n\n      });\n\n    } else {\n\n      const bounds = this.domNode.getBoundingClientRect();\n\n      this.dispatchEvent({\n        type: 'tm-navigate',\n        navigateTo: tRef,\n        navigateFromTitle: this.getVariable('storyTiddler'),\n        navigateFromNode: this,\n        navigateFromClientRect: {\n          top: bounds.top,\n          left: bounds.left,\n          width: bounds.width,\n          right: bounds.right,\n          bottom: bounds.bottom,\n          height: bounds.height\n        }\n      });\n\n    }\n  }\n\n  /**\n   * The view holder is a tiddler that stores a references to the current\n   * view. If the graph is not bound to a view by the user via an\n   * attribute, the default view holder is used. Otherwise, a temporary\n   * holder is created whose value is set to the view specified by the user.\n   * This way, the graph is independent from view changes made in a\n   * tiddlymap editor.\n   *\n   * This function will only calculate a new reference to the holder\n   * on first call (that is when no view holder is registered to 'this'.\n   *\n   */\n  getViewHolderRef() {\n\n    // the viewholder is never recalculated once it exists\n    if (this.viewHolderRef) {\n      return this.viewHolderRef;\n    }\n\n    this.logger('info', 'Retrieving or generating the view holder reference');\n\n    // if given, try to retrieve the viewHolderRef by specified attribute\n    const viewName = this.getAttr('view');\n    let holderRef = null;\n\n    if (viewName) {\n\n      this.logger('log', `User wants to bind view \"${viewName}' to graph`);\n\n      const viewRef = `${$tm.path.views}/${viewName}`;\n\n      if ($tw.wiki.getTiddler(viewRef)) {\n\n        // create a view holder that is exclusive for this graph\n\n        holderRef = `${$tm.path.localHolders}/${utils.genUUID()}`;\n        this.logger('log', `Created an independent temporary view holder \"${holderRef}\"`);\n\n        // we do not use setView here because it would store and reload the view unnecessarily...\n        utils.setText(holderRef, viewRef);\n\n        this.logger('log', `View \"${viewRef}' inserted into independend holder`);\n\n      } else {\n        this.logger('log', `View \"${viewName}\" does not exist`);\n      }\n\n    }\n\n    if (!holderRef) {\n      this.logger('log', 'Using default (global) view holder');\n      holderRef = $tm.ref.defaultViewHolder;\n    }\n\n    return holderRef;\n\n  }\n\n  /**\n   * This function will switch the current view reference of the\n   * view holder.\n   *\n   * NOTE:\n   * The changes will be picked up in the next refresh cycle.\n   * This function will never update the view object currently\n   * held by this widget (this.view)! This would create a race\n   * condition where the view has changed, but the graph data hasn't\n   * and maybe a stabilization event fires in this moment. At this point\n   * it would work with graph data that doesn't relate to the view\n   * and do bad things, trust me, big time bad things.\n   *\n   * @param {ViewAbstraction|string} view – A reference to the view.\n   * @param {string} [viewHolderRef] – A reference to the view holder.\n   */\n  setView(view, viewHolderRef) {\n\n    if (!ViewAbstraction.exists(view)) {\n\n      return;\n    }\n\n    view = new ViewAbstraction(view);\n\n    const viewLabel = view.getLabel();\n    viewHolderRef = viewHolderRef || this.viewHolderRef;\n    this.logger('info', `Inserting view \"${viewLabel}\" into holder \"${viewHolderRef}\"`);\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title : viewHolderRef,\n      text : viewLabel\n    }));\n\n    // we don't wait til next render-cycle (which would leave tiddlymap in\n    // a rather undefined state) but update immediately.\n    this.update({\n      changedTiddlers: {\n        [viewHolderRef]: true\n      }\n    });\n  }\n\n  /**\n   * This function will return a view abstraction that is based on the\n   * view specified in the view holder of this graph.\n   *\n   * @param {boolean} noCache - Retrieve the view reference again\n   *     from the holder and recreate the view abstraction object.\n   * @return {ViewAbstraction} the view\n   */\n  getView(noCache) {\n\n    if (!noCache && this.view) {\n      return this.view;\n    }\n\n    const viewHolderRef = this.getViewHolderRef();\n\n    // transform into view object\n    const ref = utils.getText(viewHolderRef);\n\n    this.logger('debug', 'Retrieved view from holder');\n\n    let view;\n\n    if (ViewAbstraction.exists(ref)) {\n\n      view = new ViewAbstraction(ref);\n\n    } else {\n\n      this.logger('debug', `Warning: View \"${ref}\" doesn't exist. Default is used instead.`);\n      view = new ViewAbstraction('Default');\n\n    }\n\n    return view;\n\n  }\n\n  reloadBackgroundImage(msg) {\n\n    this.backgroundImage = null;\n\n    const bgFieldValue = this.view.getConfig('background_image');\n    const imgTObj = utils.getTiddler(bgFieldValue);\n    if (!imgTObj && !bgFieldValue) return;\n\n    const img = new Image();\n    const ajaxCallback = function(b64) { img.src = b64; };\n    img.onload = () => {\n      // only now set the backgroundImage to the img object!\n      this.backgroundImage = img;\n      this.repaintGraph();\n    };\n\n    if (imgTObj) { // try loading from tiddler\n      const urlField = imgTObj.fields['_canonical_uri'];\n      if (urlField) { // try loading by uri field\n        utils.getImgFromWeb(urlField, ajaxCallback);\n      } else if (imgTObj.fields.text) { // try loading from base64\n        img.src = $tw.utils.makeDataUri(imgTObj.fields.text, imgTObj.fields.type);\n      }\n\n    } else if (bgFieldValue) { // try loading directly from reference\n      utils.getImgFromWeb(bgFieldValue, ajaxCallback);\n\n    }\n\n  }\n\n  /**\n   * The graph of this widget is only repainted if the following counts:\n   *\n   * The network object exists (prerequisit).\n   *\n   * 1. We are not in fullscreen at all\n   * 2. This particular graph instance is currently running fullscreen.\n   */\n  repaintGraph() {\n\n    const isInFS = $tw.utils.hasClass(this.document.body,\n                                    'tmap-has-fullscreen-widget');\n    if (this.network && (!isInFS || (isInFS && this.enlargedMode))) {\n\n      this.logger('info', 'Repainting the whole graph');\n\n      this.network.redraw();\n      this.fitGraph(0, 1000);\n\n    }\n\n  }\n\n  /**\n   * If a button is enabled it means it is displayed on the graph canvas.\n   *\n   * @param {string} name - The name of the button to enabled. Has to\n   *     correspond with the css button name.\n   * @param {boolean} enable - True if the button should be visible,\n   *     false otherwise.\n   */\n  setGraphButtonEnabled(name, enable) {\n\n    const className = `vis-button tmap-${name}`;\n    const b = utils.getFirstElementByClassName(className, this.domNode);\n    $tw.utils.toggleClass(b, 'tmap-button-enabled', enable);\n\n  }\n\n  /**\n   * Allow the given nodes to be moveable.\n   *\n   * @param {Array<number>} nodeIds - The ids of the nodes for which\n   *     we allow or disallow the movement.\n   * @param {boolean} isMoveable - True, if the nodes are allowed to\n   *     move or be moved.\n   */\n  setNodesMoveable(nodeIds, isMoveable) {\n\n    if (!nodeIds || !nodeIds.length || this.view.isEnabled('physics_mode')) {\n    // = no ids passed or in floating mode\n      return;\n    }\n\n    const updates = [];\n    const isFixed = !isMoveable;\n    for (let i = nodeIds.length; i--;) {\n\n      updates.push({\n        id: nodeIds[i],\n        fixed: { x: isFixed, y: isFixed }\n      });\n\n    }\n\n    this.graphData.nodes.update(updates);\n\n    if (isFixed) {\n\n      this.logger('debug', 'Fixing', updates.length, 'nodes');\n\n      // if we fix nodes in static mode then we also store the positions\n      this.view.saveNodePositions(this.network.getPositions());\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n    }\n\n  }\n\n  /**\n   * This function will create the dom elements for all tiddlymap-vis\n   * buttons and register the event listeners.\n   *\n   * @param {Object<string, function>} buttonEvents - The label of the\n   *     button that is used as css class and the click handler.\n   */\n  addGraphButtons(buttonEvents) {\n\n    const parent = utils.getFirstElementByClassName('vis-navigation', this.domNode);\n\n    for (let name in buttonEvents) {\n      const div = this.document.createElement('div');\n      div.className = `vis-button tmap-${name}`;\n\n      div.addEventListener('click', buttonEvents[name].bind(this), false);\n      parent.appendChild(div);\n\n\n      this.setGraphButtonEnabled(name, true);\n\n    }\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport {\n  MapWidget as tmap,\n  MapWidget as tiddlymap, // legacy\n};\n"],"sourceRoot":"../../../../../../src/plugins"}