{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/EdgeListItemWidget.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_widget","require","_utils","_utils2","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","EdgeListItemWidget","_Widget","parseTreeNode","options","this","_this","getPrototypeOf","arrows","$tm","misc","execute","item","tRef","tracker","getTiddlerById","neighbour","id","edge","utils","flatten","p","setVariable","type","indeces","allETy","indexedAs","to","arrow","biArrow","invertedArrow","bi","in","out","makeChildWidgets","refresh","changedTiddlers","refreshChildren","Widget","exports"],"mappings":"AAAA,aAEA,IAAIA,aAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,YAAc,MAAOD,EAAWE,aAAe,KAAM,GAAI,UAAWF,EAAYA,EAAWG,SAAW,KAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,OAAO,SAAUO,EAAaC,EAAYC,GAAe,GAAID,EAAYb,EAAiBY,EAAYG,UAAWF,GAAa,GAAIC,EAAad,EAAiBY,EAAaE,GAAc,OAAOF,GAA7gB,GAYnB,IAAAI,QAAAC,QAAA,qCACA,IAAAC,OAAAD,QAAA,8CAPA,IAAIE,QAAUC,uBAAuBF,QAErC,SAASE,uBAAuBC,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,GAEvF,SAASG,gBAAgBC,EAAUb,GAAe,KAAMa,aAAoBb,GAAc,CAAE,MAAM,IAAIc,UAAU,sCAEhH,SAASC,2BAA2BC,EAAMC,GAAQ,IAAKD,EAAM,CAAE,MAAM,IAAIE,eAAe,6DAAgE,OAAOD,WAAgBA,IAAS,iBAAmBA,IAAS,YAAcA,EAAOD,EAEzO,SAASG,UAAUC,EAAUC,GAAc,UAAWA,IAAe,YAAcA,IAAe,KAAM,CAAE,MAAM,IAAIP,UAAU,kEAAoEO,GAAeD,EAASjB,UAAYN,OAAOyB,OAAOD,GAAcA,EAAWlB,UAAW,CAAEoB,YAAa,CAAEC,MAAOJ,EAAU1B,WAAY,MAAOE,SAAU,KAAMD,aAAc,QAAW,GAAI0B,EAAYxB,OAAO4B,eAAiB5B,OAAO4B,eAAeL,EAAUC,GAAcD,EAASM,UAAYL;;;;;;;;;;wBAgBje,IAbMM,mBAamB,SAAUC,GACjCT,UAAUQ,EAAoBC,GAZ9B,SAAAD,EAAYE,EAAeC,GAASlB,gBAAAmB,KAAAJ,GAAA,IAAAK,EAAAjB,2BAAAgB,MAAAJ,EAAAD,WAAA7B,OAAAoC,eAAAN,IAAAV,KAAAc,KAE5BF,EAAeC,IACrBE,EAAKE,OAASC,IAAIC,KAAKF,OAHW,OAAAF,EAwBpC7C,aAAawC,EAAoB,CAAC,CAChC5B,IAAK,UACLyB,MAAO,SAASa,IAjBhB,IAAMC,EAAOP,KAAKF,cAClB,IAAMU,EAAOJ,IAAIK,QAAQC,eAAeH,EAAKI,UAAUC,IAGvD,IAAMC,EAAOC,QAAAA,QAAMC,QAAQR,EAAKM,MAEhC,IAAK,IAAIG,KAAKH,EAAM,CAClB,UAAWA,EAAKG,KAAO,SAAU,CAC/BhB,KAAKiB,YAAL,QAAyBD,EAAKH,EAAKG,KAKvChB,KAAKiB,YAAY,iBAAkBT,GACnCR,KAAKiB,YAAY,YAAaT,GAE9B,IAAMU,EAAOd,IAAIe,QAAQC,OAAOP,EAAKK,MACrC,IAAMG,EAAaR,EAAKS,KAAOf,EAAKI,UAAUC,GAAK,KAAO,OAC1D,IAAIW,EAAQF,EAEZ,GAAIH,EAAKM,QAAS,CAChBD,EAAQ,SACH,CACL,GAAIF,IAAc,MAAQH,EAAKO,cAAe,CAC5CF,EAAQ,YACH,GAAIF,IAAc,QAAUH,EAAKO,cAAe,CACrDF,EAAQ,MAIZvB,KAAKiB,YAAY,YAAaM,GAC9BvB,KAAKiB,YAAY,kBAAmBM,IAAU,KAC1CvB,KAAKG,OAAOuB,GACZH,IAAU,OACRvB,KAAKG,OAAOwB,GACZ3B,KAAKG,OAAOyB,KAGlB5B,KAAK6B,qBAiBJ,CACD7D,IAAK,UACLyB,MAAO,SAASqC,EAfVC,GAEN,OAAO/B,KAAKgC,gBAAgBD,OAmB9B,OAAOnC,EA7DgB,CAbQqC,QAAAA,QA8DjCC,QAAQ,qBAAuBtC","file":"../../../../../felixhayashi/tiddlymap/js/widget/EdgeListItemWidget.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/EdgeListWidgetItem\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\nclass EdgeListItemWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n\n    super(parseTreeNode, options);\n    this.arrows = $tm.misc.arrows;\n\n  }\n\n  execute() {\n\n    const item = this.parseTreeNode;\n    const tRef = $tm.tracker.getTiddlerById(item.neighbour.id);\n\n    // make edge properties available as variables\n    const edge = utils.flatten(item.edge);\n\n    for (let p in edge) {\n      if (typeof edge[p] === 'string') {\n        this.setVariable(`edge.${p}`, edge[p]);\n      }\n    }\n\n    // Perspective: Neighbour\n    this.setVariable('currentTiddler', tRef);\n    this.setVariable('neighbour', tRef);\n\n    const type = $tm.indeces.allETy[edge.type];\n    const indexedAs = (edge.to === item.neighbour.id ? 'to' : 'from');\n    let arrow = indexedAs;\n\n    if (type.biArrow) {\n      arrow = 'bi';\n    } else {\n      if (indexedAs === 'to' && type.invertedArrow) {\n        arrow = 'from';\n      } else if (indexedAs === 'from' && type.invertedArrow) {\n        arrow = 'to';\n      }\n    }\n\n    this.setVariable('direction', arrow);\n    this.setVariable('directionSymbol', arrow === 'bi'\n      ? this.arrows.bi\n      : arrow === 'from'\n        ? this.arrows.in\n        : this.arrows.out);\n\n    // Construct the child widgets\n    this.makeChildWidgets();\n\n  }\n\n  refresh(changedTiddlers) {\n\n    return this.refreshChildren(changedTiddlers);\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexports['tmap-edgelistitem'] = EdgeListItemWidget;\n"],"sourceRoot":"../../../../../../src/plugins"}