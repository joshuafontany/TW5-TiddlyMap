{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/EdgeListWidget.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_widget","require","_utils","_utils2","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","EdgeListWidget","_Widget","parseTreeNode","options","this","getPrototypeOf","render","parent","nextSibling","parentDomNode","computeAttributes","execute","renderChildren","nodes","getVariable","filter","getAttribute","direction","allETy","$tm","indeces","matches","utils","getEdgeTypeMatches","typeWL","getLookupTable","_$tm$adapter$getNeigh","adapter","getNeighbours","neighbours","edges","entries","id","edge","neighbour","to","from","push","type","children","wasEmpty","getEmptyMessage","removeChildDomNodes","makeChildWidgets","parser","wiki","parseText","parseAsInline","tree","refresh","changedTiddlers","changedAttributes","hasElements","refreshSelf","tRef","isSystemOrDraft","refreshChildren","Widget","exports"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/widget/EdgeListWidget.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/EdgeListWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\nclass EdgeListWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n\n    super(parseTreeNode, options);\n\n  }\n\n  render(parent, nextSibling) {\n\n    this.parentDomNode = parent;\n    this.computeAttributes();\n    this.execute();\n    this.renderChildren(parent, nextSibling);\n\n  };\n\n  execute() {\n\n    const nodes = [ this.getVariable('currentTiddler') ];\n    const filter = this.getAttribute('filter', '');\n    const direction = this.getAttribute('direction', 'both');\n    const allETy = $tm.indeces.allETy;\n    const matches = utils.getEdgeTypeMatches(filter, allETy);\n\n    const options = {\n      typeWL: utils.getLookupTable(matches),\n      direction: direction\n    };\n\n    // retrieve nodes and edges\n    const { nodes: neighbours, edges } = $tm.adapter.getNeighbours(nodes, options);\n\n    let entries = [];\n    for (let id in edges) {\n\n      const edge = edges[id];\n      const neighbour = neighbours[edge.to] || neighbours[edge.from];\n\n      if (!neighbour) { // obsolete edge from old times;\n        continue;\n      }\n\n      // make item template\n      entries.push({\n        type: 'tmap-edgelistitem',\n        edge: edge,\n        typeWL: options.typeWL,\n        neighbour: neighbour,\n        // the children of this widget (=what is wrapped inside the\n        // widget-element's body) is used as template for the list items\n        children: this.parseTreeNode.children\n      });\n    }\n\n    if (!entries.length) {\n\n      this.wasEmpty = true;\n      entries = this.getEmptyMessage();\n\n    } else if (this.wasEmpty) {\n\n      // we need to remove the empty message\n      this.removeChildDomNodes();\n\n    }\n\n    this.makeChildWidgets(entries);\n\n  }\n\n  getEmptyMessage() {\n\n    const parser = this.wiki.parseText(\n      'text/vnd.tiddlywiki',\n      this.getAttribute('emptyMessage', ''),\n      { parseAsInline: true }\n    );\n\n    return parser ? parser.tree : [];\n\n  }\n\n  refresh(changedTiddlers) {\n\n    const changedAttributes = this.computeAttributes();\n\n    if (utils.hasElements(changedAttributes)) {\n\n      this.refreshSelf();\n\n      return true;\n    }\n\n    for (let tRef in changedTiddlers) {\n      if (!utils.isSystemOrDraft(tRef)) {\n\n        this.refreshSelf();\n\n        return true;\n      }\n    }\n\n    // let children decide for themselves\n    return this.refreshChildren(changedTiddlers);\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexports['tmap-connections'] = EdgeListWidget;\n"],"sourceRoot":"../../../../../../src/plugins"}