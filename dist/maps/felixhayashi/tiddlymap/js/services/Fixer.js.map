{"version":3,"sources":["felixhayashi/tiddlymap/js/services/Fixer.js"],"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","_utils","require","_utils2","_interopRequireDefault","_ViewAbstraction","_ViewAbstraction2","_EdgeType","_EdgeType2","_NodeType","_NodeType2","_environment","env","_interopRequireWildcard","__esModule","newObj","hasOwnProperty","call","default","_classCallCheck","instance","TypeError","Fixer","adapter","logger","glNTy","this","wiki","$tw","moveEdges","path","view","matches","utils","getTiddlersByPrefix","type","getBasename","EdgeType","getInstance","exists","save","edges","getTiddlerData","j","id","insertEdge","deleteTiddler","executeUpgrade","toVersion","curVersion","upgrade","isLeftVersionGreater","msg","setEntry","ref","sysMeta","fixId","meta","dataStructureState","originalVersion","userConf","nodeIdField","getEntry","moveFieldValues","fix","_this","filter","selector","allViews","viewRefs","getMatches","ViewAbstraction","getRoot","liveView","setNodeFilter","setConfig","refresh-trigger","refresh-triggers","stringifyList","confRef","visUserConf","unflatten","groups","NodeType","setStyle","setTiddlerData","liveTab","getTiddler","hasTag","setField","views","eTyFilter","getEdgeTypeFilter","confKey","getConfig","f","defaultEdgeTypeFilter","edgeTypePath","edgeTypes","replaceAll","setEdgeTypeFilter"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/services/Fixer.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/Fixer\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport utils           from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport ViewAbstraction from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType        from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport NodeType        from '$:/plugins/felixhayashi/tiddlymap/js/NodeType';\nimport * as env        from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\n\n/*** Code **********************************************************/\n\nclass Fixer {\n\n  /**\n   * @param {Adapter} adapter\n   * @param {Object} logger\n   * @param {Object} glNTy\n   */\n  constructor(adapter, logger, glNTy) {\n\n    this.adapter = adapter;\n    this.logger = logger;\n    this.wiki = $tw.wiki;\n    this.glNTy = glNTy;\n\n  }\n\n  moveEdges(path, view) {\n\n    const matches = utils.getTiddlersByPrefix(path);\n    for (let i = 0; i < matches.length; i++) {\n\n      // create edge type\n      let type = utils.getBasename(matches[i]);\n\n      if (type === '__noname__') {\n        type = 'tmap:unknown';\n      }\n\n      type = EdgeType.getInstance(type);\n\n      if (!type.exists()) {\n        type.save();\n      }\n\n      // move edges\n      const edges = this.wiki.getTiddlerData(matches[i]);\n      for (let j = 0; j < edges.length; j++) {\n        // prefix formerly private edges with view name as namespace\n        edges[j].type = (view ? view + ':' : '') + type.id;\n        this.adapter.insertEdge(edges[j]);\n      }\n\n      // finally remove the store\n      this.wiki.deleteTiddler(matches[i]);\n\n    }\n\n  }\n\n  executeUpgrade(toVersion, curVersion, upgrade) {\n\n    if (!utils.isLeftVersionGreater(toVersion, curVersion)) {\n      // = current data structure version is newer than version we want to upgrade to.\n      return;\n    }\n\n    // issue debug message\n    this.logger('debug', `Upgrading data structure to ${toVersion}`);\n    // execute fix\n    const msg = upgrade();\n    // update meta\n    utils.setEntry(env.ref.sysMeta, 'dataStructureState', toVersion);\n\n    return msg;\n\n  };\n\n  /**\n   * Special fix that is not invoked along with the other fixes but\n   * when creating the index (see caretaker code).\n   *\n   * Changes:\n   * 1. The node id field is moved to tmap.id if **original version**\n   *    is below v0.9.2.\n   */\n  fixId() {\n\n    const meta = this.wiki.getTiddlerData(env.ref.sysMeta, {});\n\n    this.executeUpgrade('0.9.2', meta.dataStructureState, () => {\n\n      if (utils.isLeftVersionGreater('0.9.2', meta.originalVersion)) {\n        // path of the user conf at least in 0.9.2\n        const userConf = '$:/plugins/felixhayashi/tiddlymap/config/sys/user';\n        const nodeIdField = utils.getEntry(userConf, 'field.nodeId', 'tmap.id');\n        utils.moveFieldValues(nodeIdField, 'tmap.id', true, false);\n      }\n    });\n\n  };\n\n  fix() {\n\n    const meta = this.wiki.getTiddlerData(env.ref.sysMeta, {});\n\n    this.logger('debug', 'Fixer is started');\n    this.logger('debug', 'Data-structure currently in use: ', meta.dataStructureState);\n\n    /**\n     * Changes:\n     * 1. Edges are stored in tiddlers instead of type based edge stores\n     * 2. No more private views\n     */\n    this.executeUpgrade('0.7.0', meta.dataStructureState, () => {\n\n      // move edges that were formerly \"global\"\n      this.moveEdges('$:/plugins/felixhayashi/tiddlymap/graph/edges', null);\n\n      // move edges that were formerly bound to view (\"private\")\n      const filter = env.selector.allViews;\n      const viewRefs = utils.getMatches(filter);\n      for (let i = 0; i < viewRefs.length; i++) {\n        const view = new ViewAbstraction(viewRefs[i]);\n        this.moveEdges(`${view.getRoot()}/graph/edges`, view);\n      }\n\n    });\n\n    /**\n     * Changes:\n     * 1. Changes to the live view filter and refresh trigger field\n     */\n    this.executeUpgrade('0.7.32', meta.dataStructureState, () => {\n\n      if (!ViewAbstraction.exists('Live View')) {\n\n        return;\n      }\n\n      const liveView = new ViewAbstraction('Live View');\n\n      // Only listen to the current tiddler of the history list\n      liveView.setNodeFilter('[field:title{$:/temp/tmap/currentTiddler}]', true);\n\n      liveView.setConfig({\n        'refresh-trigger': null, // delete the field (renamed)\n        'refresh-triggers': $tw.utils.stringifyList([ '$:/temp/tmap/currentTiddler' ]),\n      });\n\n    });\n\n    /**\n     * Changes:\n     * 1. Group styles for matches and neighbours are now modulized\n     *    and stored as node-types.\n     * 2. vis user configuration is restored unflattened!\n     *    The user only interacts through the GUI.\n     * 3. If the node id field was \"id\" it is moved to tmap.id\n     */\n    this.executeUpgrade('0.9.0', meta.dataStructureState, () => {\n\n      const confRef = env.ref.visUserConf;\n      const userConf = utils.unflatten(this.wiki.getTiddlerData(confRef, {}));\n\n      if (typeof userConf.groups === 'object') {\n\n        const type = NodeType.getInstance('tmap:neighbour');\n        type.setStyle(userConf.groups[ 'neighbours' ]);\n        type.save();\n\n        delete userConf.groups;\n        this.wiki.setTiddlerData(confRef, userConf);\n\n      }\n\n    });\n\n    /**\n     * Changes:\n     * 1. The node id field is moved to tmap.id if **original version**\n     *    is below v0.9.2.\n     */\n    this.fixId();\n\n\n    /**\n     * This will ensure that all node types have a prioritization field\n     * set.\n     */\n    this.executeUpgrade('0.9.16', meta.dataStructureState, () => {\n\n      for (let i = this.glNTy.length; i--;) {\n        this.glNTy[i].save(null, true);\n      }\n\n    });\n\n    /**\n     * Fixes the live tab\n     */\n    this.executeUpgrade('0.10.3', meta.dataStructureState, function () {\n\n      const liveTab = env.ref.liveTab;\n      if (utils.getTiddler(liveTab).hasTag('$:/tags/SideBar')) {\n        this.wiki.deleteTiddler(liveTab);\n        utils.setField(liveTab, 'tags', '$:/tags/SideBar');\n      }\n\n    });\n\n    /**\n     * 1) Fixes the edge type filter. Before, an empty filter was\n     * treated as default filter, i.e. no links and tags shown.\n     * Now an empty filter means that we show all edge types.\n     *\n     * 2) Adds prefix to hide private edges per default\n     *\n     * 3) Corrects view-namespaces (formerly stored with colon).\n     *\n     */\n    this.executeUpgrade('0.11.0', meta.dataStructureState, function () {\n\n      const views = utils.getMatches(env.selector.allViews);\n\n      for (let i = views.length; i--;) {\n\n        const view = new ViewAbstraction(views[i]);\n        let eTyFilter = view.getEdgeTypeFilter('raw');\n        const confKey = 'edge_type_namespace';\n        view.setConfig(confKey, view.getConfig(confKey));\n\n        let f = env.filter.defaultEdgeTypeFilter;\n\n        if (eTyFilter) {\n\n          // remove any occurences of the egde type path prefix\n          const edgeTypePath = env.path.edgeTypes;\n          eTyFilter = utils.replaceAll(eTyFilter, '', [\n            edgeTypePath,\n            edgeTypePath + '/',\n            '[prefix[' + edgeTypePath + ']]',\n            '[prefix[' + edgeTypePath + '/]]',\n            [ '[suffix[tw-body:link]]', '[[tw-body:link]]' ],\n            [ '[suffix[tw-list:tags]]', '[[tw-list:tags]]' ],\n            [ '[suffix[tw-list:list]]', '[[tw-body:list]]' ],\n            [ '[suffix[tmap:unknown]]', '[[tmap:unknown]]' ],\n            [ '[suffix[unknown]]', '[[tmap:unknown]]' ],\n          ]);\n\n          f = '-[prefix[_]] ' + eTyFilter;\n\n        }\n\n        view.setEdgeTypeFilter(f);\n      }\n\n    });\n\n  };\n}\n\n/*** Exports *******************************************************/\n\nexport default Fixer;\n\n"],"sourceRoot":"../../../../../../src/plugins"}