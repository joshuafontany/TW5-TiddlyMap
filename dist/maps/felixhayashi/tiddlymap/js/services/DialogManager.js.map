{"version":3,"sources":["felixhayashi/tiddlymap/js/services/DialogManager.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_utils","require","_utils2","_interopRequireDefault","_CallbackManager","_CallbackManager2","obj","__esModule","default","_classCallCheck","instance","TypeError","DialogManager","callbackManager","context","this","open","templateId","param","arguments","undefined","callback","utils","isTrue","$tm","config","sys","suppressedDialogs","logger","bind","dialogTRef","path","tempRoot","genUUID","skeleton","getTiddler","dialogs","dialog","title","buttons","fields","classes","output","result","temp","template","currentTiddler","text","getText","touch","preselects","$tw","wiki","addTiddler","Tiddler","flatten","merge","footer","footers","fn","tRef","getElement","click","triggerTObj","isConfirmed","outputTObj","notify","deleteByPrefix","add","dialogTiddler","rootWidget","dispatchEvent","type","paramObject","addKeyBindings","name","getFirstElementByClassName","keys","keycharm","container","re","triggers","document","getElementsByClassName","_loop","classNames","className","split","_loop2","j","matches","match","buttonName","buttonElement","_ret2"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/services/DialogManager.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/DialogManager\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\nimport utils           from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport CallbackManager from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\n\n/**\n * The DialogManager is responsible for preparing, displaying and\n * finalizing all the dialogs.\n */\nclass DialogManager {\n\n  /**\n   * @param {CallbackManager} callbackManager - A callback manager that\n   *     is informed about changed tiddlers and keeps track of the\n   *     various tiddlers produced during the dialog process.\n   * @param {Object} [context] - An optional *this*-reference to bind the\n   *     callback of each called dialog to. Otherwise, the callback of\n   *     each dialog has to be bound manually to the callback if required.\n   */\n  constructor(callbackManager, context) {\n\n    // create callback registry\n    this.callbackManager = callbackManager;\n    this.context = context;\n\n  }\n\n  /**\n   * This function opens a dialog based on a skeleton and some fields and eventually\n   * calls a callback once the dialog is closed. The callback contains an indicator\n   * whether the dialog subject was confirmed or the operation cancelled. In any\n   * case the output tiddler is passed to the callback. Each dialog may write its\n   * changes to this tiddler in order to store the dialog result and make it available\n   * to the callback.\n   *\n   * How does it work?\n   *\n   * The output of the dialog process is stored in a temporary tiddler that is only known\n   * to the current instance of the dialog. This way it is ensured that only the dialog process\n   * that created the temporary tiddler will retrieve the result. Now we are able to\n   * provide unambigous and unique correspondance to dialog callbacks.\n\n   * Any dialog output is stored in a unique output-tiddler. Once there is a result,\n   * a new result tiddler is created with indicators how to interpret the output.\n   * The result tiddler can be understood as exit code that is independent of the output.\n   * It is the result tiddler that triggers the dialog callback that was registered before.\n   * the output is then read immediately from the output-tiddler.\n   *\n   * @param {string} templateId - The dialog id which is the basename of\n   *     the template title.\n   * @param {Hashmap} [param] - All properties (except those with special meanings)\n   *     of param will be accessible as variables in the modal\n   * @param {string} [param.subtitle] -\n   * @param {string} [param.cancelButtonLabel] - The label of the cancel button.\n   * @param {string} [param.confirmButtonLabel] - The label of the confirm button.\n   * @param {function} [callback] - A function with the signature\n   *     function(isConfirmed, outputTObj). `outputTObj` contains data\n   *     produced by the dialog (can be undefined even if confirmed!).\n   *     Be careful: the tiddler that outputTObj represents is deleted immediately.\n   * @return {$tw.Tiddler} The dialog tddler object with all its fields.\n   */\n  open(templateId, param = {}, callback) {\n\n    if (utils.isTrue($tm.config.sys.suppressedDialogs[templateId], false)) {\n      $tm.logger('warning', 'Suppressed dialog', templateId);\n      return;\n    }\n\n    $tm.logger('debug', 'Dialog param object', param);\n\n    if (typeof callback === 'function' && this.context) {\n      callback = callback.bind(this.context);\n    }\n\n    // create a temporary tiddler reference for the dialog\n    const dialogTRef = `${$tm.path.tempRoot}/dialog-${utils.genUUID()}`;\n\n    // get the dialog template\n    const skeleton = utils.getTiddler(`${$tm.path.dialogs}/${templateId}`);\n\n    // fields used to handle the dialog process\n    let dialog = {\n      title: dialogTRef,\n      buttons: skeleton.fields['buttons'] || 'ok_cancel',\n      classes: 'tmap-modal-content ' + skeleton.fields['classes'],\n      output: dialogTRef + '/output',\n      result: dialogTRef + '/result',\n      temp: dialogTRef + '/temp',\n      template: skeleton.fields.title,\n      templateId: templateId,\n      currentTiddler: dialogTRef + '/output',\n      text: utils.getText($tm.path.dialogs)\n    };\n\n    utils.touch(dialog.output);\n\n    if (param.dialog) {\n\n      if (param.dialog.preselects) {\n\n        // register preselects\n        $tw.wiki.addTiddler(new $tw.Tiddler(\n          {title: dialog.output},\n          utils.flatten(param.dialog.preselects)\n        ));\n\n        // remove preselects from param object\n        delete param.dialog.preselects;\n\n      }\n\n      // extend the dialog object with parameters provided by the user\n      utils.merge(dialog, param.dialog);\n\n    }\n\n    // force the footer to be set to the wrapper\n    // the footer wrapper will determine the footer from the\n    // buttons field/variable\n    dialog.footer = utils.getText($tm.path.footers);\n\n    // flatten dialog and param object\n    dialog = utils.flatten(dialog);\n    param = utils.flatten(param);\n\n    const fn = tRef => {\n\n      DialogManager.getElement('hidden-close-button').click();\n\n      const triggerTObj = $tw.wiki.getTiddler(tRef);\n      const isConfirmed = triggerTObj.fields.text;\n\n      let outputTObj = null;\n      if (isConfirmed) {\n        outputTObj = $tw.wiki.getTiddler(dialog.output);\n      } else {\n        $tm.notify('operation cancelled');\n      }\n\n      if (typeof callback === 'function') {\n        callback(isConfirmed, outputTObj);\n      }\n\n      // close and remove all tiddlers used by the dialog\n      utils.deleteByPrefix(dialogTRef);\n\n    };\n\n    // add trigger\n    this.callbackManager.add(dialog.result, fn, true);\n\n\n    // create dialog\n    const dialogTiddler = new $tw.Tiddler(skeleton, param, dialog);\n    $tw.wiki.addTiddler(dialogTiddler);\n\n    $tm.logger('debug', 'Opening dialog', dialogTiddler);\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tm-modal',\n      param: dialogTiddler.fields.title,\n      paramObject: dialogTiddler.fields\n    });\n\n    DialogManager.addKeyBindings();\n\n    return dialogTiddler;\n\n  };\n\n  static getElement(name) {\n\n    return utils.getFirstElementByClassName('tmap-' + name);\n\n  }\n\n  /**\n   * This method will search for form elements that have the class\n   * `tmap-trigger-field` set, which means that TiddlyMap shall\n   * perform a button press when a key combo occurs while the field\n   * has focus. To know which button to press on what key event,\n   * it looks for classes of the form: tmap-triggers-BUTTONNAME-on-KEYCOMBO.\n   */\n  static addKeyBindings() {\n\n    const keys = $tm.keycharm({\n      container: utils.getFirstElementByClassName('tc-modal')\n    });\n\n    const re = /tmap-triggers-(.+?)-on-(.+?)(?:\\s|$)/;\n    const triggers = document.getElementsByClassName('tmap-trigger-field');\n\n    for (let i = triggers.length; i--;) {\n      const classNames = triggers[i].className.split(' ');\n      for (let j = classNames.length; j--;) {\n        const matches = classNames[j].match(re);\n        if (!matches) { // don't care\n          continue;\n        }\n        const buttonName = matches[1];\n        const key = matches[2];\n        const buttonElement = DialogManager.getElement(buttonName);\n        if (!buttonElement) {\n          continue;\n        }\n        keys.bind(key, () => {\n          if (document.getElementsByClassName(classNames[j]).length) {\n            // only click button if trigger is active (i.e. still in focus)\n            // see https://github.com/felixhayashi/TW5-TiddlyMap/issues/280\n            buttonElement.click();\n          }\n        });\n      }\n    }\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport default DialogManager;\n"],"sourceRoot":"../../../../../../src/plugins"}