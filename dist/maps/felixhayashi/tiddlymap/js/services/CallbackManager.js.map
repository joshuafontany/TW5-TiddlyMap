{"version":3,"sources":["felixhayashi/tiddlymap/js/services/CallbackManager.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_utils","require","_utils2","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","TypeError","CallbackManager","this","callbacks","utils","makeHashMap","logger","$tm","wiki","$tw","add","tRef","callback","isDeleteOnCall","arguments","undefined","execute","remove","refOrRefList","refresh","changedTiddlers","getTiddler"],"mappings":"AAAA,aAEAA,OAAOC,eAAeC,QAAS,aAAc,CAC3CC,MAAO,OAGT,IAAIC,aAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,YAAc,MAAOD,EAAWE,aAAe,KAAM,GAAI,UAAWF,EAAYA,EAAWG,SAAW,KAAMb,OAAOC,eAAeK,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAe,GAAID,EAAYX,EAAiBU,EAAYG,UAAWF,GAAa,GAAIC,EAAaZ,EAAiBU,EAAaE,GAAc,OAAOF,GAA7gB;;;;;;;;;;wBAMnB,IAAAI,OAAAC,QAAA,8CAQA,IAAIC,QAAUC,uBAAuBH,QAErC,SAASG,uBAAuBC,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,GAEvF,SAASG,gBAAgBC,EAAUZ,GAAe,KAAMY,aAAoBZ,GAAc,CAAE,MAAM,IAAIa,UAAU,sCAKhH,IAZMC,gBAYgB,WAVpB,SAAAA,IAAcH,gBAAAI,KAAAD,GACZC,KAAKC,UAAYC,QAAAA,QAAMC,cACvBH,KAAKI,OAASC,IAAID,OAClBJ,KAAKM,KAAOC,IAAID,KA8BlBhC,aAAayB,EAAiB,CAAC,CAC7Bf,IAAK,MACLX,MAAO,SAASmC,EAjBdC,EAAMC,GAAiC,IAAvBC,EAAuBC,UAAAjC,OAAA,GAAAiC,UAAA,KAAAC,UAAAD,UAAA,GAAN,KAEnCZ,KAAKI,OAAO,QAAZ,6CAAkEK,EAAlE,KACAT,KAAKC,UAAUQ,GAAQ,CACrBK,QAASJ,EACTC,eAAAA,KAsBD,CACD3B,IAAK,SAMLX,MAAO,SAAS0C,EArBXC,GAEL,IAAKA,EAAc,CACjB,OAGF,UAAWA,IAAiB,SAAU,CACpCA,EAAe,CAAEA,GAGnB,IAAK,IAAItC,EAAIsC,EAAarC,OAAQD,KAAM,CACtC,IAAM+B,EAAOO,EAAatC,GAC1B,GAAIsB,KAAKC,UAAUQ,GAAO,CACxBT,KAAKI,OAAO,QAAZ,0BAA+CK,EAA/C,YACOT,KAAKC,UAAUQ,OAyBzB,CACDzB,IAAK,UAULX,MAAO,SAAS4C,EAvBVC,GAEN,GAAIlB,KAAKC,UAAUtB,QAAU,EAAG,CAC9B,OAGF,IAAK,IAAI8B,KAAQS,EAAiB,CAEhC,IAAKlB,KAAKC,UAAUQ,GAAO,CACzB,SAGF,GAAIT,KAAKM,KAAKa,WAAWV,GAAO,CAE9BT,KAAKI,OAAO,QAAZ,6BAAkDK,GAClDT,KAAKC,UAAUQ,GAAMK,QAAQL,GAG7B,IAAKT,KAAKC,UAAUU,eAAgB,CAClC,UAIJX,KAAKe,OAAON,QA4BhB,OAAOV,EAnGa,GAwGtB3B,QAAQuB,QAzBOI","file":"../../../../../felixhayashi/tiddlymap/js/services/CallbackManager.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/CallbackManager\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/**\n * Makes it possible to register callbacks for tiddler changes.\n */\nclass CallbackManager {\n\n  constructor() {\n    this.callbacks = utils.makeHashMap();\n    this.logger = $tm.logger;\n    this.wiki = $tw.wiki;\n  }\n\n  /**\n   * The callback mechanism allows to dynamically listen to tiddler\n   * changes without hardcoding a change-check for a tiddler name\n   * in the refresh function.\n   *\n   * @param {TiddlerReference} tRef - A tiddler whose change triggers\n   *     the callback.\n   * @param {function} callback - A function that is called when the\n   *     tiddler has changed.\n   * @param {boolean} [isDeleteOnCall=true] - True if to delete the\n   *     callback once it has been called, false otherwise.\n   */\n  add(tRef, callback, isDeleteOnCall = true) {\n\n    this.logger('debug', `A callback was registered for changes of \"${tRef}\"`);\n    this.callbacks[tRef] = {\n      execute: callback,\n      isDeleteOnCall\n    };\n\n  };\n\n  /**\n   * Removes the callback from the list of tiddler callbacks.\n   */\n  remove(refOrRefList) {\n\n    if (!refOrRefList) {\n      return;\n    }\n\n    if (typeof refOrRefList === 'string') {\n      refOrRefList = [ refOrRefList ];\n    }\n\n    for (let i = refOrRefList.length; i--;) {\n      const tRef = refOrRefList[i];\n      if (this.callbacks[tRef]) {\n        this.logger('debug', `Deleting callback for \"${tRef}\"`);\n        delete this.callbacks[tRef];\n      }\n    }\n\n  };\n\n  /**\n   * this method has to be implemented at the top of the refresh method.\n   * It checks for changed tiddlers that have\n   * registered callbacks. If `deleteOnCall` was specified during\n   * registration of the callback, the callback will be deleted\n   * automatically.\n   */\n  refresh(changedTiddlers) {\n\n    if (this.callbacks.length == 0) {\n      return;\n    }\n\n    for (let tRef in changedTiddlers) {\n\n      if (!this.callbacks[tRef]) {\n        continue;\n      }\n\n      if (this.wiki.getTiddler(tRef)) {\n\n        this.logger('debug', `Executing a callback for: ${tRef}`);\n        this.callbacks[tRef].execute(tRef);\n\n        // a continue prevents deleting the callback\n        if (!this.callbacks.isDeleteOnCall) {\n          continue;\n        }\n      }\n\n      this.remove(tRef);\n    }\n\n  };\n}\n\n/*** Exports *******************************************************/\n\nexport default CallbackManager;\n"],"sourceRoot":"../../../../../../src/plugins"}