{"version":3,"sources":["felixhayashi/tiddlymap/js/services/Listener.js"],"names":["Object","defineProperty","exports","value","startup","synchronous","before","after","platforms","name","undefined","_NodeType","require","_NodeType2","_interopRequireDefault","_EdgeType","_EdgeType2","_Edge","_Edge2","_utils","_utils2","_vis","_vis2","obj","__esModule","default","handleCancelDialog","_ref","param","utils","setField","handleClearTiddler","_ref2","arguments","length","paramObject","title","keep","tObj","getTiddler","originalFields","fields","fieldsToKeep","split","cloneFields","text","i","fieldName","$tw","wiki","deleteTiddler","addTiddler","Tiddler","handleMixTiddlers","_ref3","_ref3$paramObject","tiddlersStringArray","tiddlers","output","parseStringArray","getMergedTiddlers","handleConfirmDialog","_ref4","handleSuppressDialog","_ref5","dialog","suppress","isTrue","setEntry","$tm","ref","sysUserConf","handleDownloadGraph","_ref6","view","graph","adapter","getGraph","nodes","convert","edges","tRef","JSON","stringify","rootWidget","dispatchEvent","type","filename","handleConfigureSystem","allTiddlers","getMatches","selector","allPotentialNodes","allEdges","getEdgesForSet","plugin","path","pluginRoot","meta","getTiddlerData","sysMeta","hasLiveTab","liveTab","hasTag","args","numberOfNodes","numberOfEdges","keys","pluginVersion","version","dataStructureVersion","dataStructureState","preselects","inherited-style","visDefConf","config.vis","getText","visUserConf","config.sys","config","sys","dialogManager","open","isConfirmed","outTObj","getPropertiesByPrefix","setTiddlerData","handleGenerateWidget","_ref7","_ref7$paramObject","options","var.view","misc","defaultViewLabel","handleRemoveEdge","_ref8","deleteEdge","handleCreateEdge","_ref9","from","to","isForce","force","tiddlerExists","edge","Edge","makeNode","id","label","insertEdge","notify","handleOpenTypeManager","_ref10","_ref10$paramObject","mode","match","topic","allTypesSelector","allEdgeTypes","typeRootPath","edgeTypes","allNodeTypes","nodeTypes","searchSelector","dialogTObj","handleLoadTypeForm","_ref11","_ref11$paramObject","outTRef","EdgeType","getInstance","NodeType","save","usage","selectEdgesByType","count","typeTRef","fullPath","temp.idImmutable","isShipped","temp.newId","vis","deleteByPrefix","handleSaveTypeForm","_ref12","deleteType","saveType","dialogOutput","logger","_processEdgesWithType","action","removeNodeType","getTiddlerRef","Type","newId","newName","handleCreateType","_ref13","_ref13$paramObject","_ref13$paramObject$id","addTWlisteners","tmap:tm-remove-edge","tmap:tm-load-type-form","tmap:tm-save-type-form","tmap:tm-create-type","tmap:tm-create-edge","tmap:tm-suppress-dialog","tmap:tm-generate-widget","tmap:tm-download-graph","tmap:tm-configure-system","tmap:tm-manage-edge-types","tmap:tm-manage-node-types","tmap:tm-cancel-dialog","tmap:tm-clear-tiddler","tmap:tm-merge-tiddlers","tmap:tm-confirm-dialog"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/services/Listener.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/startup/listener\ntype: application/javascript\nmodule-type: startup\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport NodeType from '$:/plugins/felixhayashi/tiddlymap/js/NodeType';\nimport EdgeType from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport Edge from '$:/plugins/felixhayashi/tiddlymap/js/Edge';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport visDefConf from '$:/plugins/felixhayashi/tiddlymap/js/config/vis';\n\n/*** Code **********************************************************/\n\n/**\n * @param {Object} param - event.param\n */\nconst handleCancelDialog = ({param}) => {\n  utils.setField(param, 'text', '');\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleClearTiddler = ({paramObject} = {})  => {\n\n  const {title, keep} = paramObject;\n\n  if (!title) return;\n\n  const tObj = utils.getTiddler(title);\n  const originalFields = tObj ? tObj.fields : {};\n  const fieldsToKeep = keep ? keep.split() : [];\n  const cloneFields = {\n    title,\n    text: '' // see https://github.com/Jermolene/TiddlyWiki5/issues/2025\n  };\n\n  for (let i = fieldsToKeep.length; i--;) {\n    const fieldName = fieldsToKeep[i];\n    cloneFields[fieldName] = originalFields[fieldName];\n  }\n\n  $tw.wiki.deleteTiddler(title);\n  $tw.wiki.addTiddler(new $tw.Tiddler(cloneFields));\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleMixTiddlers = ({paramObject = {}}) => {\n\n  const {tiddlers: tiddlersStringArray, output} = paramObject;\n\n  if (!tiddlersStringArray || !output) return;\n\n  const tiddlers = $tw.utils.parseStringArray(tiddlersStringArray);\n  const tObj = utils.getMergedTiddlers(tiddlers, output);\n\n  $tw.wiki.addTiddler(tObj);\n\n};\n\n/**\n * @param {string} param - event.param\n */\nconst handleConfirmDialog = ({param}) => {\n\n  utils.setField(param, 'text', '1');\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleSuppressDialog = ({paramObject}) => {\n\n  const {dialog, suppress} = paramObject;\n\n  if (utils.isTrue(suppress, false)) {\n    utils.setEntry($tm.ref.sysUserConf, `suppressedDialogs.${dialog}`, true);\n  }\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleDownloadGraph = ({paramObject}) => {\n\n  const { view } = paramObject;\n  const graph = $tm.adapter.getGraph({ view });\n\n  graph.nodes = utils.convert(graph.nodes, 'array');\n  graph.edges = utils.convert(graph.edges, 'array');\n\n  const tRef = '$:/temp/tmap/export';\n\n  utils.setField(tRef, 'text', JSON.stringify(graph, null, 2));\n\n  $tw.rootWidget.dispatchEvent({\n    type: 'tm-download-file',\n    param: tRef,\n    paramObject: {\n      filename: `${view}.json`\n    }\n  });\n};\n\n/**\n *\n */\nconst handleConfigureSystem = () => {\n\n  const allTiddlers = utils.getMatches($tm.selector.allPotentialNodes);\n  const allEdges = $tm.adapter.getEdgesForSet(allTiddlers);\n  const plugin = $tw.wiki.getTiddler($tm.path.pluginRoot).fields;\n  const meta = $tw.wiki.getTiddlerData($tm.ref.sysMeta);\n  const hasLiveTab = utils.getTiddler($tm.ref.liveTab).hasTag('$:/tags/SideBar');\n\n  const args = {\n    numberOfNodes: '' + allTiddlers.length,\n    numberOfEdges: '' + Object.keys(allEdges).length,\n    pluginVersion: `v${plugin.version}`,\n    dataStructureVersion: `v${meta.dataStructureState}`,\n    dialog: {\n      preselects: {\n        'liveTab': '' + hasLiveTab,\n        'inherited-style': JSON.stringify(visDefConf),\n        'config.vis': utils.getText($tm.ref.visUserConf),\n        'config.sys': $tm.config.sys,\n      }\n    }\n  };\n\n  $tm.dialogManager.open('globalConfig', args, (isConfirmed, outTObj) => {\n\n    if (!isConfirmed) return;\n\n    const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.sys.', true);\n\n    // CAREFUL: this is a data tiddler!\n    $tw.wiki.setTiddlerData($tm.ref.sysUserConf, config);\n\n    // show or hide the live tab; to hide the live tab, we override\n    // the shadow tiddler; to show it, we remove the overlay again.\n    if (utils.isTrue(outTObj.fields.liveTab, false)) {\n      utils.setField($tm.ref.liveTab, 'tags', '$:/tags/SideBar');\n    } else {\n      $tw.wiki.deleteTiddler($tm.ref.liveTab);\n    }\n\n    // tw doesn't translate the json to an object so this is already a string\n    utils.setField($tm.ref.visUserConf, 'text', outTObj.fields['config.vis']);\n\n  });\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleGenerateWidget = ({paramObject = {}}) => {\n\n  const options = {\n    dialog: {\n      preselects: {\n        'var.view': (paramObject.view || $tm.misc.defaultViewLabel)\n      }\n    }\n  };\n\n  $tm.dialogManager.open('widgetCodeGenerator', options);\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleRemoveEdge = ({paramObject}) => {\n\n  $tm.adapter.deleteEdge(paramObject);\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleCreateEdge = ({paramObject}) => {\n\n  const {from, to, force: isForce} = paramObject;\n\n  if (!from || !to) return;\n\n  if ((utils.tiddlerExists(from) && utils.tiddlerExists(to)) || isForce) {\n\n    // will not override any existing tiddlers…\n    utils.addTiddler(to);\n    utils.addTiddler(from);\n\n    const edge = new Edge(\n      $tm.adapter.makeNode(from).id,\n      $tm.adapter.makeNode(to).id,\n      paramObject.label,\n      paramObject.id\n    );\n\n    $tm.adapter.insertEdge(edge);\n    $tm.notify('Edge inserted');\n\n  }\n\n};\n\n/**\n * @param {string} type - event.type\n * @param {Object} [paramObject] - event.paramObject\n */\nconst handleOpenTypeManager = ({type, paramObject = {}}) => {\n\n  // either 'manage-edge-types' or 'manage-node-types'\n  const mode = type.match(/tmap:tm-(.*)/)[1];\n\n  if (mode === 'manage-edge-types') {\n    var topic = 'Edge-Type Manager';\n    var allTypesSelector = $tm.selector.allEdgeTypes;\n    var typeRootPath = $tm.path.edgeTypes;\n  } else {\n    var topic = 'Node-Type Manager';\n    var allTypesSelector = $tm.selector.allNodeTypes;\n    var typeRootPath = $tm.path.nodeTypes;\n  }\n\n  const args = {\n    mode: mode,\n    topic: topic,\n    searchSelector: allTypesSelector,\n    typeRootPath: typeRootPath\n  };\n\n  const dialogTObj = $tm.dialogManager.open('MapElementTypeManager', args);\n\n  if (paramObject.type) {\n    handleLoadTypeForm({\n      paramObject: {\n        mode: mode,\n        id: paramObject.type,\n        output: dialogTObj.fields['output']\n      }\n    });\n  }\n\n};\n\n/**\n * @param {string} id - The id of a {@link MapElementType}\n * @param {('manage-edge-types'|'manage-node-types')} mode\n * @param {TiddlerReference} output\n */\nconst handleLoadTypeForm = ({ paramObject: { mode, id, output } }) => {\n\n  const outTRef = output;\n  const type = (mode === 'manage-edge-types' ? EdgeType.getInstance(id) : NodeType.getInstance(id));\n\n  // inject all the type data as fields into the dialog output\n  type.save(outTRef, true);\n\n  // fields that need preprocessing\n\n  if (mode === 'manage-edge-types') {\n    const usage = $tm.adapter.selectEdgesByType(type);\n    const count = Object.keys(usage).length;\n    utils.setField(outTRef, 'temp.usageCount', count);\n  }\n\n  $tw.wiki.addTiddler(new $tw.Tiddler(\n    utils.getTiddler(outTRef),\n    {\n      'typeTRef': type.fullPath,\n      'temp.idImmutable': (type.isShipped ? 'true' : ''),\n      'temp.newId': type.id,\n      'inherited-style':\n        JSON.stringify(\n          (mode === 'manage-edge-types'\n            ? $tm.config.vis.edges\n            : $tm.config.vis.nodes\n          ) || {}\n        )\n    }\n  ));\n\n  // reset the tabs to default\n  utils.deleteByPrefix('$:/state/tabs/MapElementTypeManager');\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleSaveTypeForm = ({paramObject}) => {\n\n  const tObj = utils.getTiddler(paramObject.output);\n  if (!tObj) return;\n\n  const id = tObj.fields.id;\n  const mode = paramObject.mode;\n\n  if (utils.isTrue(tObj.fields['temp.deleteType'], false)) {\n    deleteType(mode, id, tObj);\n  } else {\n    saveType(mode, id, tObj);\n  }\n\n};\n\nconst deleteType = (mode, id, dialogOutput) => {\n\n  const type = (mode === 'manage-edge-types' ? EdgeType.getInstance(id) : NodeType.getInstance(id));\n\n  $tm.logger('debug', 'Deleting type', type);\n\n  if (mode === 'manage-edge-types') {\n    $tm.adapter._processEdgesWithType(type, {action: 'delete'});\n  } else {\n    $tm.adapter.removeNodeType(type);\n  }\n\n  $tw.wiki.addTiddler(new $tw.Tiddler({\n    title: utils.getTiddlerRef(dialogOutput)\n  }));\n\n  $tm.notify('Deleted type');\n\n};\n\n/**\n * @param {string} id - The id of a {@link MapElementType}\n * @param {('manage-edge-types'|'manage-node-types')} mode\n * @param {TiddlerReference} output\n */\nconst saveType = (mode, id, output) => {\n\n  const tObj = utils.getTiddler(output);\n\n  // update the type with the form data\n  const Type = (mode === 'manage-edge-types' ? EdgeType : NodeType);\n  const type = new Type(id, tObj);\n  type.save();\n\n  const newId = tObj.fields['temp.newId'];\n\n  if (newId && newId !== tObj.fields['id']) { //renamed\n\n    if (mode === 'manage-edge-types') {\n\n      $tm.adapter._processEdgesWithType(type, {\n        action: 'rename',\n        newName: newId\n      });\n\n    } else {\n\n      (new NodeType(newId, type)).save();\n      $tw.wiki.deleteTiddler(type.fullPath);\n\n    }\n\n    utils.setField(tObj, 'id', newId);\n\n  }\n\n  $tm.notify('Saved type data');\n\n};\n\n/**\n * @param {string} id - The id of a {@link MapElementType}\n * @param {('manage-edge-types'|'manage-node-types')} mode\n * @param {TiddlerReference} output\n */\nconst handleCreateType = ({ paramObject: { mode, id = 'New type', output } }) => {\n\n  const type = (mode === 'manage-edge-types' ? new EdgeType(id) : new NodeType(id));\n\n  type.save();\n\n  handleLoadTypeForm({ paramObject: { id: type.id, mode, output } });\n\n};\n\n/*** Exports *******************************************************/\n\nexport const name = 'tmap.listener';\nexport const platforms = [ 'browser' ];\nexport const after = [ 'rootwidget', 'tmap.caretaker' ];\nexport const before = [ 'story' ];\nexport const synchronous = true;\nexport const startup = () => {\n  utils.addTWlisteners({\n    'tmap:tm-remove-edge': handleRemoveEdge,\n    'tmap:tm-load-type-form': handleLoadTypeForm,\n    'tmap:tm-save-type-form': handleSaveTypeForm,\n    'tmap:tm-create-type': handleCreateType,\n    'tmap:tm-create-edge': handleCreateEdge,\n    'tmap:tm-suppress-dialog': handleSuppressDialog,\n    'tmap:tm-generate-widget': handleGenerateWidget,\n    'tmap:tm-download-graph': handleDownloadGraph,\n    'tmap:tm-configure-system': handleConfigureSystem,\n    'tmap:tm-manage-edge-types': handleOpenTypeManager,\n    'tmap:tm-manage-node-types': handleOpenTypeManager,\n    'tmap:tm-cancel-dialog': handleCancelDialog,\n    'tmap:tm-clear-tiddler': handleClearTiddler,\n    'tmap:tm-merge-tiddlers': handleMixTiddlers,\n    'tmap:tm-confirm-dialog': handleConfirmDialog\n  }, $tw.rootWidget, this);\n};\n"],"sourceRoot":"../../../../../../src/plugins"}