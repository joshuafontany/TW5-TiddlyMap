{"version":3,"sources":["felixhayashi/tiddlymap/js/services/Caretaker.js"],"names":["Object","defineProperty","exports","value","startup","synchronous","before","after","platforms","name","undefined","_rebuilders","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_vis","require","_vis2","_interopRequireDefault","_utils","_utils2","_Fixer","_Fixer2","_Adapter","_Adapter2","_tracker","_tracker2","_EdgeTypeSubscriberRegistry","_EdgeTypeSubscriberRegistry2","_DialogManager","_DialogManager2","_CallbackManager","_CallbackManager2","_ViewAbstraction","_ViewAbstraction2","_EdgeType","_EdgeType2","_NodeType","_NodeType2","_vis3","_vis4","_environment","env","_interopRequireWildcard","_URL","_URL2","obj","__esModule","newObj","default","_defineProperty","enumerable","configurable","writable","init","window","$tm","utils","url","URL","location","href","cleanup","registerPublicClasses","updateGlobals","createMetaFile","logger","indeces","attachIndeces","services","getInitializedServices","loadDefaultView","config","sys","defaultView","fixer","fix","registry","setInterval","routineCheck","registerChangeListener","callbackManager","registerMousemoveListener","registerClickListener","query","prepareFullscreenStart","tracker","Tracker","handler","$tw","modules","applyMethods","edgeTypeSubscriberRegistry","EdgeTypeSubscriberRegistry","allETy","adapter","Adapter","CallbackManager","dialogManager","DialogManager","Fixer","glNTy","parent","keycharm","vis","NodeType","EdgeType","ViewAbstraction","attachOptions","p","makeHashMap","merge","unflatten","wiki","getTiddlerData","ref","sysUserConf","visConfig","parseFieldData","visUserConf","field","extend","start","updateNodeTypesIndeces","updateEdgeTypesIndeces","stop","typePath","path","nodeTypes","glNTyById","eachTiddlerPlusShadows","tObj","tRef","startsWith","type","getInstance","id","push","sort","a","b","priority","edgeTypes","et","updateIndex","attachFunctions","fn","nirvana","isTrue","debug","console","args","Array","slice","arg1","shift","apply","timerName","time","timeEnd","notify","notifications","widget","destruct","isZombieWidget","splice","dispatchUpdates","updates","update","checkForClone","tRefs","getDublicates","setField","assignId","open","param","changedTiddler","fields","title","filter","joinAndWrap","getId","lastCurrentTiddler","updateLiveViewTrigger","changedTiddlers","getField","printChanges","loopCount","c","deleted","getTiddler","mouse","evt","addEventListener","tempPopups","popupStates","getTiddlersByPrefix","getText","hasClass","getAncestorWithClass","setText","refresh","isDraft","isHandled","handleTiddlerChange","rebuilders","options","isSystemTiddler","text","dispatchEvent","getIdByTiddler","tRefWithId","getTiddlerWithField","deleteNode","deleteByPrefix","defaultViewHolder","view","_env$ref","mainEditor","setSidebarTab","exists","getLabel","tiddlerExists","sysMeta","plugin","pluginRoot","setTiddlerData","originalVersion","version","dataStructureState","showWelcomeMessage"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/services/Caretaker.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/startup/caretaker\ntype: application/javascript\nmodule-type: startup\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport visConfig                  from '$:/plugins/felixhayashi/tiddlymap/js/config/vis';\nimport utils                      from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport Fixer                      from '$:/plugins/felixhayashi/tiddlymap/js/Fixer';\nimport Adapter                    from '$:/plugins/felixhayashi/tiddlymap/js/Adapter';\nimport Tracker                    from '$:/plugins/felixhayashi/tiddlymap/js/services/tracker';\nimport EdgeTypeSubscriberRegistry from '$:/plugins/felixhayashi/tiddlymap/js/EdgeTypeSubscriberRegistry';\nimport DialogManager              from '$:/plugins/felixhayashi/tiddlymap/js/DialogManager';\nimport CallbackManager            from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction            from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType                   from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport NodeType                   from '$:/plugins/felixhayashi/tiddlymap/js/NodeType';\nimport vis                        from '$:/plugins/felixhayashi/vis/vis.js';\nimport * as env                   from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\nimport URL                        from '$:/plugins/felixhayashi/tiddlymap/js/URL';\n\n/*** Code **********************************************************/\n\n/**\n * This module is responsible for registering a global namespace\n * under $tw and loading (and refreshing) the configuration and services.\n *\n * Attention: Careful with the order of the function calls in this\n * functions body!\n *\n */\nconst init = () => {\n\n  window.$tm = { ...env, utils, url: new URL(window.location.href) };\n\n  // cleanup previous session\n  cleanup();\n\n  registerPublicClasses($tm);\n\n  // build and integrate global options\n  updateGlobals($tm);\n\n  // register meta file (if not done yet)\n  createMetaFile($tm.logger);\n\n  // create indeces\n  const indeces = attachIndeces($tm);\n\n  // create services\n  const services = getInitializedServices(indeces);\n  Object.assign($tm, services);\n\n  // load defaults\n  loadDefaultView($tm.config.sys.defaultView);\n\n  // Run the fixer to update older wikis\n  services.fixer.fix();\n\n  // all graphs need to register here. @see routineWalk()\n  $tm.registry = [];\n  setInterval(routineCheck, 5000);\n\n  // AT THE VERY END: register change listener with the callback manager\n  registerChangeListener($tm.callbackManager);\n\n  // register DOM listeners\n  registerMousemoveListener();\n  registerClickListener();\n\n  // check for fullscreen directives\n  if ($tm.url.query['tmap-enlarged']) {\n    prepareFullscreenStart($tm.url);\n  }\n\n  // issue notification\n  $tm.logger('warn', 'TiddlyMap\\'s caretaker successfully started');\n\n};\n\n/**\n * Injects dependencies and registers services\n *\n * @param indeces\n * @return Object\n */\nconst getInitializedServices = indeces => {\n\n  const tracker = new Tracker(fixer);\n\n  // inject modules\n  const handler = $tw.modules.applyMethods('tmap.edgetypehandler');\n  const edgeTypeSubscriberRegistry = new EdgeTypeSubscriberRegistry(\n    handler,\n    indeces.allETy,\n    tracker\n  );\n\n  // attach the adapter object to the tiddlymap namespace\n  const adapter = new Adapter(\n    tracker,\n    edgeTypeSubscriberRegistry\n  );\n\n  const callbackManager = new CallbackManager();\n  const dialogManager = new DialogManager(callbackManager);\n\n  const fixer = new Fixer(adapter, $tm.logger, indeces.glNTy)\n\n  return {\n    edgeTypeSubscriberRegistry,\n    tracker,\n    adapter,\n    callbackManager,\n    dialogManager,\n    fixer,\n  };\n\n};\n\n/**\n * make classes available for console users\n */\nconst registerPublicClasses = (parent) => {\n  parent.keycharm = vis.keycharm;\n  parent.NodeType = NodeType;\n  parent.EdgeType = EdgeType;\n  parent.ViewAbstraction = ViewAbstraction;\n};\n\n/**\n * This function will append the global options to the tree. In case\n * this function is called again, only the option leafs are rebuild\n * so a process may safely store a reference to a branch of the option\n * tree as the reference doesn't change.\n *\n * ATTENTION: For the path options, no trailing or double slashes!\n * This is NOT unix where paths are normalized (// is not rewritten to /).\n *\n * @see\n *   - [TW5] Is there a designated place for TW plugins to store stuff in the dom?\n *     https://groups.google.com/forum/#!topic/tiddlywikidev/MZZ37XiVcvY\n * @param {object} parent The root where to insert the options into\n */\nvar attachOptions = function(parent) {\n\n  var p = parent;\n\n  // default configurations mixed with user config\n  if (!p.config) p.config = utils.makeHashMap();\n\n  // Never modify the imported config objects; instead, merge them\n  // into a new object\n\n  // attention! it is a tw-data-tiddler!\n  p.config.sys = utils.merge(\n    p.config.sys,\n    utils.unflatten($tw.wiki.getTiddlerData(env.ref.sysUserConf))\n  );\n\n  // CAREFUL: Never merge directly into the default vis config object\n  p.config.vis = utils.merge(\n    {}, visConfig, utils.parseFieldData(env.ref.visUserConf)\n  );\n\n  // a shortcut for fields property\n  if (!p.field) p.field = utils.makeHashMap();\n  $tw.utils.extend(p.field, p.config.sys.field);\n\n};\n\n/**\n * This function will cache/index some tiddler properties as javascript\n * objects for faster access.\n */\nconst attachIndeces = (parent) => {\n\n  $tm.start('Attaching Indeces');\n\n  parent.indeces = parent.indeces || {};\n\n  updateNodeTypesIndeces(parent.indeces);\n  updateEdgeTypesIndeces(parent.indeces);\n\n  $tm.stop('Attaching Indeces');\n\n  return parent.indeces;\n\n};\n\n/**\n * For faster access to node-type styles, we store all node-type\n * objects as indeces in a table.\n *\n * Types without a filter are not indexed since they are either\n * special types that TiddlyMap manually assignes (e.g. tmap:neighbour,\n * or tmap:selected).\n *\n * Indeces added to the indeces chain:\n * 1. glNTy – all global node types\n *\n * @param {Object} [parent] - The global indeces object indeces.\n *     If not stated, $tm.indeces is used.\n * @param {Array<TiddlerReference>} [allTiddlers] - The tiddlers to\n *     use as basis for this index. If not stated, all tiddlers in\n *     the wiki are used.\n */\nvar updateNodeTypesIndeces = function(parent) {\n\n  parent = parent || $tm.indeces;\n\n  var typePath = $tm.path.nodeTypes;\n  var glNTy = parent.glNTy = [];\n  var glNTyById = parent.glNTyById = utils.makeHashMap();\n\n  $tw.wiki.eachTiddlerPlusShadows(function(tObj, tRef) {\n    if (utils.startsWith(tRef, typePath)) {\n      var type = NodeType.getInstance(tRef);\n      glNTyById[type.id] = type;\n      glNTy.push(type);\n    }\n  });\n\n  glNTy.sort(function(a, b) {\n    return a.priority - b.priority;\n  });\n\n};\n\nvar updateEdgeTypesIndeces = function(parent) {\n\n  parent = parent || $tm.indeces;\n\n  var typePath = $tm.path.edgeTypes;\n  var allETy = parent.allETy = utils.makeHashMap();\n\n  $tw.wiki.eachTiddlerPlusShadows(function(tObj, tRef) {\n\n    if (utils.startsWith(tRef, typePath)) {\n\n      var et = EdgeType.getInstance(tRef);\n      allETy[et.id] = et;\n\n    }\n\n  });\n\n  if ($tm.edgeTypeSubscriberRegistry) {\n    $tm.edgeTypeSubscriberRegistry.updateIndex(allETy);\n  }\n\n};\n\n/**\n * This function attaches all the top level functions to the\n * tiddlymap namespace.\n *\n * This will add the\n * 1. global logger method,\n * 2. the notify method\n * 3. the stopwatch methods `start` and `stop`.\n *\n * @param {Hashmap} parent - The parent object to attach the options to.\n */\nvar attachFunctions = function(parent) {\n\n  var fn = parent;\n  var nirvana = function() { /* /dev/null */ };\n\n  if (utils.isTrue($tm.config.sys.debug, false) && console) {\n\n    /**\n     * A logging mechanism that uses the first argument as type and\n     * passes all consequent arguments as console arguments. The\n     * reason for this functions existence is to be able to switch\n     * off the logging without redirecting every single console function\n     * such as log, debug, warn etc. Plus, we have more control over\n     * the logging.\n     *\n     * @see http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9\n     * @see http://stackoverflow.com/questions/9521921/why-does-console-log-apply-throw-an-illegal-invocation-error\n     *\n     * @param {string} type - The type of the message (debug, info, warning…)\n     *     which is exactly the same as in `console[type]`.\n     * @param {...*} message - An infinite number of arguments to be printed\n     *     (just like console).\n     */\n    fn.logger = function(/* type, [messages,] messages */) {\n      if (arguments.length < 2) return;\n      var args = Array.prototype.slice.call(arguments);\n      var arg1 = args.shift(args);\n      var type = (console.hasOwnProperty(arg1) ? arg1 : 'debug');\n      console[type].apply(console, args);\n    };\n\n    fn.start = function(timerName) {\n      console.time('[timer] ' + timerName);\n    };\n\n    fn.stop = function(timerName) {\n      console.timeEnd('[timer] ' + timerName);\n    };\n\n  } else {\n\n    fn.logger = fn.start = fn.stop = nirvana;\n\n  }\n\n  fn.notify = (utils.isTrue($tm.config.sys.notifications) ? utils.notify : nirvana);\n\n};\n\n/**\n * This periodic check is needed to trigger a cleanup if a graph is\n * removed since a graph itself cannot react to its destruction.\n * This includes removing listeners that were not attached to the\n * local container or calling the vis destructor.\n *\n * @todo Specify which functions are required for widgets that register\n * themselves in the registry.\n */\nvar routineCheck = function() {\n\n  for (var i = $tm.registry.length; i--;) {\n    var widget = $tm.registry[i];\n\n    if (!widget.destruct || !widget.isZombieWidget) return; // no duck!\n\n    if (widget.isZombieWidget()) { // removed!\n      $tm.logger('warn', 'a widget will be removed');\n      $tm.registry.splice(i, 1);\n      widget.destruct();\n    }\n  }\n\n};\n\n/**\n * Every widget that has registered itself in the registry\n * will receive the `updates` object. The `updates` object is a more\n * advanced\n *\n * @param {Updates} updates\n */\nconst dispatchUpdates = updates => {\n\n  const registry = $tm.registry;\n  for (let i = registry.length; i--;) {\n\n    const widget = registry[i];\n\n    if (widget.update && (widget.isZombieWidget && !widget.isZombieWidget())) {\n      widget.update(updates);\n    }\n  }\n\n};\n\n/**\n * We need to do this check as TiddlyWiki does not allow us to hook into the\n * clone process to find out whether a node was cloned.\n *\n * @param tObj\n */\nconst checkForClone = tObj => {\n\n  const tRefs = utils.getDublicates(tObj);\n\n  if (!tRefs.length) {\n    return;\n  }\n\n  // remove any defined edges\n  utils.setField(tObj, 'tmap.edges', undefined);\n\n  // force override id\n  $tm.tracker.assignId(tObj, true);\n\n  // inform the user about what we did\n  $tm.dialogManager.open('dublicateIdInfo', {\n    param: {\n      changedTiddler: tObj.fields.title,\n      filter : utils.joinAndWrap(tRefs, '[[', ']]'),\n      id: utils.getId(tObj),\n    }\n  });\n\n\n};\n\n/**\n * Builds and registers globals and the functions that depend on them.\n */\nconst updateGlobals = parent => {\n\n  attachOptions($tm);\n  attachFunctions($tm);\n\n  // attention: logger() cannot be called before functions are rebuild\n  $tm.logger('warn', 'Rebuilt globals');\n\n};\n\nvar lastCurrentTiddler = null;\nvar updateLiveViewTrigger = function(changedTiddlers) {\n\n  if (changedTiddlers['$:/HistoryList']) {\n    var tRef = utils.getField('$:/HistoryList', 'current-tiddler');\n  } else if (changedTiddlers['$:/temp/focussedTiddler']) {\n    var tRef = utils.getField('$:/temp/focussedTiddler', 'text');\n  }\n\n  if (tRef != null && lastCurrentTiddler !== tRef) {\n    lastCurrentTiddler = tRef;\n    utils.setField('$:/temp/tmap/currentTiddler', 'text', tRef);\n  }\n\n};\n\n/**\n * Only for debugging\n */\nvar printChanges = function(changedTiddlers, loopCount) {\n\n  if (!utils.isTrue($tm.config.sys.debug, false)) return;\n\n  $tm.logger('warn', '=== Refresh ' + loopCount + ' ===');\n\n  for (var tRef in changedTiddlers) {\n\n    var c = changedTiddlers[tRef].deleted ? '[Deleted]' : '[Modified]';\n\n    $tm.logger('warn', c, tRef, $tw.wiki.getTiddler(tRef));\n  }\n\n};\n\n/**\n * Saves the last mousemove event under $tm.mouse\n */\nvar registerMousemoveListener = function() {\n\n  $tm.mouse = {};\n\n  var fn = function(evt) { $tm.mouse = evt; };\n  window.addEventListener('mousemove', fn, false);\n\n};\n\n/**\n * @TODO: suggest this to Jeremy for TW popup handling\n */\nvar registerClickListener = function() {\n\n  var tempPopups = $tm.path.tempPopups;\n  window.addEventListener('click', function(evt) {\n\n    var popupStates = utils.getTiddlersByPrefix(tempPopups);\n\n    for (var i = popupStates.length; i--;) {\n      if (utils.getText(popupStates[i])) break;\n    }\n\n    if (i === -1) return;\n\n    if (!$tw.utils.hasClass(evt.target, 'tc-drop-down')\n       && !utils.getAncestorWithClass(evt.target, 'tc-drop-down')) {\n    // = clicked on an element that isn't a dropdown or inside one\n      for (var i = popupStates.length; i--;) {\n        utils.setText(popupStates[i], '');\n      }\n    }\n\n  }, false);\n};\n\n/**\n * Registers a change listener that will dispatch\n * @param callbackManager\n */\nconst registerChangeListener = callbackManager => {\n\n  let loopCount = 0;\n\n  $tw.wiki.addEventListener('change', changedTiddlers => {\n\n    $tm.start('Caretaker handling changes');\n\n    printChanges(changedTiddlers, loopCount++);\n    callbackManager.refresh(changedTiddlers);\n\n    const updates = { changedTiddlers: {} };\n\n    for (let tRef in changedTiddlers) {\n\n      const tObj = utils.getTiddler(tRef);\n\n      if (tObj && tObj.isDraft()) {\n        continue;\n      }\n\n      const isHandled = handleTiddlerChange(tRef, tObj, updates);\n\n      if (isHandled) {\n        updates.changedTiddlers[tRef] = changedTiddlers[tRef];\n      }\n    }\n\n    dispatchUpdates(updates);\n\n    // NOTE: changes will affect the next refresh cycle\n    updateLiveViewTrigger(changedTiddlers);\n\n    $tm.stop('Caretaker handling changes');\n\n  });\n\n};\n\n/**\n * Mapping of paths and callbacks that should be invoked if tiddlers\n * within theses paths change.\n */\nconst rebuilders = {\n  [env.path.options]: updateGlobals,\n  [env.path.nodeTypes]: updateNodeTypesIndeces,\n  [env.path.edgeTypes]: updateEdgeTypesIndeces,\n};\n\n/**\n * This function will deal with tiddler changes and will log changes\n * to the provided `updates` object.\n *\n * @param {TiddlerReference} tRef\n * @param {$tw.Tiddler} tObj\n * @param {Updates} updates\n */\nconst handleTiddlerChange = (tRef, tObj, updates) => {\n\n  if ($tw.wiki.isSystemTiddler(tRef)) {\n\n    for (let path in rebuilders) {\n      if (utils.startsWith(tRef, path) && !updates[path]) {\n        $tm.logger('warn', '[System change]', path);\n        rebuilders[path]();\n        updates[path] = true;\n      }\n    }\n\n  } else if (tObj) { // created or modified\n\n    if (tObj.fields.text === undefined) { // sic; '' is ok\n      // to make sure that the tiddler's body is fully loaded\n      // we postpone the handling of the tiddler\n      // see https://github.com/felixhayashi/TW5-TiddlyMap/issues/222#issuecomment-268978764\n      $tw.wiki.dispatchEvent('lazyLoad', tRef);\n\n      return false;\n    }\n\n    checkForClone(tObj);\n\n    // call assignId IN ANY CASE to make sure the index\n    // stays intact, also after a renaming operation\n    $tm.tracker.assignId(tObj);\n\n  } else { // deleted or renamed\n\n    const id = $tm.tracker.getIdByTiddler(tRef);\n\n    if (!id) { // ignore tiddler without id\n      return false;\n    }\n\n    const tRefWithId = utils.getTiddlerWithField('tmap.id', id);\n\n    if (tRefWithId) { // only renamed\n\n      $tm.logger('warn', '[Renamed]', tRef, 'into', tRefWithId);\n\n    } else { // removed\n\n      // remove node; any edges pointing in/out; update indeces\n      // CAREFUL with recursion here!\n      $tm.adapter.deleteNode(id);\n\n    }\n  }\n\n  return true;\n\n};\n\n/**\n * Remove temp files from previous session.\n */\nconst cleanup = () => {\n\n  utils.deleteByPrefix('$:/temp/felixhayashi');\n  utils.deleteByPrefix('$:/temp/tiddlymap');\n  utils.deleteByPrefix('$:/temp/tmap');\n\n};\n\n/**\n * Register the view that should be displayed at startup.\n */\nconst loadDefaultView = defaultView => {\n\n  if (defaultView) {\n    utils.setText(env.ref.defaultViewHolder, $tm.config.sys.defaultView);\n  }\n\n};\n\n/**\n * Init the wiki so we can start the main editor with the specified\n * view in fullscreen mode.\n *\n * @param {ViewAbstraction|string} view\n */\nconst prepareFullscreenStart = view => {\n\n  const { mainEditor, defaultViewHolder } = env.ref;\n\n  utils.setSidebarTab(mainEditor);\n\n  if (ViewAbstraction.exists(view)) {\n    view = new ViewAbstraction(view);\n    utils.setField(defaultViewHolder, 'text', view.getLabel());\n  }\n\n};\n\n/**\n * The meta file keeps track of installation data.\n */\nconst createMetaFile = (logger) => {\n\n  if (utils.tiddlerExists(env.ref.sysMeta)) {\n    return;\n  }\n\n  logger('warn', 'Creating meta file');\n\n  const plugin = $tw.wiki.getTiddler(env.path.pluginRoot);\n\n  $tw.wiki.setTiddlerData(env.ref.sysMeta, {\n    // the version originally installed\n    originalVersion: plugin.fields.version,\n    // the data structure in use corresponds to version x\n    // if the structure is obsolete, it will be automatically\n    // fixed by the fixer module.\n    dataStructureState: '0.6.9',\n    // whether or not to display a welcome message\n    showWelcomeMessage: true\n  });\n\n};\n\n/*** Exports *******************************************************/\n\nexport const name = 'tmap.caretaker';\nexport const platforms = [ 'browser' ];\nexport const after = [ 'startup' ];\nexport const before = [ 'rootwidget' ];\nexport const synchronous = true;\nexport const startup = init;\n"],"sourceRoot":"../../../../../../src/plugins"}