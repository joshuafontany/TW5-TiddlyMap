{"version":3,"sources":["felixhayashi/tiddlymap/js/services/Tracker.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_utils","require","_utils2","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","TypeError","Tracker","fixer","this","wiki","$tw","logger","$tm","_createIndex","tById","idByT","each","tObj","tRef","utils","isSystemOrDraft","id","fields","genUUID","setField","assignId","tiddler","isForce","getTiddler","ResourceNotFoundException","title","getIdByTiddler","getTiddlerRef","getIdsByTiddlers","getTiddlersByIds","getTiddlerById"],"mappings":"AAAA,aAEAA,OAAOC,eAAeC,QAAS,aAAc,CAC3CC,MAAO,OAGT,IAAIC,aAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,YAAc,MAAOD,EAAWE,aAAe,KAAM,GAAI,UAAWF,EAAYA,EAAWG,SAAW,KAAMb,OAAOC,eAAeK,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAe,GAAID,EAAYX,EAAiBU,EAAYG,UAAWF,GAAa,GAAIC,EAAaZ,EAAiBU,EAAaE,GAAc,OAAOF,GAA7gB;;;;;;;;;;wBAQnB,IAAAI,OAAAC,QAAA,8CAQA,IAAIC,QAAUC,uBAAuBH,QAErC,SAASG,uBAAuBC,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,GAEvF,SAASG,gBAAgBC,EAAUZ,GAAe,KAAMY,aAAoBZ,GAAc,CAAE,MAAM,IAAIa,UAAU,sCAOhH,IAZMC,QAYQ,WAVZ,SAAAA,EAAYC,GAAOJ,gBAAAK,KAAAF,GAEjBE,KAAKC,KAAOC,IAAID,KAChBD,KAAKG,OAASC,IAAID,OAElBH,KAAKK,eA6BPhC,aAAayB,EAAS,CAAC,CACrBf,IAAK,eACLX,MAAO,SAASiC,IAbhB,IAAMC,EAAQN,KAAKM,MAAQ,GAC3B,IAAMC,EAAQP,KAAKO,MAAQ,GAE3BP,KAAKC,KAAKO,KAAK,SAACC,EAAMC,GAEpB,GAAIC,QAAAA,QAAMC,gBAAgBH,GAAO,CAC/B,OAIF,IAAII,EAAKJ,EAAKK,OAAO,WACrB,IAAKD,EAAI,CACPA,EAAKF,QAAAA,QAAMI,UACXJ,QAAAA,QAAMK,SAASP,EAAM,UAAWI,GAGlCP,EAAMO,GAAMH,EACZH,EAAMG,GAAQG,MA+Bf,CACD9B,IAAK,WACLX,MAAO,SAAS6C,EAhBTC,EAASC,GAIhB,IAAMV,EAAOE,QAAAA,QAAMS,WAAWF,GAE9B,IAAKT,EAAM,CACT,MAAM,IAAIY,0BAA0BH,GAGtC,IAAIL,EAAKJ,EAAKK,OAAO,WAErB,IAAKD,GAAMM,EAAS,CAClBN,EAAKF,QAAAA,QAAMI,UACXJ,QAAAA,QAAMK,SAASP,EAAM,UAAWI,GAChCb,KAAKG,OAAO,OAAQ,sBAAuBM,EAAKK,OAAOQ,OAKzDtB,KAAKM,MAAMO,GAAMJ,EAAKK,OAAOQ,MAC7BtB,KAAKO,MAAME,EAAKK,OAAOQ,OAAST,EAEhC,OAAOA,IAwBN,CACD9B,IAAK,iBACLX,MAAO,SAASmD,EAlBHL,GAEb,OAAOlB,KAAKO,MAAMI,QAAAA,QAAMa,cAAcN,MAoBrC,CACDnC,IAAK,mBACLX,MAAO,SAASqD,IAjBhB,OAAOzB,KAAKO,QAoBX,CACDxB,IAAK,mBACLX,MAAO,SAASsD,IAlBhB,OAAO1B,KAAKM,QA2BX,CACDvB,IAAK,iBACLX,MAAO,SAASuD,EAtBHd,GAEb,OAAOb,KAAKM,MAAMO,OA0BpB,OAAOf,EA5HK,GAiId3B,QAAQuB,QAvBOI","file":"../../../../../felixhayashi/tiddlymap/js/services/Tracker.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/services/tracker\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/***************************** CODE ********************************/\n\n/**\n *\n */\nclass Tracker {\n\n  constructor(fixer) {\n\n    this.wiki = $tw.wiki;\n    this.logger = $tm.logger;\n\n    this._createIndex();\n\n  }\n\n  /**\n   * TiddlyMap uses ids to reference tiddlers. This function creates\n   * a table that maps ids to tRefs and vice versa.\n   *\n   * Two indeces are added to the indeces chain:\n   * 1. tById – tiddler references by id\n   * 2. idByT – ids by tiddler references\n   *\n   * @param {Array<TiddlerReference>} [allTiddlers] - The tiddlers to\n   *     use as basis for this index. If not stated, all tiddlers in\n   *     the wiki are used.\n   */\n  _createIndex() {\n\n    const tById = this.tById = {}; // tiddlerById\n    const idByT = this.idByT = {}; // idByTiddler\n\n    this.wiki.each((tObj, tRef) => {\n\n      if (utils.isSystemOrDraft(tObj)) {\n        return;\n      }\n\n      // will create id if not present\n      let id = tObj.fields['tmap.id'];\n      if (!id) {\n        id = utils.genUUID();\n        utils.setField(tObj, 'tmap.id', id);\n      }\n\n      tById[id] = tRef; // tiddlerById\n      idByT[tRef] = id; // idByTiddler\n\n    });\n\n  }\n\n  /**\n   * This method will assign an id to an *existing* tiddler that does\n   * not already possess and id. Any assigned id will be registered\n   * at the id->tiddler index.\n   *\n   * @param {Tiddler} tiddler - The tiddler to assign the id to.\n   * @param {boolean} isForce - True if the id should be overridden,\n   *     false otherwise. Only works if the id field is not set to title.\n   *\n   * @return {Id} The assigned or retrieved id.\n   */\n  assignId(tiddler, isForce) {\n\n    // Note: always reload from store to avoid setting wrong ids on tiddler\n    // being in the role of from and to at the same time.\n    const tObj = utils.getTiddler(tiddler);\n\n    if (!tObj) {\n      throw new ResourceNotFoundException(tiddler);\n    }\n\n    let id = tObj.fields['tmap.id'];\n\n    if (!id || isForce) {\n      id = utils.genUUID();\n      utils.setField(tObj, 'tmap.id', id);\n      this.logger('info', 'Assigning new id to', tObj.fields.title);\n    }\n\n    // blindly update the index IN ANY CASE because tiddler may have\n    // an id but it is not indexed yet (e.g. because of renaming operation)\n    this.tById[id] = tObj.fields.title;\n    this.idByT[tObj.fields.title] = id;\n\n    return id;\n\n  }\n\n  /**\n   * @param {Tiddler} tiddler\n   * @return string\n   */\n  getIdByTiddler(tiddler) {\n\n    return this.idByT[utils.getTiddlerRef(tiddler)];\n\n  }\n\n  getIdsByTiddlers() {\n    return this.idByT;\n  }\n\n  getTiddlersByIds() {\n    return this.tById;\n  }\n\n  /**\n   * @param id\n   * @return {TiddlerReference} tiddler\n   */\n  getTiddlerById(id) {\n\n    return this.tById[id];\n\n  }\n\n}\n\n/*** Exports *******************************************************/\n\nexport default Tracker;\n"],"sourceRoot":"../../../../../../src/plugins"}