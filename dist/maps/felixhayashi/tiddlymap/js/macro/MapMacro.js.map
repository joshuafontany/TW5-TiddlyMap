{"version":3,"sources":["felixhayashi/tiddlymap/js/macro/MapMacro.js"],"names":["Object","defineProperty","exports","value","params","name","run","undefined","_typeof","Symbol","iterator","obj","constructor","prototype","_EdgeType","require","_EdgeType2","_interopRequireDefault","_ViewAbstraction","_ViewAbstraction2","_utils","_utils2","__esModule","default","getParamSlots","this","substVarRefs","substituteVariableReferences","fn","command","arguments","result","args","Array","slice","call","apply","maxArgs","arr","i","push","utils","makeHashMap","basename","separator","str","getVariable","getBasename","datauri","tiddler","type","getDataUri","testJSON","fieldName","tObj","$tw","wiki","getTiddler","JSON","parse","fields","SyntaxError","splitAndSelect","index","split","concat","l","length","uuid","genUUID","regRepl","oldStr","regStr","newStr","regFlags","replace","RegExp","halfOfString","substr","Math","ceil","isETyVisible","view","userInput","ViewAbstraction","id","getETyId","isEdgeTypeVisible","EdgeType","getInstance","namespace","_EdgeType$getIdParts","getIdParts","marker","getConfig","getId","scale","parseInt","mergeFields","prefix","getPropertiesByPrefix","option","path","unit","$tm","prop","propertyPath","hasSubString","lastIndexOf"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/macro/MapMacro.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\ntitle: $:/plugins/felixhayashi/tiddlymap/js/macro/tmap\ntype: application/javascript\nmodule-type: macro\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport EdgeType        from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport ViewAbstraction from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport utils           from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\nconst name = 'tmap';\nconst params = getParamSlots(5);\n\n/**\n * @this MacroCallWidget\n * @return {string} the result of the operation or an empty string.\n * @private\n */\nfunction run() {\n\n  this.substVarRefs = this.substituteVariableReferences;\n\n  const fn = command[arguments[0]];\n  let result = null;\n\n  if (typeof fn === 'function') {\n    const args = Array.prototype.slice.call(arguments,1);\n    result = fn.apply(this, args);\n  }\n\n  return (typeof result === 'string' ? result : '');\n\n}\n\n/**\n * unfortunately tw forces us to specify params in advance so I\n * will reserve some argument slots here.\n * @private\n */\nfunction getParamSlots(maxArgs) {\n\n  const arr = [];\n  for (let i = 0; i < maxArgs; i++) {\n    arr.push({ name : ('arg' + i) });\n  }\n\n  return arr;\n\n}\n\n/**\n * In connection with tiddlymap, this macro allows us to access\n * system information from within tiddlers as well as to execute\n * some util functions.\n *\n * Every command will be called with `this` pointing to the current\n * MacroCallWidget instance!\n *\n * @private\n */\nvar command = utils.makeHashMap();\n\n/**\n * Returns the basename of the string\n *\n * @see {@link utils.basename}\n */\ncommand.basename = function(separator) {\n\n  var str = this.getVariable('currentTiddler');\n  return utils.getBasename(str, separator);\n\n};\n\n/**\n * TW messes with svg urls so we always use base64 encoding when\n * a data uri is requested as macro call\n */\ncommand.datauri = function(tiddler, type) {\n\n  return utils.getDataUri(tiddler, type, true);\n\n};\n\ncommand.testJSON = function(fieldName) {\n\n  var tObj = $tw.wiki.getTiddler(this.getVariable('currentTiddler'));\n\n  try {\n    JSON.parse(tObj.fields[fieldName]);\n    return 'valid';\n  } catch (SyntaxError) {\n    return 'malformed';\n  }\n\n};\n\ncommand.splitAndSelect = function(separator, index) {\n\n  var str = this.getVariable('currentTiddler');\n  var result = str.split(separator)[index];\n\n  return (result != null ? result : str);\n\n};\n\ncommand.concat = function() {\n\n  var str = '';\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    str += arguments[i];\n  }\n  return str;\n\n};\n\ncommand.uuid = function() {\n\n  return utils.genUUID();\n\n};\n\ncommand.regRepl = function() {\n\n  var oldStr = this.substVarRefs(arguments[0]);\n  var regStr = arguments[1];\n  var newStr = this.substVarRefs(arguments[2]);\n  var regFlags = this.substVarRefs(arguments[4]);\n\n  return oldStr.replace(new RegExp(regStr, regFlags), newStr);\n\n};\n\ncommand.halfOfString = function() {\n\n  var str = this.substVarRefs(arguments[0]);\n\n  if (!str) {\n    return '';\n  }\n\n  return str.substr(0, Math.ceil(str.length / 2));\n\n};\n\ncommand.isETyVisible = function(view, userInput) {\n\n  view = new ViewAbstraction(view);\n\n  const id = command.getETyId.call(this, view, userInput);\n\n  return '' + view.isEdgeTypeVisible(id);\n\n};\n\ncommand.getETyId = function(view, userInput) {\n\n  view = new ViewAbstraction(view);\n\n  let type = EdgeType.getInstance(userInput || this.getVariable('currentTiddler'));\n\n  if (!type.namespace) {\n\n    const { marker, name } = EdgeType.getIdParts(type.id);\n    const namespace = view.getConfig('edge_type_namespace');\n\n    type = EdgeType.getInstance(EdgeType.getId(marker, namespace, name));\n\n  }\n\n  return type.id;\n\n};\n\ncommand.scale = function() {\n\n  var str = '';\n  for (var i = 1, l = parseInt(arguments[0]); i < l; i++) {\n    str += '[[' + i + ']]';\n  }\n  return str;\n\n};\n\ncommand.mergeFields = function() {\n\n  var tObj = utils.getTiddler(arguments[0]);\n  var prefix = arguments[1];\n  var separator = arguments[2] || ' ';\n\n  if (!tObj) return;\n\n  var fields = utils.getPropertiesByPrefix(tObj.fields, prefix);\n  var str = '';\n  for (var name in fields) {\n\n    if (typeof fields[name] === 'string') {\n\n      str += fields[name] + separator;\n    }\n  }\n  return str;\n\n};\n\ncommand.option = function(path, unit) {\n\n  if (typeof $tm == \"undefined\") {\n    // this macro is referenced from css which means we cannot\n    // expect $tm to exist, e.g when rendering static css\n    // @see https://github.com/felixhayashi/TW5-TiddlyMap/issues/257#issuecomment-427343226\n    return '';\n  }\n\n  var prop = $tm;\n  var propertyPath = path.split('.');\n\n  for (var i = 0; i < propertyPath.length; i++) {\n    if (typeof prop == 'object' && prop[propertyPath[i]]) {\n      prop = prop[propertyPath[i]];\n    }\n  }\n\n  // TODO: ugly, use regex\n  if (unit && typeof prop === 'string'\n     && utils.hasSubString(unit)\n     && (prop.lastIndexOf(unit) + unit.length) === prop.length) {\n    prop = prop + unit;\n  }\n\n  return prop;\n\n};\n\n/*** Exports *******************************************************/\n\nexport { run, name, params };\n"],"sourceRoot":"../../../../../../src/plugins"}