{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/AbstractRefEdgeTypeSubscriber.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_utils","require","_utils2","_interopRequireDefault","_Edge","_Edge2","_exception","_AbstractEdgeTypeSubscriber","_AbstractEdgeTypeSubscriber2","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","AbstractRefEdgeTypeSubscriber","_AbstractEdgeTypeSubs","this","getPrototypeOf","apply","arguments","loadEdges","tObj","toWL","typeWL","refsByType","getReferences","utils","hasElements","fromId","fields","idByT","$tm","tracker","getIdsByTiddlers","allETy","allEdgeTypes","fromTRef","getTiddlerRef","edges","makeHashMap","typeId","toRefs","type","toTRef","$tw","wiki","tiddlerExists","isSystemOrDraft","id","hashString","Edge","MissingOverrideError","AbstractEdgeTypeSubscriber"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/AbstractRefEdgeTypeSubscriber.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/AbstractRefEdgeTypeSubscriber\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport Edge from '$:/plugins/felixhayashi/tiddlymap/js/Edge';\nimport { MissingOverrideError } from '$:/plugins/felixhayashi/tiddlymap/js/exception';\nimport AbstractEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractEdgeTypeSubscriber';\n\n/*** Code **********************************************************/\n\n/**\n * Parent class for all subscribers that retrieve or store\n * non-TiddlyMap edges ({@see TmapEdgeTypeSubscriber) from a tiddler,\n * for example tag or list references.\n */\nclass AbstractRefEdgeTypeSubscriber extends AbstractEdgeTypeSubscriber {\n\n  /**\n   * @inheritDoc\n   */\n  loadEdges(tObj, toWL, typeWL) {\n\n    // references to other tiddlers grouped by their edge type\n    const refsByType = this.getReferences(tObj, toWL, typeWL);\n\n    if (!refsByType || !utils.hasElements(refsByType)) return;\n\n    const fromId = tObj.fields['tmap.id'];\n    const idByT = $tm.tracker.getIdsByTiddlers();\n    const allETy = this.allEdgeTypes;\n    const fromTRef = utils.getTiddlerRef(tObj);\n\n    const edges = utils.makeHashMap();\n\n    for (let typeId in refsByType) {\n\n      const toRefs = refsByType[typeId];\n\n      if (!toRefs) {\n        continue;\n      }\n\n      const type = allETy[typeId];\n      for (let i = toRefs.length; i--;) {\n        const toTRef = toRefs[i];\n\n        if (!toTRef\n          || !$tw.wiki.tiddlerExists(toTRef)\n          || utils.isSystemOrDraft(toTRef)\n          || (toWL && !toWL[toTRef])) {\n          continue;\n        }\n\n        const id = type.id + $tw.utils.hashString(fromTRef + toTRef);\n        edges[id] = new Edge(fromId, idByT[toTRef], type.id, id);\n      }\n    }\n\n    return edges;\n\n  }\n\n  /**\n   * Returns a list of tiddlers (= tiddler names) that are targeted by the specified tiddler.\n   * Note: All referenced tiddlers have to be grouped by their edge type.\n   *\n   * @interface\n   * @param {Tiddler} tObj - the tiddler that holds the references.\n   * @param {Object<TiddlerReference, boolean>} toWL - a whitelist of tiddlers that are allowed to\n   *     be included in the result.\n   * @param {Object<id, EdgeType>} typeWL - a whitelist that defines that only Tiddlers that are linked\n   *     via a type specified in the list may be included in the result.\n   * @return {Object<string, TiddlerReference[]>|null} a list of referenced tiddlers grouped by their edge type.\n   */\n  getReferences(tObj, toWL, typeWL) {\n\n    throw new MissingOverrideError(this, 'getReferences');\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport default AbstractRefEdgeTypeSubscriber;\n"],"sourceRoot":"../../../../../../src/plugins"}