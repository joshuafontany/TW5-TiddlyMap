{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/TmapEdgeTypeSubscriber.js"],"names":["Object","defineProperty","exports","value","TmapEdgeTypeSubscriber","undefined","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_utils","require","_utils2","_interopRequireDefault","_Edge","_Edge2","_AbstractEdgeTypeSubscriber","_AbstractEdgeTypeSubscriber2","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_AbstractEdgeTypeSubs","allEdgeTypes","options","this","getPrototypeOf","priority","loadEdges","tObj","toWL","typeWL","connections","utils","parseFieldData","tById","tracker","getTiddlersByIds","fromId","fields","edges","makeHashMap","conId","con","toTRef","to","type","Edge","insertEdge","edge","id","genUUID","writeFieldData","$tm","config","sys","jsonIndentation","deleteEdge","canHandle","edgeType","AbstractEdgeTypeSubscriber"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/TmapEdgeTypeSubscriber.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/modules/edge-type-handler/tmap\ntype: application/javascript\nmodule-type: tmap.edgetypehandler\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport Edge from '$:/plugins/felixhayashi/tiddlymap/js/Edge';\nimport AbstractEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractEdgeTypeSubscriber';\n\n/*** Code **********************************************************/\n\n/**\n * TiddlyMap's original EdgeTypeSubscriber. It will store and retrieve edges by relying on\n * json stored in a tiddler field.\n *\n * @constructor\n */\nclass TmapEdgeTypeSubscriber extends AbstractEdgeTypeSubscriber {\n\n  constructor(allEdgeTypes, options = {}) {\n    super(allEdgeTypes, { priority: 0, ...options });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  loadEdges(tObj, toWL, typeWL) {\n\n    const connections = utils.parseFieldData(tObj, 'tmap.edges');\n    if (!connections) {\n      return;\n    }\n\n    const tById = this.tracker.getTiddlersByIds();\n    const fromId = tObj.fields['tmap.id'];\n\n    const edges = utils.makeHashMap();\n\n    for (let conId in connections) {\n\n      const con = connections[conId];\n      const toTRef = tById[con.to];\n      if (toTRef && (!toWL || toWL[toTRef]) && (!typeWL || typeWL[con.type])) {\n\n        edges[conId] = new Edge(fromId, con.to, con.type, conId);\n      }\n    }\n\n    return edges;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  insertEdge(tObj, edge, type) {\n\n    // load existing connections\n    var connections = utils.parseFieldData(tObj, 'tmap.edges', {});\n\n    // assign new id if not present yet\n    edge.id = edge.id || utils.genUUID();\n    // add to connections object\n    connections[edge.id] = {to: edge.to, type: type.id};\n\n    // save\n    utils.writeFieldData(tObj, 'tmap.edges', connections, $tm.config.sys.jsonIndentation);\n\n    return edge;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  deleteEdge (tObj, edge, type) {\n\n    if (!edge.id) return;\n\n    // load\n    var connections = utils.parseFieldData(tObj, 'tmap.edges', {});\n\n    // delete\n    delete connections[edge.id];\n\n    // save\n    utils.writeFieldData(tObj, 'tmap.edges', connections, $tm.config.sys.jsonIndentation);\n\n    return edge;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  canHandle(edgeType) {\n\n    return true;\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport { TmapEdgeTypeSubscriber };\n"],"sourceRoot":"../../../../../../src/plugins"}