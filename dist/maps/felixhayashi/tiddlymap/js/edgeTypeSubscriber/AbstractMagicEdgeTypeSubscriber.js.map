{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/AbstractMagicEdgeTypeSubscriber.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_utils","require","_utils2","_interopRequireDefault","_Edge","_Edge2","_exception","_AbstractRefEdgeTypeSubscriber","_AbstractRefEdgeTypeSubscriber2","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","AbstractMagicEdgeTypeSubscriber","_AbstractRefEdgeTypeS","allEdgeTypes","options","this","_this","getPrototypeOf","edgeTypesByFieldName","utils","makeHashMap","id","edgeType","canHandle","name","getReferencesFromField","tObj","fieldName","toWL","MissingOverrideError","getReferences","typeWL","refsGroupedByType","fieldNames","fields","type","toRefs","AbstractRefEdgeTypeSubscriber"],"mappings":"AAAA,aAEAA,OAAOC,eAAeC,QAAS,aAAc,CAC3CC,MAAO,OAGT,IAAIC,aAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,YAAc,MAAOD,EAAWE,aAAe,KAAM,GAAI,UAAWF,EAAYA,EAAWG,SAAW,KAAMb,OAAOC,eAAeK,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAe,GAAID,EAAYX,EAAiBU,EAAYG,UAAWF,GAAa,GAAIC,EAAaZ,EAAiBU,EAAaE,GAAc,OAAOF,GAA7gB,GAMnB,IAAAI,OAAAC,QAAA,8CAFA,IAAIC,QAAUC,uBAAuBH,QAGrC,IAAAI,MAAAH,QAAA,6CACA,IAAII,OAASF,uBAAuBC,OAApC,IAAAE,WAAAL,QAAA,kDACA,IAAAM,+BAAAN,QAAA,sEAKA,IAAIO,gCAAkCL,uBAAuBI,gCAE7D,SAASJ,uBAAuBM,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,GAEvF,SAASG,gBAAgBC,EAAUjB,GAAe,KAAMiB,aAAoBjB,GAAc,CAAE,MAAM,IAAIkB,UAAU,sCAEhH,SAASC,2BAA2BC,EAAMC,GAAQ,IAAKD,EAAM,CAAE,MAAM,IAAIE,eAAe,6DAAgE,OAAOD,WAAgBA,IAAS,iBAAmBA,IAAS,YAAcA,EAAOD,EAEzO,SAASG,UAAUC,EAAUC,GAAc,UAAWA,IAAe,YAAcA,IAAe,KAAM,CAAE,MAAM,IAAIP,UAAU,kEAAoEO,GAAeD,EAASrB,UAAYlB,OAAOyC,OAAOD,GAAcA,EAAWtB,UAAW,CAAEwB,YAAa,CAAEvC,MAAOoC,EAAU5B,WAAY,MAAOE,SAAU,KAAMD,aAAc,QAAW,GAAI4B,EAAYxC,OAAO2C,eAAiB3C,OAAO2C,eAAeJ,EAAUC,GAAcD,EAASK,UAAYJ;;;;;;;;;;wBAeje,IAvBMK,gCAuBgC,SAAUC,GAC9CR,UAAUO,EAAiCC,GAnB3C,SAAAD,EAAYE,EAAcC,GAASjB,gBAAAkB,KAAAJ,GAAA,IAAAK,EAAAhB,2BAAAe,MAAAJ,EAAAD,WAAA5C,OAAAmD,eAAAN,IAAAT,KAAAa,KAE3BF,EAAcC,IAGpBE,EAAKE,qBAAuBC,QAAAA,QAAMC,cAElC,IAAK,IAAIC,KAAMR,EAAc,CAE3B,IAAMS,EAAWT,EAAaQ,GAC9B,GAAIL,EAAKO,UAAUD,GAAW,CAC5BN,EAAKE,qBAAqBI,EAASE,MAAQF,GAXd,OAAAN,EAuDnC9C,aAAayC,EAAiC,CAAC,CAC7C/B,IAAK,yBACLX,MAAO,SAASwD,EA9BKC,EAAMC,EAAWC,GAEtC,MAAM,IAAIC,WAAAA,qBAAqBd,KAAM,4BAgCpC,CACDnC,IAAK,gBAMLX,MAAO,SAAS6D,EAhCJJ,EAAME,EAAMG,GAExB,IAAMC,EAAoBb,QAAAA,QAAMC,cAChC,IAAMa,EAAaP,EAAKQ,OAExB,IAAK,IAAIP,KAAaM,EAAY,CAGhC,IAAME,EAAOpB,KAAKG,qBAAqBS,GAEvC,IAAKQ,GAASJ,IAAWA,EAAOI,EAAKd,IAAM,SAG3C,IAAMe,EAASrB,KAAKU,uBAAuBC,EAAMC,EAAWC,GAE5D,GAAIQ,GAAUA,EAAO7D,OAAQ,CAC3ByD,EAAkBG,EAAKd,IAAMe,GAKjC,OAAOJ,MAiCT,OAAOrB,EAxE6B,CAvBQ0B,gCAAAA,SAoG9CrE,QAAQ4B,QA/BOe","file":"../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/AbstractMagicEdgeTypeSubscriber.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/AbstractMagicEdgeTypeSubscriber\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport Edge from '$:/plugins/felixhayashi/tiddlymap/js/Edge';\nimport { MissingOverrideError } from '$:/plugins/felixhayashi/tiddlymap/js/exception';\nimport AbstractRefEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractRefEdgeTypeSubscriber';\n\n/**\n * @constructor\n */\nclass AbstractMagicEdgeTypeSubscriber extends AbstractRefEdgeTypeSubscriber {\n\n  /**\n   * @inheritDoc\n   */\n  constructor(allEdgeTypes, options) {\n\n    super(allEdgeTypes, options);\n\n    // later used for edge retrieval to identify those fields that hold connections\n    this.edgeTypesByFieldName = utils.makeHashMap();\n\n    for (let id in allEdgeTypes) {\n\n      const edgeType = allEdgeTypes[id];\n      if (this.canHandle(edgeType)) {\n        this.edgeTypesByFieldName[edgeType.name] = edgeType;\n      }\n    }\n\n  }\n\n  /**\n   * Returns all references to other tiddlers stored in the specified tiddler.\n   *\n   * @interface\n   * @param {Tiddler} tObj - the tiddler that holds the references.\n   * @param {String} fieldName - the name of the field to get the reference from.\n   * @param {Object<TiddlerReference, boolean>} toWL - a whitelist of tiddlers that are allowed to\n   *     be included in the result.\n   * @return {Object<Id, Edge>|null}\n   */\n  getReferencesFromField(tObj, fieldName, toWL) {\n\n    throw new MissingOverrideError(this, 'getReferencesFromField');\n\n  };\n\n  /**\n   * @inheritDoc\n   */\n  getReferences(tObj, toWL, typeWL) {\n\n    const refsGroupedByType = utils.makeHashMap();\n    const fieldNames = tObj.fields;\n\n    for (let fieldName in fieldNames) {\n\n\n      const type = this.edgeTypesByFieldName[fieldName];\n\n      if (!type || (typeWL && !typeWL[type.id])) continue;\n\n\n      const toRefs = this.getReferencesFromField(tObj, fieldName, toWL);\n\n      if (toRefs && toRefs.length) {\n        refsGroupedByType[type.id] = toRefs;\n      }\n\n    }\n\n    return refsGroupedByType;\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport default AbstractMagicEdgeTypeSubscriber;\n"],"sourceRoot":"../../../../../../src/plugins"}