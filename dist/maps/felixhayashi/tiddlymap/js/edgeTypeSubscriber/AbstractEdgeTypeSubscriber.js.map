{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/AbstractEdgeTypeSubscriber.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_EdgeType","require","_EdgeType2","_interopRequireDefault","_exception","obj","__esModule","default","_classCallCheck","instance","TypeError","AbstractEdgeTypeSubscriber","allEdgeTypes","_ref","arguments","undefined","_ref$priority","priority","_ref$skipOthers","skipOthers","_ref$ignore","ignore","this","setTracker","tracker","loadEdges","tObj","toWL","typeWL","MissingOverrideError","canHandle","edgeType","insertEdge","edge","type","deleteEdge"],"mappings":"AAAA,aAEAA,OAAOC,eAAeC,QAAS,aAAc,CAC3CC,MAAO,OAGT,IAAIC,aAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,YAAc,MAAOD,EAAWE,aAAe,KAAM,GAAI,UAAWF,EAAYA,EAAWG,SAAW,KAAMb,OAAOC,eAAeK,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAe,GAAID,EAAYX,EAAiBU,EAAYG,UAAWF,GAAa,GAAIC,EAAaZ,EAAiBU,EAAaE,GAAc,OAAOF,GAA7gB;;;;;;;;;;;wBAOnB,IAAAI,UAAAC,QAAA,iDAQA,IAAIC,WAAaC,uBAAuBH,WAPxC,IAAAI,WAAAH,QAAA,kDAWA,SAASE,uBAAuBE,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,GAEvF,SAASG,gBAAgBC,EAAUb,GAAe,KAAMa,aAAoBb,GAAc,CAAE,MAAM,IAAIc,UAAU,sCAKhH,IAbMC,2BAa2B,WAG/B,SAAAA,EAAYC,GAAwE,IAAAC,EAAAC,UAAAxB,OAAA,GAAAwB,UAAA,KAAAC,UAAAD,UAAA,GAAJ,GAAIE,EAAAH,EAAxDI,SAAAA,EAAwDD,IAAAD,UAA7C,EAA6CC,EAAAE,EAAAL,EAA1CM,WAAAA,EAA0CD,IAAAH,UAA7B,KAA6BG,EAAAE,EAAAP,EAAvBQ,OAAAA,EAAuBD,IAAAL,UAAd,MAAcK,EAAAZ,gBAAAc,KAAAX,GAElFW,KAAKV,aAAeA,EACpBU,KAAKL,SAAWA,EAChBK,KAAKH,WAAaA,EAClBG,KAAKD,OAASA,EA+BhBpC,aAAa0B,EAA4B,CAAC,CACxChB,IAAK,aACLX,MAAO,SAASuC,EAzBPC,GACTF,KAAKE,QAAUA,IAyCd,CACD7B,IAAK,YACLX,MAAO,SAASyC,EA5BRC,EAAMC,EAAMC,GAEpB,MAAM,IAAIC,WAAAA,qBAAqBP,KAAM,eAuCpC,CACD3B,IAAK,YACLX,MAAO,SAAS8C,EA9BRC,GAER,MAAM,IAAIF,WAAAA,qBAAqBP,KAAM,eAyCpC,CACD3B,IAAK,aACLX,MAAO,SAASgD,EAhCPN,EAAMO,EAAMC,MA4CpB,CACDvC,IAAK,aACLX,MAAO,SAASmD,EAjCPT,EAAMO,EAAMC,QAwCvB,OAAOvB,EA/GwB,GAoHjC5B,QAAQwB,QApCOI","file":"../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/AbstractEdgeTypeSubscriber.js","sourcesContent":["/* @preserve TW-Guard *//* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/AbstractEdgeTypeSubscriber\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n/* @preserve TW-Guard */\n\nimport EdgeType from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport { MissingOverrideError } from '$:/plugins/felixhayashi/tiddlymap/js/exception';\n\n/**\n * Super class for all edge type subscribers.\n */\nclass AbstractEdgeTypeSubscriber {\n\n  /**\n   * @param {Object.<id, EdgeType>} allEdgeTypes - A list of all EdgeType instances that\n   *     are currently in the system. Each subscriber may use this list to build up an\n   *     index or perform mappings etc. Note that this list does not include types that are\n   *     just about to be inserted. Therefore, this list should only be used, if needed,\n   *     in the context of edge retrieval via loadEdges.\n   * @param {number} [priority} - Subscribers with a higher priority get executed earlier\n   * @param {boolean} [skipOthers] - In case of insert and delete operations: Whether or\n   *     not to skip any subsequent subscribers that also can handle the edge type\n   *     but have a lower priority assigned.\n   * @param {boolean} [ignore] - Whether or not to completely ignore this subscriber.\n   *     This flag is useful if you want to dynamically at runtime whether or not to\n   *     include the subscriber.\n   */\n  constructor(allEdgeTypes, { priority = 0, skipOthers = true, ignore = false } = {}) {\n\n    this.allEdgeTypes = allEdgeTypes;\n    this.priority = priority;\n    this.skipOthers = skipOthers;\n    this.ignore = ignore;\n\n  }\n\n  /**\n   * DI\n   * @param {Tracker} tracker\n   */\n  setTracker(tracker) {\n    this.tracker = tracker;\n  }\n\n  /**\n   * Returns all edges stored in the specified tiddler.\n   *\n   * @interface\n   * @param {Tiddler} tObj - the tiddler that holds the references.\n   * @param {Object<TiddlerReference, boolean>} toWL - a whitelist of tiddlers that are allowed to\n   *     be included in the result.\n   * @param {Object<id, EdgeType>} [typeWL] - a whitelist that defines that only Tiddlers that are linked\n   *     via a type specified in the list may be included in the result. If typeWL is not passed it means\n   *     all types are included.\n   * @return {Object<Id, Edge>|null}\n   */\n  loadEdges(tObj, toWL, typeWL) {\n\n    throw new MissingOverrideError(this, 'loadEdges');\n\n  }\n\n  /**\n   * Whether or not this subscriber instance can handle an edge of the given type.\n   *\n   * @interface\n   * @param {EdgeType} edgeType\n   * @return boolean\n   */\n  canHandle(edgeType) {\n\n    throw new MissingOverrideError(this, 'canHandle');\n\n  }\n\n  /**\n   * Called by the Adapter whenever a type is inserted\n   *\n   * @param {Tiddler} tObj - the tiddler that holds the references.\n   * @param {Edge} edge - the edge to be deleted\n   * @param {EdgeType} type\n   */\n  insertEdge(tObj, edge, type) {\n\n    // optional\n\n  }\n\n  /**\n   * Called by the Adapter whenever a type is deleted\n   *\n   * @param {Tiddler} tObj - the tiddler that holds the references.\n   * @param {Edge} edge - the edge to be deleted\n   * @param {EdgeType} type\n   */\n  deleteEdge(tObj, edge, type) {\n\n    // optional\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport default AbstractEdgeTypeSubscriber;\n"],"sourceRoot":"../../../../../../src/plugins"}