{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/EdgeTypeSubscriberRegistry.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","EdgeTypeSubscriberRegistry","subscribers","allEdgeTypes","tracker","this","subscriberClasses","updateIndex","getAllForType","edgeType","allSubscribers","subscribersForType","l","canHandle","push","skipOthers","getAll","subscriberClass","moduleName","subscriber","setTracker","ignore","sort","s1","s2","priority","default"],"mappings":"AAAA,aAEAA,OAAOC,eAAeC,QAAS,aAAc,CAC3CC,MAAO,OAGT,IAAIC,aAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,YAAc,MAAOD,EAAWE,aAAe,KAAM,GAAI,UAAWF,EAAYA,EAAWG,SAAW,KAAMb,OAAOC,eAAeK,EAAQI,EAAWI,IAAKJ,IAAiB,OAAO,SAAUK,EAAaC,EAAYC,GAAe,GAAID,EAAYX,EAAiBU,EAAYG,UAAWF,GAAa,GAAIC,EAAaZ,EAAiBU,EAAaE,GAAc,OAAOF,GAA7gB,GAEnB,SAASI,gBAAgBC,EAAUL,GAAe,KAAMK,aAAoBL,GAAc,CAAE,MAAM,IAAIM,UAAU;;;;;;;;;;;wBAkBhH,IAVMC,2BAU2B,WAH/B,SAAAA,EAAYC,EAAaC,EAAcC,GAASN,gBAAAO,KAAAJ,GAE9CI,KAAKC,kBAAoBJ,EACzBG,KAAKD,QAAUA,EAEfC,KAAKE,YAAYJ,GAsBnBpB,aAAakB,EAA4B,CAAC,CACxCR,IAAK,gBACLX,MAAO,SAAS0B,EAdJC,GAEZ,IAAMC,EAAiBL,KAAKK,eAC5B,IAAMC,EAAqB,GAE3B,IAAK,IAAIxB,EAAI,EAAGyB,EAAIF,EAAetB,OAAQD,EAAIyB,EAAGzB,IAAK,CAErD,GAAIuB,EAAevB,GAAG0B,UAAUJ,GAAW,CAEzCE,EAAmBG,KAAKJ,EAAevB,IAEvC,GAAIuB,EAAevB,GAAG4B,WAAY,CAChC,QAKN,OAAOJ,IAuBN,CACDlB,IAAK,SACLX,MAAO,SAASkC,IAdhB,OAAOX,KAAKK,iBA6BX,CACDjB,IAAK,cACLX,MAAO,SAASyB,EAlBNJ,GAEV,IAAMO,EAAiB,GAGvB,IAAMO,EAAkBZ,KAAKC,kBAC7B,IAAK,IAAIY,KAAcD,EAAiB,CAEtC,IAAME,EAAa,IAAKF,EAAgBC,GAAaf,GACrDgB,EAAWC,WAAWf,KAAKD,SAG3B,GAAIe,EAAWE,SAAW,KAAM,CAC9B,SAGFX,EAAeI,KAAKK,GAItBT,EAAeY,KAAK,SAACC,EAAIC,GAAL,OAAYA,EAAGC,SAAWF,EAAGE,WAEjDpB,KAAKK,eAAiBA,MAwBxB,OAAOT,EAnGwB,GAwGjCpB,QAAQ6C,QAtBOzB","file":"../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/EdgeTypeSubscriberRegistry.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/EdgeTypeSubscriberRegistry\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/**\n * Registry to store and retrieve EdgeTypeSubcriber modules that are responsible\n * for handling the retrieval, insertion and deletion of EdgeType objects.\n */\nclass EdgeTypeSubscriberRegistry {\n\n  /**\n   * @param {AbstractEdgeTypeSubscriber[]} subscribers\n   * @param {EdgeType[]} allEdgeTypes\n   * @param {Tracker} tracker\n   */\n  constructor(subscribers, allEdgeTypes, tracker) {\n\n    this.subscriberClasses = subscribers;\n    this.tracker = tracker;\n\n    this.updateIndex(allEdgeTypes);\n\n  }\n\n  /**\n   * Gets all matching subscribers for a type.\n   *\n   * @param {EdgeType} edgeType\n   * @returns AbstractEdgeTypeSubscriber[]\n   */\n  getAllForType(edgeType) {\n\n    const allSubscribers = this.allSubscribers;\n    const subscribersForType = [];\n\n    for (let i = 0, l = allSubscribers.length; i < l; i++) {\n\n      if (allSubscribers[i].canHandle(edgeType)) {\n\n        subscribersForType.push(allSubscribers[i]);\n\n        if (allSubscribers[i].skipOthers) {\n          break;\n        }\n      }\n    }\n\n    return subscribersForType;\n\n  }\n\n  /**\n   * Gets all subscribers.\n   *\n   * @returns AbstractEdgeTypeSubscriber[]\n   */\n  getAll() {\n\n    return this.allSubscribers;\n\n  }\n\n  /**\n   * Indexes all subscribers. Moreover, subscribers get linked to the edge\n   * types that currently exist in the wiki.\n   *\n   * This method should be called everytime after an edge type is added or\n   * removed in the system.\n   *\n   * @param {EdgeType[]} allEdgeTypes\n   */\n  updateIndex(allEdgeTypes) {\n\n    const allSubscribers = [];\n\n    // instantiate and register all active subscriber modules\n    const subscriberClass = this.subscriberClasses;\n    for (let moduleName in subscriberClass) {\n\n      const subscriber = new (subscriberClass[moduleName])(allEdgeTypes);\n      subscriber.setTracker(this.tracker);\n\n      // ignore all subscribers that have their ignore flag set to false\n      if (subscriber.ignore === true) {\n        continue;\n      }\n\n      allSubscribers.push(subscriber);\n    }\n\n    // sort subscribers by priority\n    allSubscribers.sort((s1, s2) => s2.priority - s1.priority);\n\n    this.allSubscribers = allSubscribers;\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport default EdgeTypeSubscriberRegistry;\n"],"sourceRoot":"../../../../../../src/plugins"}