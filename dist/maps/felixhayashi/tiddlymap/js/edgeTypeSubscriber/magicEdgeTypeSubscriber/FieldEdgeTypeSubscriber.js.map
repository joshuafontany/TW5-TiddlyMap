{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/magicEdgeTypeSubscriber/FieldEdgeTypeSubscriber.js"],"names":["Object","defineProperty","exports","value","FieldEdgeTypeSubscriber","undefined","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_utils","require","_utils2","_interopRequireDefault","_AbstractMagicEdgeTypeSubscriber","_AbstractMagicEdgeTypeSubscriber2","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_AbstractMagicEdgeTyp","allEdgeTypes","options","this","getPrototypeOf","priority","canHandle","edgeType","namespace","getReferencesFromField","tObj","fieldName","toWL","fields","insertEdge","edge","type","toTRef","tracker","getTiddlerById","to","utils","setField","name","deleteEdge","AbstractMagicEdgeTypeSubscriber"],"mappings":"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","file":"../../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/magicEdgeTypeSubscriber/FieldEdgeTypeSubscriber.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/modules/edge-type-handler/field\ntype: application/javascript\nmodule-type: tmap.edgetypehandler\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport AbstractMagicEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractMagicEdgeTypeSubscriber';\n\n/**\n * The FieldEdgeTypeSubscriber deals with connections that are stored in form of tiddler fields.\n * In this case one field can only hold one connection.\n *\n * If an EdgeType with a \"tw-field\" namespace is inserted or deleted, the type's name\n * is interpreted as field name and the connection is stored or removed in a tiddler\n * field with of that name.\n *\n * E.g. creating an edge between the tiddlers \"Betsy\" and \"Dave\" with the type\n * tw-field:husband will create a field \"husband\" inside the \"Betsy\" tiddler and set\n * \"Dave\" as value.\n\n * Note: A single field can only hold one connection.\n *\n * @see http://tiddlymap.org/#tw-field\n *\n * @inheritDoc\n * @constructor\n */\nclass FieldEdgeTypeSubscriber extends AbstractMagicEdgeTypeSubscriber {\n\n  /**\n   * @inheritDoc\n   */\n  constructor(allEdgeTypes, options = {}) {\n    super(allEdgeTypes, { priority: 10, ...options });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  canHandle(edgeType) {\n\n    return edgeType.namespace === 'tw-field';\n\n  }\n\n  /**\n   * @override\n   */\n  getReferencesFromField(tObj, fieldName, toWL) {\n\n    // wrap in array\n    return [ tObj.fields[fieldName] ];\n\n  }\n\n  /**\n   * Stores and maybe overrides an edge in this tiddler\n   */\n  insertEdge(tObj, edge, type) {\n\n    const toTRef = this.tracker.getTiddlerById(edge.to);\n    if (toTRef == null) { // null or undefined\n      return;\n    }\n\n    // only use the name without the private marker or the namespace\n    utils.setField(tObj, type.name, toTRef);\n\n    return edge;\n\n  };\n\n  /**\n   * Deletes an edge in this tiddler\n   */\n  deleteEdge(tObj, edge, type) {\n\n    const toTRef = this.tracker.getTiddlerById(edge.to);\n\n    if (toTRef == null) { // null or undefined\n      return;\n    }\n\n    // only use the name without the private marker or the namespace\n    utils.setField(tObj, type.name, undefined);\n\n    return edge;\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport { FieldEdgeTypeSubscriber };\n"],"sourceRoot":"../../../../../../../src/plugins"}