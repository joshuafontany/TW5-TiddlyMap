{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/magicEdgeTypeSubscriber/ListEdgeTypeSubscriber.js"],"names":["Object","defineProperty","exports","value","ListEdgeTypeSubscriber","undefined","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_utils","require","_utils2","_interopRequireDefault","_AbstractMagicEdgeTypeSubscriber","_AbstractMagicEdgeTypeSubscriber2","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_AbstractMagicEdgeTyp","allEdgeTypes","options","this","getPrototypeOf","priority","canHandle","edgeType","namespace","getReferencesFromField","tObj","fieldName","toWL","$tw","utils","parseStringArray","fields","insertEdge","edge","type","to","name","list","slice","toTRef","tracker","getTiddlerById","push","setField","stringifyList","deleteEdge","index","indexOf","splice","stringList","AbstractMagicEdgeTypeSubscriber"],"mappings":"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","file":"../../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/magicEdgeTypeSubscriber/ListEdgeTypeSubscriber.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/modules/edge-type-handler/list\ntype: application/javascript\nmodule-type: tmap.edgetypehandler\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport AbstractMagicEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractMagicEdgeTypeSubscriber';\n\n/*** Code **********************************************************/\n\n/**\n * The ListEdgeTypeSubstriber deals with connections that are stored inside\n * tiddler fields in a tiddler-list format.\n *\n * If an EdgeType with a 'tw-list\" namespace is inserted or deleted, the type's name\n * is interpreted as field name and the list of connections is stored or removed in a tiddler\n * field with of that name. Each outgoing connection to a tiddler is stored by\n * inserting the title the edge is pointing to into a list.\n *\n * Say you the user creates a connection between tiddler \"Dawna Dozal\" and\n * tiddler \"Toney Thacker\" and names the connection \"tw-list:friends\". Then a field\n * named \"friends\" will be created in tiddler \"Dawna Dozal\" and \"Toney Thacker\" will be\n * added to this field.\n *\n * @see http://tiddlymap.org/#tw-list\n */\nclass ListEdgeTypeSubscriber extends AbstractMagicEdgeTypeSubscriber {\n\n  /**\n   * @inheritDoc\n   */\n  constructor(allEdgeTypes, options = {}) {\n    super(allEdgeTypes, { priority: 10, ...options });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  canHandle(edgeType) {\n\n    return edgeType.namespace === 'tw-list';\n\n  }\n\n  /**\n   * @override\n   */\n  getReferencesFromField(tObj, fieldName, toWL) {\n\n    return $tw.utils.parseStringArray(tObj.fields[fieldName]);\n\n  }\n\n  /**\n   * Stores and maybe overrides an edge in this tiddler\n   */\n  insertEdge(tObj, edge, type) {\n\n    if (!edge.to) {\n      return;\n    }\n\n    // get the name without the private marker or the namespace\n    const name = type.name;\n\n    let list = $tw.utils.parseStringArray(tObj.fields[name]);\n    // we need to clone the array since tiddlywiki might directly\n    // returned the auto-parsed field value (as in case of tags, or list)\n    // and this array would be read only!\n    list = (list || []).slice();\n\n    // transform\n    const toTRef = this.tracker.getTiddlerById(edge.to);\n\n    list.push(toTRef);\n\n    // save\n    utils.setField(tObj, name, $tw.utils.stringifyList(list));\n\n    return edge;\n\n  };\n\n  /**\n   * Deletes an edge in this tiddler\n   */\n  deleteEdge(tObj, edge, type) {\n\n    let list = $tw.utils.parseStringArray(tObj.fields[type.name]);\n    // we need to clone the array since tiddlywiki might directly\n    // returned the auto-parsed field value (as in case of tags, or list)\n    // and this array would be read only!\n    list = (list || []).slice();\n\n    // transform\n    const toTRef = this.tracker.getTiddlerById(edge.to);\n\n    const index = list.indexOf(toTRef);\n    if (index > -1) {\n      list.splice(index, 1);\n    }\n\n    // @see https://github.com/felixhayashi/TW5-TiddlyMap/issues/288\n    let stringList;\n    if (list.length > 0) {\n      stringList = $tw.utils.stringifyList(list);\n    }\n    // save\n    utils.setField(tObj, type.name, stringList);\n\n    return edge;\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport { ListEdgeTypeSubscriber };\n"],"sourceRoot":"../../../../../../../src/plugins"}